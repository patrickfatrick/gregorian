{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","gregorian.min.js","src/gregorian.js","src/modules/Gregorian.js","src/modules/add-subtract.js","src/modules/reagent.js","src/modules/recite.js","src/modules/reformat.js","src/modules/restart-utc.js","src/modules/restart.js","src/modules/set-utc.js","src/modules/set.js","src/modules/to.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","gregorian","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"./src/gregorian",2,"Gregorian","./modules/Gregorian",3,"_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","to","add","subtract","restart","restartUTC","reagent","recite","setUTC","set","d","input","value","obj","Date","date","./add-subtract","./reagent","./recite","./restart","./restart-utc","./set","./set-utc","./to",4,"addSubtract","increment","increments","setUTCMilliseconds","getUTCMilliseconds","setUTCSeconds","getUTCSeconds","setUTCMinutes","getUTCMinutes","h","setUTCHours","getUTCHours","setUTCDate","getUTCDate","w","m","newMonth","getUTCMonth","newYear","getUTCFullYear","newDate","setUTCFullYear","y",5,"isNaN","getTime",6,7,"AP","hour","getHours","ampm","ap","D","days","dayOfWeek","getDay","DD","H","HH","toString","M","months","month","getMonth","MM","day","getDate","dd","dt","hh","milliseconds","getMilliseconds","ll","mm","second","getSeconds","ss","minute","getMinutes","tt","yy","getFullYear","substr","yyyy","zz","offset","getTimezoneOffset","iso","format","toISOString","split","utc","toUTCString","arr","newArr","push","join","unix","parse",8,"getUTCDay","setUTCMonth",9,"setSeconds","setMinutes","setHours","setDate","setMonth","setFullYear",10,"currentDay","currentMilliseconds",11,"setMilliseconds",12,"delimiter","pieces","converted","forEach","piece","re","RegExp","test","reformat","replacer","replace","./reformat"],"mappings":"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","file":"gregorian.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar gregorian = require('./src/gregorian');\nmodule.exports = gregorian;","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.gregorian = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';var gregorian=require('./src/gregorian');module.exports=gregorian;\n\n},{\"./src/gregorian\":2}],2:[function(require,module,exports){\n'use strict';var Gregorian=require('./modules/Gregorian');var gregorian=new Gregorian();module.exports=gregorian;\n\n},{\"./modules/Gregorian\":3}],3:[function(require,module,exports){\n'use strict'; /**\n * Gregorian\n * Author: Patrick Fricano\n * https://www.github.com/patrickfatrick/gregorian\n */var _createClass=(function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\" in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}var to=require('./to');var add=require('./add-subtract').add;var subtract=require('./add-subtract').subtract;var restart=require('./restart');var restartUTC=require('./restart-utc');var reagent=require('./reagent');var recite=require('./recite');var setUTC=require('./set-utc');var set=require('./set');module.exports=(function(){function Gregorian(){_classCallCheck(this,Gregorian);this.d;this.input;this.to=to,this.add=add,this.subtract=subtract,this.restart=restart,this.restartUTC=restartUTC,this.reagent=reagent,this.recite=recite,this.setUTC=setUTC;this.set=set;} /**\n\t * Form a date (or other object) into a Gregorian object\n\t * @param  {Date}   obj any date\n\t * @return {Object}     A Gregorian instance\n\t */_createClass(Gregorian,[{key:'reform',value:function reform(obj){obj=obj||new Date();var date=new Date(obj);this.d=date;this.input=obj;return this;}}]);return Gregorian;})();\n\n},{\"./add-subtract\":4,\"./reagent\":5,\"./recite\":6,\"./restart\":9,\"./restart-utc\":8,\"./set\":11,\"./set-utc\":10,\"./to\":12}],4:[function(require,module,exports){\n'use strict'; /**\n * Adds specified increments to a gregorian object\n * @param   {Number} n         a number to multiply the increment by\n * @param   {String} increment an increment to add\n * @returns {Object} a new gregorian object\n */function addSubtract(obj,n,increment){var increments={};increments.l=function(date){return new Date(date.setUTCMilliseconds(date.getUTCMilliseconds()+n));};increments.s=function(date){return new Date(date.setUTCSeconds(date.getUTCSeconds()+n));};increments.t=function(date){return new Date(date.setUTCMinutes(date.getUTCMinutes()+n));};increments.h=function(date){return new Date(date.setUTCHours(date.getUTCHours()+n));};increments.d=function(date){return new Date(date.setUTCDate(date.getUTCDate()+n));};increments.w=function(date){return new Date(date.setUTCDate(date.getUTCDate()+n*7));};increments.m=function(date){var newMonth=date.getUTCMonth()+n;var newYear=date.getUTCFullYear();var newDate=date.getUTCDate();if(newDate>new Date(date.setUTCFullYear(newYear,newMonth+1,0)).getUTCDate()){return new Date(date.setUTCFullYear(newYear,newMonth+1,0));}else {return new Date(date.setUTCFullYear(newYear,newMonth,newDate));}};increments.y=function(date){var newYear=date.getUTCFullYear()+n;var newMonth=date.getUTCMonth();var newDate=date.getUTCDate();if(newDate>new Date(date.setUTCFullYear(newYear,newMonth+1,0)).getUTCDate()){return new Date(date.setUTCFullYear(newYear,newMonth+1,0));}else {return new Date(date.setUTCFullYear(newYear,newMonth,newDate));}};obj.d=increments[increment](obj.d);return obj;}exports.add=function(n,increment){return addSubtract(this,n*1,increment);};exports.subtract=function(n,increment){return addSubtract(this,n*-1,increment);};\n\n},{}],5:[function(require,module,exports){\n'use strict'; /*\n * Takes a gregorian object and checks that it has a valid date.\n * @param {Object}  A gregorian object\n * @return {Boolean}\n */function reagent(){if(isNaN(this.d.getTime())){return false;}return true;}module.exports=reagent;\n\n},{}],6:[function(require,module,exports){\n'use strict'; /*\n * Takes a gregorian object and outputs the date object\n * @param {Object}  A gregorian object\n * @return {Date} the date object it contains\n */function recite(){return this.d;}module.exports=recite;\n\n},{}],7:[function(require,module,exports){\n'use strict'; /**\n * Take a date object and output the capitalized 12-hour clock period (AM/PM)\n * @param   {Date}   date a date object\n * @returns {String} the capitalized 12-hour clock period \n */exports.AP=function(date){var hour=date.getHours();var ampm=hour<12?'AM':'PM';return ampm;}; /**\n * Take a date object and output the uncapitalized 12-hour clock period (AM/PM)\n * @param   {Date   date a date object\n * @returns {String} the uncapitalized 12-hour clock period \n */exports.ap=function(date){var hour=date.getHours();var ampm=hour<12?'am':'pm';return ampm;}; /**\n * Take a date object and output the abreviated day of the week\n * @param {Date} \ta date object\n * @returns {String}\tthe abbreviated day of the week\n */exports.D=function(date){var days=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];var dayOfWeek=date.getDay();return days[dayOfWeek];}; /**\n * Take a date object and output the day of the week\n * @param {Date} \ta date object\n * @returns {String} the full day of the week\n */exports.DD=function(date){var days=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];var dayOfWeek=date.getDay();return days[dayOfWeek];}; /**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */exports.H=function(date){var hour=date.getHours();return hour;}; /**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */exports.HH=function(date){var hour=date.getHours().toString();return hour.length<2?'0'+hour:hour;}; /**\n * Take a date object and output the abbreviated month\n * @param {Date} \ta date object\n * @returns {String}\tthe abbreviated month\n */exports.M=function(date){var months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sept','Oct','Nov','Dec'];var month=date.getMonth();return months[month];}; /**\n * Take a date object and output the month\n * @param {Date} \ta date object\n * @returns {String}\tthe full month\n */exports.MM=function(date){var months=['January','February','March','April','May','June','July','August','September','October','November','December'];var month=date.getMonth();return months[month];}; /**\n * Take a date object and output the date of the month with no leading zeros (1-31)\n * @param {Date} \ta date object\n * @returns {String}\tthe date of the month with no leading zeros\n */exports.d=function(date){var day=date.getDate().toString();return day;}; /**\n * Take a date object and output the two-digit date of the month (01-31)\n * @param {Date} \ta date object\n * @returns {String}\tthe two-digit date of the month\n */exports.dd=function(date){var day=date.getDate().toString();return day.length<2?'0'+day:day;}; /**\n * Take a date object and output the date of the month with no leading zeros but with the ordinal (1st-31st)\n * @param {Date} \ta date object\n * @returns {String}\tthe date with no leading zeros but with the ordinal\n */exports.dt=function(date){var day=date.getDate();switch(day){case 1:case 21:case 31:day+='st';break;case 2:case 22:day+='nd';break;case 3:case 23:day+='rd';break;default:day+='th';}return day;}; /**\n * Take a date object and outpit the hour with no leading zeros (1-12)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */exports.h=function(date){var hour=date.getHours();if(hour===0)hour=12;if(hour<13)hour=hour;if(hour>=13)hour=hour-12;return hour;}; /**\n * Take a date object and output the two-digit hour (01-12)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit hour\n */exports.hh=function(date){var hour=date.getHours();if(hour===0)hour=12;if(hour<13)hour=hour;if(hour>=13)hour=hour-12;hour=hour.toString();return hour.length<2?'0'+hour:hour;}; /**\n * Take a date object and output the milliseconds with no leading zeros (0-999)\n * @param   {Date} date a date object\n * @returns {String}    the number of milliseconds\n */exports.l=function(date){var milliseconds=date.getMilliseconds().toString();return milliseconds;}; /**\n * Take a date object and and output the three-digit milliseconds (000-999)\n * @param   {Date}   date a date object\n * @returns {String} the number of milliseconds\n */exports.ll=function(date){var milliseconds=date.getMilliseconds().toString();switch(milliseconds.length){case 1:milliseconds='00'+milliseconds;break;case 2:milliseconds='0'+milliseconds;break;default:milliseconds=milliseconds;break;}return milliseconds;}; /**\n * Take a date object and output the numeric month (1-12)\n * @param {Date} \ta date object\n * @returns {String}\tthe month with no leading zeros\n */exports.m=function(date){var month=(date.getMonth()+1).toString();return month;}; /**\n * Take a date object and output the two-digit month (01-12)\n * @param {Date} \ta date object\n * @returns {String}\tthe two-digit month\n */exports.mm=function(date){var month=(date.getMonth()+1).toString();return month.length<2?'0'+month:month;}; /**\n * Take a date object and outpit the seconds with no leading zeros (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the seconds with no leading zeros\n */exports.s=function(date){var second=date.getSeconds();return second;}; /**\n * Take a date object and outpit the two-digit seconds (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit seconds\n */exports.ss=function(date){var second=date.getSeconds().toString();return second.length<2?'0'+second:second;}; /**\n * Take a date object and output the minutes with no leading zeros\n * @param   {Date} date a date object\n * @returns {String}  the minutes with no leading zeros\n */exports.t=function(date){var minute=date.getMinutes().toString();return minute;}; /**\n * Take a date object and output the two-digit minutes\n * @param   {Date}   date a date object\n * @returns {String} the two-digit minutes\n */exports.tt=function(date){var minute=date.getMinutes().toString();return minute.length<2?'0'+minute:minute;}; /**\n * Take a date object and output the two-digit year\n * @param {Date} \ta date object\n * @returns {String}\tthe two-digit year\n */exports.yy=function(date){return date.getFullYear().toString().substr(2);}; /**\n * Take a date object and output the four-digit year\n * @param {Date} \ta date object\n * @returns {String}\tthe four-digit year\n */exports.yyyy=function(date){return date.getFullYear();}; /**\n * Take a date object and output the timezone offset (UTC +- 01:00, etc.)\n * @param   {Date}   date a date object\n * @returns {String} the timezone offset \n */exports.zz=function(date){var offset=date.getTimezoneOffset()/60*-1;return 'UTC '+offset+':00';}; /**\n * Converts a date object to an ISO string\n * @param   {Date}   date   a date object\n * @param {String}\t\tformat optional 'short' to remove the time\n * @returns {String} ISO String including time\n */exports.iso=function(date,format){format=format||null; //console.log('iso function date: ' + date);\nif(format==='short')return date.toISOString().split('T')[0];return date.toISOString();}; /**\n * Converts a date object to a UTC string\n * @param   {Date}   date a date object\n * @param \t{String}\tformat optional 'shart' to remove the time from the output\n * @returns {String} UTC string with or without time\n */exports.utc=function(date,format){format=format||null;var utc=date.toUTCString();if(format==='short'){var arr=utc.split(' ');var newArr=[];for(var i=0;i<4;i++){newArr.push(arr[i]);}return newArr.join(' ');}return utc;}; /**\n * Converts a date object to UNIX time (milliseconds from January 1, 1970)\n * @param   {Date}   date a date object\n * @returns {Number} milliseconds from January 1, 1970\n */exports.unix=function(date){return Date.parse(date);};\n\n},{}],8:[function(require,module,exports){\n'use strict'; /**\n * Sets the date or time to the start of the specified increment\n * @param   {String} increment an increment to set\n * @returns {Object} a new gregorian object\n */function restartUTC(increment){var increments={};increments.s=function(date){return new Date(date.setUTCSeconds(date.getUTCSeconds(),0));};increments.t=function(date){return new Date(date.setUTCMinutes(date.getUTCMinutes(),0,0));};increments.h=function(date){return new Date(date.setUTCHours(date.getUTCHours(),0,0,0));};increments.d=function(date){date.setUTCDate(date.getUTCDate());date.setUTCHours(0,0,0,0);return new Date(date);};increments.w=function(date){date.setUTCDate(date.getUTCDate()-date.getUTCDay());date.setUTCHours(0,0,0,0);return new Date(date);};increments.m=function(date){date.setUTCMonth(date.getUTCMonth(),1);date.setUTCHours(0,0,0,0);return new Date(date);};increments.y=function(date){date.setUTCFullYear(date.getUTCFullYear(),0,1);date.setUTCHours(0,0,0,0);return new Date(date);};this.d=increments[increment](this.d);return this;}module.exports=restartUTC;\n\n},{}],9:[function(require,module,exports){\n'use strict'; /**\n * Sets the date or time to the start of the specified increment\n * @param   {String} increment an increment to set\n * @returns {Object} a new gregorian object\n */function restart(increment){var increments={};increments.s=function(date){return new Date(date.setSeconds(date.getSeconds(),0));};increments.t=function(date){return new Date(date.setMinutes(date.getMinutes(),0,0));};increments.h=function(date){return new Date(date.setHours(date.getHours(),0,0,0));};increments.d=function(date){date.setDate(date.getDate());date.setHours(0,0,0,0);return new Date(date);};increments.w=function(date){date.setDate(date.getDate()-date.getDay());date.setHours(0,0,0,0);return new Date(date);};increments.m=function(date){date.setMonth(date.getMonth(),1);date.setHours(0,0,0,0);return new Date(date);};increments.y=function(date){date.setFullYear(date.getFullYear(),0,1);date.setHours(0,0,0,0);return new Date(date);};this.d=increments[increment](this.d);return this;}module.exports=restart;\n\n},{}],10:[function(require,module,exports){\n'use strict'; /**\n * Sets the date or time to specified interval\n * @param   {String} increment an increment to set\n * @param {String} value what to set the increment to\n * @returns {Object} a new gregorian object\n */function setUTC(value,increment){var increments={};increments.l=function(date){return new Date(date.setUTCMilliseconds(value));};increments.s=function(date){return new Date(date.setUTCSeconds(value));};increments.t=function(date){return new Date(date.setUTCMinutes(value));};increments.h=function(date){return new Date(date.setUTCHours(value));};increments.d=function(date){return new Date(date.setUTCDate(value));};increments.w=function(date){var currentDay=date.getUTCDay();var currentMilliseconds=date.getUTCMilliseconds();date.setUTCFullYear(date.getUTCFullYear(),0,value*7);var n=currentDay-date.getUTCDay();date.setUTCDate(date.getUTCDate()+n);return new Date(date.setUTCMilliseconds(currentMilliseconds));};increments.m=function(date){var newMonth=value-1;var newYear=date.getUTCFullYear();var newDate=date.getUTCDate();if(newDate>new Date(date.setUTCFullYear(newYear,newMonth+1,0)).getUTCDate()){return new Date(date.setUTCFullYear(newYear,newMonth+1,0));}else {return new Date(date.setUTCFullYear(newYear,newMonth,newDate));}};increments.y=function(date){var newYear=value;var newMonth=date.getUTCMonth();var newDate=date.getUTCDate();if(newDate>new Date(date.setUTCFullYear(newYear,newMonth+1,0)).getUTCDate()){return new Date(date.setUTCFullYear(newYear,newMonth+1,0));}else {return new Date(date.setUTCFullYear(newYear,newMonth,newDate));}};this.d=increments[increment](this.d);return this;}module.exports=setUTC;\n\n},{}],11:[function(require,module,exports){\n'use strict'; /**\n * Sets the date or time to specified interval\n * @param   {String} increment an increment to set\n * @param {String} value what to set the increment to\n * @returns {Object} a new gregorian object\n */function set(value,increment){var increments={};increments.l=function(date){return new Date(date.setMilliseconds(value));};increments.s=function(date){return new Date(date.setSeconds(value));};increments.t=function(date){return new Date(date.setMinutes(value));};increments.h=function(date){return new Date(date.setHours(value));};increments.d=function(date){return new Date(date.setDate(value));};increments.w=function(date){var currentDay=date.getDay();var currentMilliseconds=date.getMilliseconds();date.setFullYear(date.getFullYear(),0,value*7);var n=currentDay-date.getDay();date.setDate(date.getDate()+n);return new Date(date.setMilliseconds(currentMilliseconds));};increments.m=function(date){var newMonth=value-1;var newYear=date.getFullYear();var newDate=date.getDate();if(newDate>new Date(date.setFullYear(newYear,newMonth+1,0)).getDate()){return new Date(date.setFullYear(newYear,newMonth+1,0));}else {return new Date(date.setFullYear(newYear,newMonth,newDate));}};increments.y=function(date){var newYear=value;var newMonth=date.getMonth();var newDate=date.getDate();if(newDate>new Date(date.setFullYear(newYear,newMonth+1,0)).getDate()){return new Date(date.setFullYear(newYear,newMonth+1,0));}else {return new Date(date.setFullYear(newYear,newMonth,newDate));}};this.d=increments[increment](this.d);return this;}module.exports=set;\n\n},{}],12:[function(require,module,exports){\n'use strict';var reformat=require('./reformat'); /**\n * Take a Gregorian object and output the reformatted string\n * See https://github.com/patrickfatrick/gregorian#accepted-formats for details\n * @param {String} \tformat a string or date object (something that can be converted to a valid date)\n * @returns {String}\tthe date reformatted into the specified format\n */function to(format,delimiter){delimiter=delimiter||'+';var date=this.d;var pieces=['unix','utc-short','utc','iso-short','iso','yyyy','yy','DD','dd','dt','D','d','MM','mm','M','m','hh','h','HH','H','tt','t','AP','ap','ss','s','ll','l','zz'];var converted=format;pieces.forEach(function(piece){var re=new RegExp('\\\\b'+piece+'\\\\b','g');if(re.test(converted)){switch(piece){case 'unix':converted=reformat.unix(date);break;case 'utc-short':converted=reformat.utc(date,'short');break;case 'utc':converted=reformat.utc(date);break;case 'iso-short':converted=reformat.iso(date,'short');break;case 'iso':converted=reformat.iso(date);break;default:var replacer=reformat[piece](date);converted=converted.replace(re,replacer);}}});if(typeof converted==='string'){converted=converted.replace(new RegExp('\\\\'+delimiter,'g'),'');}return converted;}module.exports=to;\n\n},{\"./reformat\":7}]},{},[1])(1)\n});\n\n","'use strict';\n\nvar Gregorian = require('./modules/Gregorian');\n\nlet gregorian = new Gregorian();\nmodule.exports = gregorian;","'use strict';\n\n/**\n * Gregorian\n * Author: Patrick Fricano\n * https://www.github.com/patrickfatrick/gregorian\n */\n\nvar to = require('./to');\nvar add = require('./add-subtract').add;\nvar subtract = require('./add-subtract').subtract;\nvar restart = require('./restart');\nvar restartUTC = require('./restart-utc');\nvar reagent = require('./reagent');\nvar recite = require('./recite');\nvar setUTC = require('./set-utc');\nvar set = require('./set');\n\nmodule.exports = class Gregorian {\n\tconstructor () {\n\t\tthis.d;\n\t\tthis.input;\n\t\tthis.to = to,\n\t\tthis.add = add,\n\t\tthis.subtract = subtract,\n\t\tthis.restart = restart,\n\t\tthis.restartUTC = restartUTC,\n\t\tthis.reagent = reagent,\n\t\tthis.recite = recite,\n\t\tthis.setUTC = setUTC;\n\t\tthis.set = set;\n\t}\n\n\t/**\n\t * Form a date (or other object) into a Gregorian object\n\t * @param  {Date}   obj any date\n\t * @return {Object}     A Gregorian instance\n\t */\n\treform (obj) {\n\t\tobj = obj || new Date();\n\t\tconst date = new Date(obj);\n\t\tthis.d = date;\n\t\tthis.input = obj;\n\t\treturn this;\n\t}\n};","'use strict';\n\n/**\n * Adds specified increments to a gregorian object\n * @param   {Number} n         a number to multiply the increment by\n * @param   {String} increment an increment to add\n * @returns {Object} a new gregorian object\n */\nfunction addSubtract (obj, n, increment) {\n\t\n\tlet increments = {};\n\t\n\tincrements.l = date => {\n\t\treturn new Date(date.setUTCMilliseconds(date.getUTCMilliseconds() + n));\n\t};\n\tincrements.s = date => {\n\t\treturn new Date(date.setUTCSeconds(date.getUTCSeconds() + n));\n\t};\n\tincrements.t = date => {\n\t\treturn new Date(date.setUTCMinutes(date.getUTCMinutes() + n));\n\t};\n\tincrements.h = date => {\n\t\treturn new Date(date.setUTCHours(date.getUTCHours() + n));\n\t};\n\tincrements.d = date => {\n\t\treturn new Date(date.setUTCDate(date.getUTCDate() + n));\n\t};\n\tincrements.w = date => {\n\t\treturn new Date(date.setUTCDate(date.getUTCDate() + (n * 7)));\n\t};\n\tincrements.m = date => {\n\t\tlet newMonth = date.getUTCMonth() + n;\n\t\tlet newYear = date.getUTCFullYear();\n\t\tlet newDate = date.getUTCDate();\n\t\t\n\t\tif (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth + 1, 0));\n\t\t} else {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth, newDate));\t\t\t\t\t\t\t\n\t\t}\n\t};\n\tincrements.y = date => {\n\t\tlet newYear = date.getUTCFullYear() + n;\n\t\tlet newMonth = date.getUTCMonth();\n\t\tlet newDate = date.getUTCDate();\n\t\t\n\t\tif (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth + 1, 0));\n\t\t} else {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth, newDate));\t\t\t\t\t\t\t\n\t\t}\n\t};\n\t\n\tobj.d = increments[increment](obj.d);\n\treturn obj;\n}\n\nexports.add = function (n, increment) {\n\treturn addSubtract(this, n * 1, increment);\n};\n\nexports.subtract = function (n, increment) {\n\treturn addSubtract(this, n * -1, increment);\n};","'use strict';\n\n/*\n * Takes a gregorian object and checks that it has a valid date.\n * @param {Object}  A gregorian object\n * @return {Boolean}\n */\nfunction reagent () {\n\tif (isNaN(this.d.getTime())) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nmodule.exports = reagent;\n","'use strict';\n\n/*\n * Takes a gregorian object and outputs the date object\n * @param {Object}  A gregorian object\n * @return {Date} the date object it contains\n */\nfunction recite () {\n\treturn this.d;\n}\n\nmodule.exports = recite;\n","'use strict';\n\n/**\n * Take a date object and output the capitalized 12-hour clock period (AM/PM)\n * @param   {Date}   date a date object\n * @returns {String} the capitalized 12-hour clock period \n */\nexports.AP = function (date) {\n\tconst hour = date.getHours();\n\tconst ampm = (hour < 12) ? 'AM' : 'PM';\n\treturn ampm;\n};\n\n/**\n * Take a date object and output the uncapitalized 12-hour clock period (AM/PM)\n * @param   {Date   date a date object\n * @returns {String} the uncapitalized 12-hour clock period \n */\nexports.ap = function (date) {\n\tconst hour = date.getHours();\n\tconst ampm = (hour < 12) ? 'am' : 'pm';\n\treturn ampm;\n};\n\n/**\n * Take a date object and output the abreviated day of the week\n * @param {Date} \ta date object\n * @returns {String}\tthe abbreviated day of the week\n */\nexports.D = function (date) {\n\tconst days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\tconst dayOfWeek = date.getDay();\n\treturn days[dayOfWeek];\n};\n\n/**\n * Take a date object and output the day of the week\n * @param {Date} \ta date object\n * @returns {String} the full day of the week\n */\nexports.DD = function (date) {\n\tconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\tconst dayOfWeek = date.getDay();\n\treturn days[dayOfWeek];\n};\n\n/**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nexports.H = function (date) {\n\tconst hour = date.getHours();\n\treturn hour;\n};\n\n/**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nexports.HH = function (date) {\n\tconst hour = date.getHours().toString();\n\treturn (hour.length < 2) ? '0' + hour : hour;\n};\n\n/**\n * Take a date object and output the abbreviated month\n * @param {Date} \ta date object\n * @returns {String}\tthe abbreviated month\n */\nexports.M = function (date) {\n\tconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov',  'Dec'];\n\tconst month = date.getMonth();\n\treturn months[month];\n};\n\n/**\n * Take a date object and output the month\n * @param {Date} \ta date object\n * @returns {String}\tthe full month\n */\nexports.MM = function (date) {\n\tconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\tconst month = date.getMonth();\n\treturn months[month];\n};\n\n/**\n * Take a date object and output the date of the month with no leading zeros (1-31)\n * @param {Date} \ta date object\n * @returns {String}\tthe date of the month with no leading zeros\n */\nexports.d = function (date) {\n\tconst day = date.getDate().toString();\n\treturn day;\n};\n\n/**\n * Take a date object and output the two-digit date of the month (01-31)\n * @param {Date} \ta date object\n * @returns {String}\tthe two-digit date of the month\n */\nexports.dd = function (date) {\n\tconst day = date.getDate().toString();\n\treturn (day.length < 2) ? '0' + day : day;\n};\n\n/**\n * Take a date object and output the date of the month with no leading zeros but with the ordinal (1st-31st)\n * @param {Date} \ta date object\n * @returns {String}\tthe date with no leading zeros but with the ordinal\n */\nexports.dt = function (date) {\n\tlet day = date.getDate();\n\tswitch (day) {\n\t\tcase 1:\n\t\tcase 21:\n\t\tcase 31:\n\t\t\tday += 'st';\n\t\t\tbreak;\n\t\tcase 2:\n\t\tcase 22:\n\t\t\tday += 'nd';\n\t\t\tbreak;\n\t\tcase 3:\n\t\tcase 23:\n\t\t\tday += 'rd';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tday += 'th';\n\t}\n\treturn day;\n};\n\n/**\n * Take a date object and outpit the hour with no leading zeros (1-12)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nexports.h = function (date) {\n\tlet hour = date.getHours();\n\tif (hour === 0) hour = 12;\n\tif (hour < 13) hour = hour;\n\tif (hour >= 13) hour = hour - 12;\n\treturn hour;\n};\n\n/**\n * Take a date object and output the two-digit hour (01-12)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit hour\n */\nexports.hh = function (date) {\n\tlet hour = date.getHours();\n\tif (hour === 0) hour = 12;\n\tif (hour < 13) hour = hour;\n\tif (hour >= 13) hour = hour - 12;\n\thour = hour.toString();\n\treturn (hour.length < 2) ? '0' + hour : hour;\n};\n\n/**\n * Take a date object and output the milliseconds with no leading zeros (0-999)\n * @param   {Date} date a date object\n * @returns {String}    the number of milliseconds\n */\nexports.l = function (date) {\n\tconst milliseconds = date.getMilliseconds().toString();\n\treturn milliseconds;\n};\n\n/**\n * Take a date object and and output the three-digit milliseconds (000-999)\n * @param   {Date}   date a date object\n * @returns {String} the number of milliseconds\n */\nexports.ll = function (date) {\n\tlet milliseconds = date.getMilliseconds().toString();\n\tswitch (milliseconds.length) {\n\t\tcase 1:\n\t\t\tmilliseconds = '00' + milliseconds;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmilliseconds = '0' + milliseconds;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmilliseconds = milliseconds;\n\t\t\tbreak;\n\t}\n\treturn milliseconds;\n};\n\n/**\n * Take a date object and output the numeric month (1-12)\n * @param {Date} \ta date object\n * @returns {String}\tthe month with no leading zeros\n */\nexports.m = function (date) {\n\tconst month = (date.getMonth() + 1).toString();\n\treturn month;\n};\n\n/**\n * Take a date object and output the two-digit month (01-12)\n * @param {Date} \ta date object\n * @returns {String}\tthe two-digit month\n */\nexports.mm = function (date) {\n\tlet month = (date.getMonth() + 1).toString();\n\treturn (month.length < 2) ? '0' + month : month;\n};\n\n/**\n * Take a date object and outpit the seconds with no leading zeros (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the seconds with no leading zeros\n */\nexports.s = function (date) {\n\tconst second = date.getSeconds();\n\treturn second;\n};\n\n/**\n * Take a date object and outpit the two-digit seconds (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit seconds\n */\nexports.ss = function (date) {\n\tlet second = date.getSeconds().toString();\n\treturn (second.length < 2) ? '0' + second : second;\n};\n\n/**\n * Take a date object and output the minutes with no leading zeros\n * @param   {Date} date a date object\n * @returns {String}  the minutes with no leading zeros\n */\nexports.t = function (date) {\n\tconst minute = date.getMinutes().toString();\n\treturn minute;\n};\n\n/**\n * Take a date object and output the two-digit minutes\n * @param   {Date}   date a date object\n * @returns {String} the two-digit minutes\n */\nexports.tt = function (date) {\n\tlet minute = date.getMinutes().toString();\n\treturn (minute.length < 2) ? '0' + minute : minute;\n};\n\n/**\n * Take a date object and output the two-digit year\n * @param {Date} \ta date object\n * @returns {String}\tthe two-digit year\n */\nexports.yy = function (date) {\n\treturn date.getFullYear().toString().substr(2);\n};\n\n/**\n * Take a date object and output the four-digit year\n * @param {Date} \ta date object\n * @returns {String}\tthe four-digit year\n */\nexports.yyyy = function (date) {\n\treturn date.getFullYear();\n};\n\n/**\n * Take a date object and output the timezone offset (UTC +- 01:00, etc.)\n * @param   {Date}   date a date object\n * @returns {String} the timezone offset \n */\nexports.zz = function (date) {\n\tconst offset = date.getTimezoneOffset() / 60 * -1;\n\treturn 'UTC ' + offset + ':00';\n};\n\n/**\n * Converts a date object to an ISO string\n * @param   {Date}   date   a date object\n * @param {String}\t\tformat optional 'short' to remove the time\n * @returns {String} ISO String including time\n */\nexports.iso = function (date, format) {\n\tformat = format || null;\n\t//console.log('iso function date: ' + date);\n\tif (format === 'short') return date.toISOString().split('T')[0];\n\treturn date.toISOString();\n};\n\n/**\n * Converts a date object to a UTC string\n * @param   {Date}   date a date object\n * @param \t{String}\tformat optional 'shart' to remove the time from the output\n * @returns {String} UTC string with or without time\n */\n\nexports.utc = function (date, format) {\n\tformat = format || null;\n\tconst utc = date.toUTCString();\n\tif (format === 'short') {\n\t\tconst arr = utc.split(' ');\n\t\tlet newArr = [];\n\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tnewArr.push(arr[i]);\n\t\t}\n\n\t\treturn newArr.join(' ');\n\t}\n\treturn utc;\n};\n\n/**\n * Converts a date object to UNIX time (milliseconds from January 1, 1970)\n * @param   {Date}   date a date object\n * @returns {Number} milliseconds from January 1, 1970\n */\n\nexports.unix = function (date) {\n\treturn Date.parse(date);\n};","'use strict';\n\n/**\n * Sets the date or time to the start of the specified increment\n * @param   {String} increment an increment to set\n * @returns {Object} a new gregorian object\n */\nfunction restartUTC (increment) {\n\tlet increments = {};\n\t\n\tincrements.s = date => {\n\t\treturn new Date(date.setUTCSeconds(date.getUTCSeconds(), 0));\n\t};\n\tincrements.t = date => {\n\t\treturn new Date(date.setUTCMinutes(date.getUTCMinutes(), 0, 0));\n\t};\n\tincrements.h = date => {\n\t\treturn new Date(date.setUTCHours(date.getUTCHours(), 0, 0, 0));\n\t};\n\tincrements.d = date => {\n\t\tdate.setUTCDate(date.getUTCDate());\n\t\tdate.setUTCHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\tincrements.w = date => {\n\t\tdate.setUTCDate(date.getUTCDate() - date.getUTCDay());\n\t\tdate.setUTCHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\tincrements.m = date => {\n\t\tdate.setUTCMonth(date.getUTCMonth(), 1);\n\t\tdate.setUTCHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\tincrements.y = date => {\n\t\tdate.setUTCFullYear(date.getUTCFullYear(), 0, 1);\n\t\tdate.setUTCHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\t\n\tthis.d = increments[increment](this.d);\n\treturn this;\n}\n\nmodule.exports = restartUTC;","'use strict';\n\n/**\n * Sets the date or time to the start of the specified increment\n * @param   {String} increment an increment to set\n * @returns {Object} a new gregorian object\n */\nfunction restart (increment) {\n\tlet increments = {};\n\t\n\tincrements.s = date => {\n\t\treturn new Date(date.setSeconds(date.getSeconds(), 0));\n\t};\n\tincrements.t = date => {\n\t\treturn new Date(date.setMinutes(date.getMinutes(), 0, 0));\n\t};\n\tincrements.h = date => {\n\t\treturn new Date(date.setHours(date.getHours(), 0, 0, 0));\n\t};\n\tincrements.d = date => {\n\t\tdate.setDate(date.getDate());\n\t\tdate.setHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\tincrements.w = date => {\n\t\tdate.setDate(date.getDate() - date.getDay());\n\t\tdate.setHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\tincrements.m = date => {\n\t\tdate.setMonth(date.getMonth(), 1);\n\t\tdate.setHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\tincrements.y = date => {\n\t\tdate.setFullYear(date.getFullYear(), 0, 1);\n\t\tdate.setHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\t\n\tthis.d = increments[increment](this.d);\n\treturn this;\n}\n\nmodule.exports = restart;","'use strict';\n\n/**\n * Sets the date or time to specified interval\n * @param   {String} increment an increment to set\n * @param {String} value what to set the increment to\n * @returns {Object} a new gregorian object\n */\nfunction setUTC (value, increment) {\n\tlet increments = {};\n\t\n\tincrements.l = date => {\n\t\treturn new Date(date.setUTCMilliseconds(value));\n\t};\n\tincrements.s = date => {\n\t\treturn new Date(date.setUTCSeconds(value));\n\t};\n\tincrements.t = date => {\n\t\treturn new Date(date.setUTCMinutes(value));\n\t};\n\tincrements.h = date => {\n\t\treturn new Date(date.setUTCHours(value));\n\t};\n\tincrements.d = date => {\n\t\treturn new Date(date.setUTCDate(value));\n\t};\n\tincrements.w = date => {\n\t\tlet currentDay = date.getUTCDay();\n\t\tlet currentMilliseconds = date.getUTCMilliseconds();\n\t\tdate.setUTCFullYear(date.getUTCFullYear(), 0, value * 7);\n\t\tlet n = currentDay - date.getUTCDay();\n\t\tdate.setUTCDate(date.getUTCDate() + n);\n\t\treturn new Date(date.setUTCMilliseconds(currentMilliseconds));\n\t};\n\tincrements.m = date => {\n\t\tlet newMonth = value - 1;\n\t\tlet newYear = date.getUTCFullYear();\n\t\tlet newDate = date.getUTCDate();\n\t\t\n\t\tif (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth + 1, 0));\n\t\t} else {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth, newDate));\t\t\t\t\t\t\t\n\t\t}\n\t};\n\tincrements.y = date => {\n\t\tlet newYear = value;\n\t\tlet newMonth = date.getUTCMonth();\n\t\tlet newDate = date.getUTCDate();\n\t\t\n\t\tif (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth + 1, 0));\n\t\t} else {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth, newDate));\t\t\t\t\t\t\t\n\t\t}\n\t};\n\t\n\tthis.d = increments[increment](this.d);\n\treturn this;\n}\n\nmodule.exports = setUTC;","'use strict';\n\n/**\n * Sets the date or time to specified interval\n * @param   {String} increment an increment to set\n * @param {String} value what to set the increment to\n * @returns {Object} a new gregorian object\n */\nfunction set (value, increment) {\n\tlet increments = {};\n\t\n\tincrements.l = date => {\n\t\treturn new Date(date.setMilliseconds(value));\n\t};\n\tincrements.s = date => {\n\t\treturn new Date(date.setSeconds(value));\n\t};\n\tincrements.t = date => {\n\t\treturn new Date(date.setMinutes(value));\n\t};\n\tincrements.h = date => {\n\t\treturn new Date(date.setHours(value));\n\t};\n\tincrements.d = date => {\n\t\treturn new Date(date.setDate(value));\n\t};\n\tincrements.w = date => {\n\t\tlet currentDay = date.getDay();\n\t\tlet currentMilliseconds = date.getMilliseconds();\n\t\tdate.setFullYear(date.getFullYear(), 0, value * 7);\n\t\tlet n = currentDay - date.getDay();\n\t\tdate.setDate(date.getDate() + n);\n\t\treturn new Date(date.setMilliseconds(currentMilliseconds));\n\t};\n\tincrements.m = date => {\n\t\tlet newMonth = value - 1;\n\t\tlet newYear = date.getFullYear();\n\t\tlet newDate = date.getDate();\n\t\t\n\t\tif (newDate > new Date(date.setFullYear(newYear, newMonth + 1, 0)).getDate()) {\n\t\t\treturn new Date(date.setFullYear(newYear, newMonth + 1, 0));\n\t\t} else {\n\t\t\treturn new Date(date.setFullYear(newYear, newMonth, newDate));\t\t\t\t\t\t\t\n\t\t}\n\t};\n\tincrements.y = date => {\n\t\tlet newYear = value;\n\t\tlet newMonth = date.getMonth();\n\t\tlet newDate = date.getDate();\n\t\t\n\t\tif (newDate > new Date(date.setFullYear(newYear, newMonth + 1, 0)).getDate()) {\n\t\t\treturn new Date(date.setFullYear(newYear, newMonth + 1, 0));\n\t\t} else {\n\t\t\treturn new Date(date.setFullYear(newYear, newMonth, newDate));\t\t\t\t\t\t\t\n\t\t}\n\t};\n\t\n\tthis.d = increments[increment](this.d);\n\treturn this;\n}\n\nmodule.exports = set;","'use strict';\n\nvar reformat = require('./reformat');\n\n/**\n * Take a Gregorian object and output the reformatted string\n * See https://github.com/patrickfatrick/gregorian#accepted-formats for details\n * @param {String} \tformat a string or date object (something that can be converted to a valid date)\n * @returns {String}\tthe date reformatted into the specified format\n */\nfunction to (format, delimiter) {\n\tdelimiter = delimiter || '+'; \n\tconst date = this.d;\n\tconst pieces = [\n\t\t'unix', 'utc-short', 'utc', 'iso-short', 'iso', 'yyyy','yy', 'DD', 'dd', 'dt', 'D', 'd', 'MM', 'mm','M', 'm', 'hh', 'h', 'HH', 'H', 'tt', 't', 'AP', 'ap', 'ss', 's', 'll', 'l', 'zz'\n\t];\n\tlet converted = format;\n\t\n\tpieces.forEach(piece => {\n\t\tconst re = new RegExp('\\\\b' + piece + '\\\\b', 'g');\n\t\tif (re.test(converted)) {\n\t\t\tswitch (piece) {\n\t\t\t\tcase 'unix':\n\t\t\t\t\tconverted = reformat.unix(date);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'utc-short':\n\t\t\t\t\tconverted = reformat.utc(date, 'short');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'utc':\n\t\t\t\t\tconverted = reformat.utc(date);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'iso-short':\n\t\t\t\t\tconverted = reformat.iso(date, 'short');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'iso':\n\t\t\t\t\tconverted = reformat.iso(date);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet replacer = reformat[piece](date);\n\t\t\t\t\tconverted = converted.replace(re, replacer);\n\t\t\t}\n\t\t}\n\t});\n\tif (typeof converted === 'string') {\n\t\tconverted = converted.replace(new RegExp('\\\\' + delimiter, 'g'), '');\n\t}\n\treturn converted;\n}\n\nmodule.exports = to;\n"],"sourceRoot":"/source/"}