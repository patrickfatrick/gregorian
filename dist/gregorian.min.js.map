{"version":3,"sources":["node_modules/browser-pack/_prelude.js","gregorian.min.js","index.js","src/gregorian.js","src/modules/gregorian.js","src/modules/reagent.js","src/modules/recite.js","src/modules/reform-add-subtract.js","src/modules/reform-restart.js","src/modules/reform-set.js","src/modules/reform-to-functions.js","src/modules/reform-to.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","gregorian","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_interopRequireDefault","obj","__esModule","default","_gregorian","_gregorian2","./src/gregorian",2,"Object","defineProperty","value","Gregorian","./modules/gregorian",3,"_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","undefined","_reformTo","_reformTo2","_reformAddSubtract","_reformRestart","_reformRestart2","_reagent","_reagent2","_recite","_recite2","_reformSet","_reformSet2","d","input","to","add","subtract","restart","reagent","recite","set","arguments","Date","date","./reagent","./recite","./reform-add-subtract","./reform-restart","./reform-set","./reform-to",4,"isNaN","getTime",5,6,"addSubtract","increment","increments","setUTCMilliseconds","getUTCMilliseconds","setUTCSeconds","getUTCSeconds","setUTCMinutes","getUTCMinutes","h","setUTCHours","getUTCHours","setUTCDate","getUTCDate","w","m","newMonth","getUTCMonth","newYear","getUTCFullYear","newDate","setUTCFullYear","y",7,"setSeconds","getSeconds","setMinutes","getMinutes","setHours","getHours","setDate","getDate","getDay","setMonth","getMonth","setFullYear","getFullYear",8,"currentDay","getUTCDay","currentMilliseconds",9,"AP","hour","ampm","ap","D","days","dayOfWeek","DD","H","HH","toString","M","months","month","MM","day","dd","dt","hh","milliseconds","getMilliseconds","ll","mm","second","ss","minute","tt","yy","substr","yyyy","zz","offset","getTimezoneOffset","iso","format","toISOString","split","utc","toUTCString","arr","newArr","push","join","unix","parse",10,"_interopRequireWildcard","newObj","hasOwnProperty","delimiter","pieces","converted","forEach","piece","re","RegExp","test","replacer","replace","_reformToFunctions","./reform-to-functions"],"mappings":"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","file":"gregorian.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.gregorian = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';var _gregorian=require('./src/gregorian');var _gregorian2=_interopRequireDefault(_gregorian);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}module.exports=_gregorian2.default;\n\n},{\"./src/gregorian\":2}],2:[function(require,module,exports){\n'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});var _gregorian=require('./modules/gregorian');var gregorian=new _gregorian.Gregorian();exports.default=gregorian;\n\n},{\"./modules/gregorian\":3}],3:[function(require,module,exports){\n'use strict'; /**\n * Gregorian\n * Author: Patrick Fricano\n * https://www.github.com/patrickfatrick/gregorian\n */var _createClass=(function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\" in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();Object.defineProperty(exports,\"__esModule\",{value:true});exports.Gregorian=undefined;var _reformTo=require('./reform-to');var _reformTo2=_interopRequireDefault(_reformTo);var _reformAddSubtract=require('./reform-add-subtract');var _reformRestart=require('./reform-restart');var _reformRestart2=_interopRequireDefault(_reformRestart);var _reagent=require('./reagent');var _reagent2=_interopRequireDefault(_reagent);var _recite=require('./recite');var _recite2=_interopRequireDefault(_recite);var _reformSet=require('./reform-set');var _reformSet2=_interopRequireDefault(_reformSet);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}var Gregorian=exports.Gregorian=(function(){function Gregorian(){_classCallCheck(this,Gregorian);this.d;this.input;this.to=_reformTo2.default,this.add=_reformAddSubtract.add,this.subtract=_reformAddSubtract.subtract,this.restart=_reformRestart2.default,this.reagent=_reagent2.default,this.recite=_recite2.default,this.set=_reformSet2.default;} /**\n\t * Form a date (or other object) into a Gregorian object\n\t * @param  {Date}   obj any date\n\t * @return {Object}     A Gregorian instance\n\t */_createClass(Gregorian,[{key:'reform',value:function reform(){var obj=arguments.length<=0||arguments[0]===undefined?new Date():arguments[0];var date=new Date(obj);this.d=date;this.input=obj;return this;}}]);return Gregorian;})();\n\n},{\"./reagent\":4,\"./recite\":5,\"./reform-add-subtract\":6,\"./reform-restart\":7,\"./reform-set\":8,\"./reform-to\":10}],4:[function(require,module,exports){\n\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=function(){if(isNaN(this.d.getTime())){return false;}return true;};\n\n},{}],5:[function(require,module,exports){\n\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=function(){return this.d;};\n\n},{}],6:[function(require,module,exports){\n'use strict'; /**\n * Adds specified increments to a gregorian object\n * @param   {Number} n         a number to multiply the increment by\n * @param   {String} increment an increment to add\n * @returns {Object} a new gregorian object\n */Object.defineProperty(exports,\"__esModule\",{value:true});function addSubtract(obj,n,increment){var increments={};increments.l=function(date){return new Date(date.setUTCMilliseconds(date.getUTCMilliseconds()+n));};increments.s=function(date){return new Date(date.setUTCSeconds(date.getUTCSeconds()+n));};increments.t=function(date){return new Date(date.setUTCMinutes(date.getUTCMinutes()+n));};increments.h=function(date){return new Date(date.setUTCHours(date.getUTCHours()+n));};increments.d=function(date){return new Date(date.setUTCDate(date.getUTCDate()+n));};increments.w=function(date){return new Date(date.setUTCDate(date.getUTCDate()+n*7));};increments.m=function(date){var newMonth=date.getUTCMonth()+n;var newYear=date.getUTCFullYear();var newDate=date.getUTCDate();if(newDate>new Date(date.setUTCFullYear(newYear,newMonth+1,0)).getUTCDate()){return new Date(date.setUTCFullYear(newYear,newMonth+1,0));}else {return new Date(date.setUTCFullYear(newYear,newMonth,newDate));}};increments.y=function(date){var newYear=date.getUTCFullYear()+n;var newMonth=date.getUTCMonth();var newDate=date.getUTCDate();if(newDate>new Date(date.setUTCFullYear(newYear,newMonth+1,0)).getUTCDate()){return new Date(date.setUTCFullYear(newYear,newMonth+1,0));}else {return new Date(date.setUTCFullYear(newYear,newMonth,newDate));}};obj.d=increments[increment](obj.d);return obj;}var add=exports.add=function add(n,increment){return addSubtract(this,n*1,increment);};var subtract=exports.subtract=function subtract(n,increment){return addSubtract(this,n*-1,increment);};\n\n},{}],7:[function(require,module,exports){\n'use strict'; /**\n * Sets the date or time to the start of the specified increment\n * @param   {String} increment an increment to set\n * @returns {Object} a new gregorian object\n */Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=function(increment){var increments={};increments.s=function(date){return new Date(date.setSeconds(date.getSeconds(),0));};increments.t=function(date){return new Date(date.setMinutes(date.getMinutes(),0,0));};increments.h=function(date){return new Date(date.setHours(date.getHours(),0,0,0));};increments.d=function(date){date.setDate(date.getDate());date.setHours(0,0,0,0);return new Date(date);};increments.w=function(date){date.setDate(date.getDate()-date.getDay());date.setHours(0,0,0,0);return new Date(date);};increments.m=function(date){date.setMonth(date.getMonth(),1);date.setHours(0,0,0,0);return new Date(date);};increments.y=function(date){date.setFullYear(date.getFullYear(),0,1);date.setHours(0,0,0,0);return new Date(date);};this.d=increments[increment](this.d);return this;};\n\n},{}],8:[function(require,module,exports){\n'use strict'; /**\n * Sets the date or time to specified interval\n * @param   {String} increment an increment to set\n * @param {String} value what to set the increment to\n * @returns {Object} a new gregorian object\n */Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=function(value,increment){var increments={};increments.l=function(date){return new Date(date.setUTCMilliseconds(value));};increments.s=function(date){return new Date(date.setUTCSeconds(value));};increments.t=function(date){return new Date(date.setUTCMinutes(value));};increments.h=function(date){return new Date(date.setUTCHours(value));};increments.d=function(date){return new Date(date.setUTCDate(value));};increments.w=function(date){var currentDay=date.getUTCDay();var currentMilliseconds=date.getUTCMilliseconds();date.setUTCFullYear(date.getUTCFullYear(),0,value*7);var n=currentDay-date.getUTCDay();date.setUTCDate(date.getUTCDate()+n);return new Date(date.setUTCMilliseconds(currentMilliseconds));};increments.m=function(date){var newMonth=value-1;var newYear=date.getUTCFullYear();var newDate=date.getUTCDate();if(newDate>new Date(date.setUTCFullYear(newYear,newMonth+1,0)).getUTCDate()){return new Date(date.setUTCFullYear(newYear,newMonth+1,0));}else {return new Date(date.setUTCFullYear(newYear,newMonth,newDate));}};increments.y=function(date){var newYear=value;var newMonth=date.getUTCMonth();var newDate=date.getUTCDate();if(newDate>new Date(date.setUTCFullYear(newYear,newMonth+1,0)).getUTCDate()){return new Date(date.setUTCFullYear(newYear,newMonth+1,0));}else {return new Date(date.setUTCFullYear(newYear,newMonth,newDate));}};this.d=increments[increment](this.d);return this;};\n\n},{}],9:[function(require,module,exports){\n'use strict'; /**\n * Take a date object and output the capitalized 12-hour clock period (AM/PM)\n * @param   {Date}   date a date object\n * @returns {String} the capitalized 12-hour clock period \n */Object.defineProperty(exports,\"__esModule\",{value:true});var AP=exports.AP=function AP(date){var hour=date.getHours();var ampm=hour<12?'AM':'PM';return ampm;}; /**\n * Take a date object and output the uncapitalized 12-hour clock period (AM/PM)\n * @param   {Date   date a date object\n * @returns {String} the uncapitalized 12-hour clock period \n */var ap=exports.ap=function ap(date){var hour=date.getHours();var ampm=hour<12?'am':'pm';return ampm;}; /**\n * Take a date object and output the abreviated day of the week\n * @param {Date} \ta date object\n * @returns {String}\tthe abbreviated day of the week\n */var D=exports.D=function D(date){var days=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];var dayOfWeek=date.getDay();return days[dayOfWeek];}; /**\n * Take a date object and output the day of the week\n * @param {Date} \ta date object\n * @returns {String} the full day of the week\n */var DD=exports.DD=function DD(date){var days=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];var dayOfWeek=date.getDay();return days[dayOfWeek];}; /**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */var H=exports.H=function H(date){var hour=date.getHours();return hour;}; /**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */var HH=exports.HH=function HH(date){var hour=date.getHours().toString();return hour.length<2?'0'+hour:hour;}; /**\n * Take a date object and output the abbreviated month\n * @param {Date} \ta date object\n * @returns {String}\tthe abbreviated month\n */var M=exports.M=function M(date){var months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sept','Oct','Nov','Dec'];var month=date.getMonth();return months[month];}; /**\n * Take a date object and output the month\n * @param {Date} \ta date object\n * @returns {String}\tthe full month\n */var MM=exports.MM=function MM(date){var months=['January','February','March','April','May','June','July','August','September','October','November','December'];var month=date.getMonth();return months[month];}; /**\n * Take a date object and output the date of the month with no leading zeros (1-31)\n * @param {Date} \ta date object\n * @returns {String}\tthe date of the month with no leading zeros\n */var d=exports.d=function d(date){var day=date.getDate().toString();return day;}; /**\n * Take a date object and output the two-digit date of the month (01-31)\n * @param {Date} \ta date object\n * @returns {String}\tthe two-digit date of the month\n */var dd=exports.dd=function dd(date){var day=date.getDate().toString();return day.length<2?'0'+day:day;}; /**\n * Take a date object and output the date of the month with no leading zeros but with the ordinal (1st-31st)\n * @param {Date} \ta date object\n * @returns {String}\tthe date with no leading zeros but with the ordinal\n */var dt=exports.dt=function dt(date){var day=date.getDate();switch(day){case 1:case 21:case 31:day+='st';break;case 2:case 22:day+='nd';break;case 3:case 23:day+='rd';break;default:day+='th';}return day;}; /**\n * Take a date object and outpit the hour with no leading zeros (1-12)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */var h=exports.h=function h(date){var hour=date.getHours();if(hour===0)hour=12;if(hour<13)hour=hour;if(hour>=13)hour=hour-12;return hour;}; /**\n * Take a date object and output the two-digit hour (01-12)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit hour\n */var hh=exports.hh=function hh(date){var hour=date.getHours();if(hour===0)hour=12;if(hour<13)hour=hour;if(hour>=13)hour=hour-12;hour=hour.toString();return hour.length<2?'0'+hour:hour;}; /**\n * Take a date object and output the milliseconds with no leading zeros (0-999)\n * @param   {Date} date a date object\n * @returns {String}    the number of milliseconds\n */var l=exports.l=function l(date){var milliseconds=date.getMilliseconds().toString();return milliseconds;}; /**\n * Take a date object and and output the three-digit milliseconds (000-999)\n * @param   {Date}   date a date object\n * @returns {String} the number of milliseconds\n */var ll=exports.ll=function ll(date){var milliseconds=date.getMilliseconds().toString();switch(milliseconds.length){case 1:milliseconds='00'+milliseconds;break;case 2:milliseconds='0'+milliseconds;break;default:milliseconds=milliseconds;break;}return milliseconds;}; /**\n * Take a date object and output the numeric month (1-12)\n * @param {Date} \ta date object\n * @returns {String}\tthe month with no leading zeros\n */var m=exports.m=function m(date){var month=(date.getMonth()+1).toString();return month;}; /**\n * Take a date object and output the two-digit month (01-12)\n * @param {Date} \ta date object\n * @returns {String}\tthe two-digit month\n */var mm=exports.mm=function mm(date){var month=(date.getMonth()+1).toString();return month.length<2?'0'+month:month;}; /**\n * Take a date object and outpit the seconds with no leading zeros (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the seconds with no leading zeros\n */var s=exports.s=function s(date){var second=date.getSeconds();return second;}; /**\n * Take a date object and outpit the two-digit seconds (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit seconds\n */var ss=exports.ss=function ss(date){var second=date.getSeconds().toString();return second.length<2?'0'+second:second;}; /**\n * Take a date object and output the minutes with no leading zeros\n * @param   {Date} date a date object\n * @returns {String}  the minutes with no leading zeros\n */var t=exports.t=function t(date){var minute=date.getMinutes().toString();return minute;}; /**\n * Take a date object and output the two-digit minutes\n * @param   {Date}   date a date object\n * @returns {String} the two-digit minutes\n */var tt=exports.tt=function tt(date){var minute=date.getMinutes().toString();return minute.length<2?'0'+minute:minute;}; /**\n * Take a date object and output the two-digit year\n * @param {Date} \ta date object\n * @returns {String}\tthe two-digit year\n */var yy=exports.yy=function yy(date){return date.getFullYear().toString().substr(2);}; /**\n * Take a date object and output the four-digit year\n * @param {Date} \ta date object\n * @returns {String}\tthe four-digit year\n */var yyyy=exports.yyyy=function yyyy(date){return date.getFullYear();}; /**\n * Take a date object and output the timezone offset (UTC +- 01:00, etc.)\n * @param   {Date}   date a date object\n * @returns {String} the timezone offset \n */var zz=exports.zz=function zz(date){var offset=date.getTimezoneOffset()/60*-1;return 'UTC '+offset+':00';}; /**\n * Converts a date object to an ISO string\n * @param   {Date}   date   a date object\n * @param {String}\t\tformat optional 'short' to remove the time\n * @returns {String} ISO String including time\n */var iso=exports.iso=function iso(date,format){format=format||null; //console.log('iso function date: ' + date);\nif(format==='short')return date.toISOString().split('T')[0];return date.toISOString();}; /**\n * Converts a date object to a UTC string\n * @param   {Date}   date a date object\n * @param \t{String}\tformat optional 'shart' to remove the time from the output\n * @returns {String} UTC string with or without time\n */var utc=exports.utc=function utc(date,format){format=format||null;var utc=date.toUTCString();if(format==='short'){var arr=utc.split(' ');var newArr=[];for(var i=0;i<4;i++){newArr.push(arr[i]);}return newArr.join(' ');}return utc;}; /**\n * Converts a date object to UNIX time (milliseconds from January 1, 1970)\n * @param   {Date}   date a date object\n * @returns {Number} milliseconds from January 1, 1970\n */var unix=exports.unix=function unix(date){return Date.parse(date);};\n\n},{}],10:[function(require,module,exports){\n'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=function(format){var delimiter=arguments.length<=1||arguments[1]===undefined?'+':arguments[1];var date=this.d;var pieces=['unix','utc-short','utc','iso-short','iso','yyyy','yy','DD','dd','dt','D','d','MM','mm','M','m','hh','h','HH','H','tt','t','AP','ap','ss','s','ll','l','zz'];var converted=format;pieces.forEach(function(piece){var re=new RegExp('\\\\b'+piece+'\\\\b','g');if(re.test(converted)){switch(piece){case 'unix':converted=to.unix(date);break;case 'utc-short':converted=to.utc(date,'short');break;case 'utc':converted=to.utc(date);break;case 'iso-short':converted=to.iso(date,'short');break;case 'iso':converted=to.iso(date);break;default:var replacer=to[piece](date);converted=converted.replace(re,replacer);}}});if(typeof converted==='string'){converted=converted.replace(new RegExp('\\\\'+delimiter,'g'),'');}return converted;};var _reformToFunctions=require('./reform-to-functions');var to=_interopRequireWildcard(_reformToFunctions);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else {var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}\n\n},{\"./reform-to-functions\":9}]},{},[1])(1)\n});\n\n","import gregorian from './src/gregorian';\nmodule.exports = gregorian;","import {Gregorian} from './modules/gregorian';\n\nlet gregorian = new Gregorian();\nexport default gregorian;","'use strict';\n\n/**\n * Gregorian\n * Author: Patrick Fricano\n * https://www.github.com/patrickfatrick/gregorian\n */\n\nimport to from './reform-to';\nimport {add, subtract} from './reform-add-subtract';\nimport restart from './reform-restart';\nimport reagent from './reagent';\nimport recite from './recite';\nimport set from './reform-set';\n\nexport class Gregorian {\n\tconstructor () {\n\t\tthis.d;\n\t\tthis.input;\n\t\tthis.to = to,\n\t\tthis.add = add,\n\t\tthis.subtract = subtract,\n\t\tthis.restart = restart,\n\t\tthis.reagent = reagent,\n\t\tthis.recite = recite,\n\t\tthis.set = set;\n\t}\n\n\t/**\n\t * Form a date (or other object) into a Gregorian object\n\t * @param  {Date}   obj any date\n\t * @return {Object}     A Gregorian instance\n\t */\n\treform (obj = new Date()) {\n\t\tconst date = new Date(obj);\n\t\tthis.d = date;\n\t\tthis.input = obj;\n\t\treturn this;\n\t}\n}","/*\n * Takes a gregorian object and checks that it has a valid date.\n * @param {Object}  A gregorian object\n * @return {Boolean}\n */\nexport default function () {\n\tif (isNaN(this.d.getTime())) {\n\t\treturn false;\n\t}\n\treturn true;\n}","/*\n * Takes a gregorian object and outputs the date object\n * @param {Object}  A gregorian object\n * @return {Date} the date object it contains\n */\nexport default function () {\n\treturn this.d;\n}","'use strict';\n\n/**\n * Adds specified increments to a gregorian object\n * @param   {Number} n         a number to multiply the increment by\n * @param   {String} increment an increment to add\n * @returns {Object} a new gregorian object\n */\nfunction addSubtract (obj, n, increment) {\n\t\n\tlet increments = {};\n\t\n\tincrements.l = date => {\n\t\treturn new Date(date.setUTCMilliseconds(date.getUTCMilliseconds() + n));\n\t};\n\tincrements.s = date => {\n\t\treturn new Date(date.setUTCSeconds(date.getUTCSeconds() + n));\n\t};\n\tincrements.t = date => {\n\t\treturn new Date(date.setUTCMinutes(date.getUTCMinutes() + n));\n\t};\n\tincrements.h = date => {\n\t\treturn new Date(date.setUTCHours(date.getUTCHours() + n));\n\t};\n\tincrements.d = date => {\n\t\treturn new Date(date.setUTCDate(date.getUTCDate() + n));\n\t};\n\tincrements.w = date => {\n\t\treturn new Date(date.setUTCDate(date.getUTCDate() + (n * 7)));\n\t};\n\tincrements.m = date => {\n\t\tlet newMonth = date.getUTCMonth() + n;\n\t\tlet newYear = date.getUTCFullYear();\n\t\tlet newDate = date.getUTCDate();\n\t\t\n\t\tif (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth + 1, 0));\n\t\t} else {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth, newDate));\t\t\t\t\t\t\t\n\t\t}\n\t};\n\tincrements.y = date => {\n\t\tlet newYear = date.getUTCFullYear() + n;\n\t\tlet newMonth = date.getUTCMonth();\n\t\tlet newDate = date.getUTCDate();\n\t\t\n\t\tif (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth + 1, 0));\n\t\t} else {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth, newDate));\t\t\t\t\t\t\t\n\t\t}\n\t};\n\t\n\tobj.d = increments[increment](obj.d);\n\treturn obj;\n}\n\nexport var add = function (n, increment) {\n\treturn addSubtract(this, n * 1, increment);\n};\n\nexport var subtract = function (n, increment) {\n\treturn addSubtract(this, n * -1, increment);\n};","'use strict';\n\n/**\n * Sets the date or time to the start of the specified increment\n * @param   {String} increment an increment to set\n * @returns {Object} a new gregorian object\n */\nexport default function (increment) {\n\tlet increments = {};\n\t\n\tincrements.s = date => {\n\t\treturn new Date(date.setSeconds(date.getSeconds(), 0));\n\t};\n\tincrements.t = date => {\n\t\treturn new Date(date.setMinutes(date.getMinutes(), 0, 0));\n\t};\n\tincrements.h = date => {\n\t\treturn new Date(date.setHours(date.getHours(), 0, 0, 0));\n\t};\n\tincrements.d = date => {\n\t\tdate.setDate(date.getDate());\n\t\tdate.setHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\tincrements.w = date => {\n\t\tdate.setDate(date.getDate() - date.getDay());\n\t\tdate.setHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\tincrements.m = date => {\n\t\tdate.setMonth(date.getMonth(), 1);\n\t\tdate.setHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\tincrements.y = date => {\n\t\tdate.setFullYear(date.getFullYear(), 0, 1);\n\t\tdate.setHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\t\n\tthis.d = increments[increment](this.d);\n\treturn this;\n}","'use strict';\n\n/**\n * Sets the date or time to specified interval\n * @param   {String} increment an increment to set\n * @param {String} value what to set the increment to\n * @returns {Object} a new gregorian object\n */\nexport default function (value, increment) {\n\tlet increments = {};\n\t\n\tincrements.l = date => {\n\t\treturn new Date(date.setUTCMilliseconds(value));\n\t};\n\tincrements.s = date => {\n\t\treturn new Date(date.setUTCSeconds(value));\n\t};\n\tincrements.t = date => {\n\t\treturn new Date(date.setUTCMinutes(value));\n\t};\n\tincrements.h = date => {\n\t\treturn new Date(date.setUTCHours(value));\n\t};\n\tincrements.d = date => {\n\t\treturn new Date(date.setUTCDate(value));\n\t};\n\tincrements.w = date => {\n\t\tlet currentDay = date.getUTCDay();\n\t\tlet currentMilliseconds = date.getUTCMilliseconds();\n\t\tdate.setUTCFullYear(date.getUTCFullYear(), 0, value * 7);\n\t\tlet n = currentDay - date.getUTCDay();\n\t\tdate.setUTCDate(date.getUTCDate() + n);\n\t\treturn new Date(date.setUTCMilliseconds(currentMilliseconds));\n\t};\n\tincrements.m = date => {\n\t\tlet newMonth = value - 1;\n\t\tlet newYear = date.getUTCFullYear();\n\t\tlet newDate = date.getUTCDate();\n\t\t\n\t\tif (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth + 1, 0));\n\t\t} else {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth, newDate));\t\t\t\t\t\t\t\n\t\t}\n\t};\n\tincrements.y = date => {\n\t\tlet newYear = value;\n\t\tlet newMonth = date.getUTCMonth();\n\t\tlet newDate = date.getUTCDate();\n\t\t\n\t\tif (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth + 1, 0));\n\t\t} else {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth, newDate));\t\t\t\t\t\t\t\n\t\t}\n\t};\n\t\n\tthis.d = increments[increment](this.d);\n\treturn this;\n}","'use strict';\n\n/**\n * Take a date object and output the capitalized 12-hour clock period (AM/PM)\n * @param   {Date}   date a date object\n * @returns {String} the capitalized 12-hour clock period \n */\nexport var AP = function (date) {\n\tconst hour = date.getHours();\n\tconst ampm = (hour < 12) ? 'AM' : 'PM';\n\treturn ampm;\n};\n\n/**\n * Take a date object and output the uncapitalized 12-hour clock period (AM/PM)\n * @param   {Date   date a date object\n * @returns {String} the uncapitalized 12-hour clock period \n */\nexport var ap = function (date) {\n\tconst hour = date.getHours();\n\tconst ampm = (hour < 12) ? 'am' : 'pm';\n\treturn ampm;\n};\n\n/**\n * Take a date object and output the abreviated day of the week\n * @param {Date} \ta date object\n * @returns {String}\tthe abbreviated day of the week\n */\nexport var D = function (date) {\n\tconst days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\tconst dayOfWeek = date.getDay();\n\treturn days[dayOfWeek];\n};\n\n/**\n * Take a date object and output the day of the week\n * @param {Date} \ta date object\n * @returns {String} the full day of the week\n */\nexport var DD = function (date) {\n\tconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\tconst dayOfWeek = date.getDay();\n\treturn days[dayOfWeek];\n};\n\n/**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nexport var H = function (date) {\n\tconst hour = date.getHours();\n\treturn hour;\n};\n\n/**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nexport var HH = function (date) {\n\tconst hour = date.getHours().toString();\n\treturn (hour.length < 2) ? '0' + hour : hour;\n};\n\n/**\n * Take a date object and output the abbreviated month\n * @param {Date} \ta date object\n * @returns {String}\tthe abbreviated month\n */\nexport var M = function (date) {\n\tconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov',  'Dec'];\n\tconst month = date.getMonth();\n\treturn months[month];\n};\n\n/**\n * Take a date object and output the month\n * @param {Date} \ta date object\n * @returns {String}\tthe full month\n */\nexport var MM = function (date) {\n\tconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\tconst month = date.getMonth();\n\treturn months[month];\n};\n\n/**\n * Take a date object and output the date of the month with no leading zeros (1-31)\n * @param {Date} \ta date object\n * @returns {String}\tthe date of the month with no leading zeros\n */\nexport var d = function (date) {\n\tconst day = date.getDate().toString();\n\treturn day;\n};\n\n/**\n * Take a date object and output the two-digit date of the month (01-31)\n * @param {Date} \ta date object\n * @returns {String}\tthe two-digit date of the month\n */\nexport var dd = function (date) {\n\tconst day = date.getDate().toString();\n\treturn (day.length < 2) ? '0' + day : day;\n};\n\n/**\n * Take a date object and output the date of the month with no leading zeros but with the ordinal (1st-31st)\n * @param {Date} \ta date object\n * @returns {String}\tthe date with no leading zeros but with the ordinal\n */\nexport var dt = function (date) {\n\tlet day = date.getDate();\n\tswitch (day) {\n\t\tcase 1:\n\t\tcase 21:\n\t\tcase 31:\n\t\t\tday += 'st';\n\t\t\tbreak;\n\t\tcase 2:\n\t\tcase 22:\n\t\t\tday += 'nd';\n\t\t\tbreak;\n\t\tcase 3:\n\t\tcase 23:\n\t\t\tday += 'rd';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tday += 'th';\n\t}\n\treturn day;\n};\n\n/**\n * Take a date object and outpit the hour with no leading zeros (1-12)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nexport var h = function (date) {\n\tlet hour = date.getHours();\n\tif (hour === 0) hour = 12;\n\tif (hour < 13) hour = hour;\n\tif (hour >= 13) hour = hour - 12;\n\treturn hour;\n};\n\n/**\n * Take a date object and output the two-digit hour (01-12)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit hour\n */\nexport var hh = function (date) {\n\tlet hour = date.getHours();\n\tif (hour === 0) hour = 12;\n\tif (hour < 13) hour = hour;\n\tif (hour >= 13) hour = hour - 12;\n\thour = hour.toString();\n\treturn (hour.length < 2) ? '0' + hour : hour;\n};\n\n/**\n * Take a date object and output the milliseconds with no leading zeros (0-999)\n * @param   {Date} date a date object\n * @returns {String}    the number of milliseconds\n */\nexport var l = function (date) {\n\tconst milliseconds = date.getMilliseconds().toString();\n\treturn milliseconds;\n};\n\n/**\n * Take a date object and and output the three-digit milliseconds (000-999)\n * @param   {Date}   date a date object\n * @returns {String} the number of milliseconds\n */\nexport var ll = function (date) {\n\tlet milliseconds = date.getMilliseconds().toString();\n\tswitch (milliseconds.length) {\n\t\tcase 1:\n\t\t\tmilliseconds = '00' + milliseconds;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmilliseconds = '0' + milliseconds;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmilliseconds = milliseconds;\n\t\t\tbreak;\n\t}\n\treturn milliseconds;\n};\n\n/**\n * Take a date object and output the numeric month (1-12)\n * @param {Date} \ta date object\n * @returns {String}\tthe month with no leading zeros\n */\nexport var m = function (date) {\n\tconst month = (date.getMonth() + 1).toString();\n\treturn month;\n};\n\n/**\n * Take a date object and output the two-digit month (01-12)\n * @param {Date} \ta date object\n * @returns {String}\tthe two-digit month\n */\nexport var mm = function (date) {\n\tlet month = (date.getMonth() + 1).toString();\n\treturn (month.length < 2) ? '0' + month : month;\n};\n\n/**\n * Take a date object and outpit the seconds with no leading zeros (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the seconds with no leading zeros\n */\nexport var s = function (date) {\n\tconst second = date.getSeconds();\n\treturn second;\n};\n\n/**\n * Take a date object and outpit the two-digit seconds (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit seconds\n */\nexport var ss = function (date) {\n\tlet second = date.getSeconds().toString();\n\treturn (second.length < 2) ? '0' + second : second;\n};\n\n/**\n * Take a date object and output the minutes with no leading zeros\n * @param   {Date} date a date object\n * @returns {String}  the minutes with no leading zeros\n */\nexport var t = function (date) {\n\tconst minute = date.getMinutes().toString();\n\treturn minute;\n};\n\n/**\n * Take a date object and output the two-digit minutes\n * @param   {Date}   date a date object\n * @returns {String} the two-digit minutes\n */\nexport var tt = function (date) {\n\tlet minute = date.getMinutes().toString();\n\treturn (minute.length < 2) ? '0' + minute : minute;\n};\n\n/**\n * Take a date object and output the two-digit year\n * @param {Date} \ta date object\n * @returns {String}\tthe two-digit year\n */\nexport var yy = function (date) {\n\treturn date.getFullYear().toString().substr(2);\n};\n\n/**\n * Take a date object and output the four-digit year\n * @param {Date} \ta date object\n * @returns {String}\tthe four-digit year\n */\nexport var yyyy = function (date) {\n\treturn date.getFullYear();\n};\n\n/**\n * Take a date object and output the timezone offset (UTC +- 01:00, etc.)\n * @param   {Date}   date a date object\n * @returns {String} the timezone offset \n */\nexport var zz = function (date) {\n\tconst offset = date.getTimezoneOffset() / 60 * -1;\n\treturn 'UTC ' + offset + ':00';\n};\n\n/**\n * Converts a date object to an ISO string\n * @param   {Date}   date   a date object\n * @param {String}\t\tformat optional 'short' to remove the time\n * @returns {String} ISO String including time\n */\nexport var iso = function (date, format) {\n\tformat = format || null;\n\t//console.log('iso function date: ' + date);\n\tif (format === 'short') return date.toISOString().split('T')[0];\n\treturn date.toISOString();\n};\n\n/**\n * Converts a date object to a UTC string\n * @param   {Date}   date a date object\n * @param \t{String}\tformat optional 'shart' to remove the time from the output\n * @returns {String} UTC string with or without time\n */\n\nexport var utc = function (date, format) {\n\tformat = format || null;\n\tconst utc = date.toUTCString();\n\tif (format === 'short') {\n\t\tconst arr = utc.split(' ');\n\t\tlet newArr = [];\n\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tnewArr.push(arr[i]);\n\t\t}\n\n\t\treturn newArr.join(' ');\n\t}\n\treturn utc;\n};\n\n/**\n * Converts a date object to UNIX time (milliseconds from January 1, 1970)\n * @param   {Date}   date a date object\n * @returns {Number} milliseconds from January 1, 1970\n */\n\nexport var unix = function (date) {\n\treturn Date.parse(date);\n};","'use strict';\n\nimport * as to from './reform-to-functions';\n\n/**\n * Take a Gregorian object and output the reformatted string\n * See https://github.com/patrickfatrick/gregorian#accepted-formats for details\n * @param {String} \tformat a string or date object (something that can be converted to a valid date)\n * @returns {String}\tthe date reformatted into the specified format\n */\nexport default function (format, delimiter = '+') {\n\tconst date = this.d;\n\tconst pieces = [\n\t\t'unix', 'utc-short', 'utc', 'iso-short', 'iso', 'yyyy','yy', 'DD', 'dd', 'dt', 'D', 'd', 'MM', 'mm','M', 'm', 'hh', 'h', 'HH', 'H', 'tt', 't', 'AP', 'ap', 'ss', 's', 'll', 'l', 'zz'\n\t];\n\tlet converted = format;\n\t\n\tpieces.forEach(piece => {\n\t\tconst re = new RegExp('\\\\b' + piece + '\\\\b', 'g');\n\t\tif (re.test(converted)) {\n\t\t\tswitch (piece) {\n\t\t\t\tcase 'unix':\n\t\t\t\t\tconverted = to.unix(date);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'utc-short':\n\t\t\t\t\tconverted = to.utc(date, 'short');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'utc':\n\t\t\t\t\tconverted = to.utc(date);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'iso-short':\n\t\t\t\t\tconverted = to.iso(date, 'short');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'iso':\n\t\t\t\t\tconverted = to.iso(date);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlet replacer = to[piece](date);\n\t\t\t\t\tconverted = converted.replace(re, replacer);\n\t\t\t}\n\t\t}\n\t});\n\tif (typeof converted === 'string') {\n\t\tconverted = converted.replace(new RegExp('\\\\' + delimiter, 'g'), '');\n\t}\n\treturn converted;\n}\n"],"sourceRoot":"/source/"}