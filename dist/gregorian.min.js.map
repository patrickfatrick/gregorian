{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","gregorian.min.js","src/gregorian.js","src/modules/reform-_ap_.js","src/modules/reform-_dd_.js","src/modules/reform-_ddd_.js","src/modules/reform-_mm_.js","src/modules/reform-_mmm_.js","src/modules/reform-ap.js","src/modules/reform-date.js","src/modules/reform-dd.js","src/modules/reform-ddd.js","src/modules/reform-hh.js","src/modules/reform-hhh.js","src/modules/reform-iso.js","src/modules/reform-ml.js","src/modules/reform-mll.js","src/modules/reform-mm.js","src/modules/reform-mmm.js","src/modules/reform-to.js","src/modules/reform-tt.js","src/modules/reform-ttt.js","src/modules/reform-unix.js","src/modules/reform-utc.js","src/modules/reform-yy.js","src/modules/reform-yyyy.js","src/modules/reform-zz.js","src/modules/reform.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","reform","gregorian","./modules/reform",2,"reformAP","date","hour","getHours","ampm",3,"reformDD","days","dayOfWeek","getDay",4,"reformDDD",5,"reformMM","months","month","getMonth",6,"reformMMM",7,"reformAp",8,"reformDate","obj","TypeError","Date","Object","prototype","toString","isNaN","getTime",9,"reformDd","day","getDate",10,"reformDdd",11,"reformHh",12,"reformHhh",13,"reformISO","format","toISOString","split",14,"reformMl","milliseconds","getMilliseconds",15,"reformMll",16,"reformMm",17,"reformMmm",18,"to","this","d","converted","search","some","piece","indexOf","reformTo","unix","utc","iso","replacer","replace","AP","ap","DD","DDD","MM","MMM","mm","mmm","dd","ddd","hh","hhh","ml","mll","tt","ttt","yy","yyyy","zz","./reform-_ap_","./reform-_dd_","./reform-_ddd_","./reform-_mm_","./reform-_mmm_","./reform-ap","./reform-date","./reform-dd","./reform-ddd","./reform-hh","./reform-hhh","./reform-iso","./reform-ml","./reform-mll","./reform-mm","./reform-mmm","./reform-tt","./reform-ttt","./reform-unix","./reform-utc","./reform-yy","./reform-yyyy","./reform-zz",19,"reformTt","minute","getMinutes",20,"reformTtt",21,"reformUnix","parse",22,"reformUTC","toUTCString","arr","newArr","push","join",23,"reformYy","getFullYear","substr",24,"reformYyyy",25,"reformZz","offset","getTimezoneOffset",26,"input","./reform-to"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCmBG,YCCH,IAAIK,GAASX,EAAQ,oBAEjBY,GACHD,OAAQA,EAGTD,GAAOJ,QAAWM,IDLfC,mBAAmB,KAAKC,GAAG,SAASd,EAAQU,EAAOJ,GAKnD,YErBH,SAASS,GAAUC,GAClB,GAAIC,GAAOD,EAAKE,WACZC,EAAe,GAAPF,EAAa,KAAO,IAAK,OAC9BE,GACPT,EAEMJ,QAAUS,OFiBXK,GAAG,SAASpB,EAAQU,EAAOJ,GAK9B,YG5BH,SAASe,GAAUL,GAClB,GAAIM,IAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAClDC,EAAYP,EAAKQ,QACrB,OAAOF,GAAKC,GACZb,EAEMJ,QAAUe,OHwBXI,GAAG,SAASzB,EAAQU,EAAOJ,GAK9B,YInCH,SAASoB,GAAWV,GACnB,GAAIM,IAAQ,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC1EC,EAAYP,EAAKQ,QACrB,OAAOF,GAAKC,GAGbb,EAAOJ,QAAUoB,OJ+BXC,GAAG,SAAS3B,EAAQU,EAAOJ,GAK9B,YK1CH,SAASsB,GAAUZ,GAClB,GAAIa,IAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAQ,OACzFC,EAAQd,EAAKe,UACjB,OAAOF,GAAOC,GACdpB,EAEMJ,QAAUsB,OLsCXI,GAAG,SAAShC,EAAQU,EAAOJ,GAK9B,YMjDH,SAAS2B,GAAWjB,GACnB,GAAIa,IAAU,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YACxHC,EAAQd,EAAKe,UAAW,OACrBF,GAAOC,GACdpB,EAEMJ,QAAU2B,ON6CXC,GAAG,SAASlC,EAAQU,EAAOJ,GAK9B,YOxDH,SAAS6B,GAAUnB,GAClB,GAAIC,GAAOD,EAAKE,WACZC,EAAe,GAARF,EAAc,KAAO,IAChC,OAAOE,GAGRT,EAAOJ,QAAU6B,OPoDXC,GAAG,SAASpC,EAAQU,EAAOJ,GAK9B,YQ/DH,SAAS+B,GAAYC,GACpB,GAAW,MAAPA,EAAa,KAAM,IAAIC,WAAU,4BACjB,IAApBD,EAAM,GAAIE,MAAKF,GAC6B,kBAAxCG,OAAOC,UAAUC,SAASpC,KAAK+B,IAC9BM,MAAMN,EAAIO,WACb,KAAM,IAAIN,WAAU,2BAGtB,OAAOD,GACP5B,EAEMJ,QAAU+B,ORsDXS,GAAG,SAAS9C,EAAQU,EAAOJ,GAK9B,YStEH,SAASyC,GAAU/B,GAClB,GAAIgC,GAAMhC,EAAKiC,UAAUN,UAAW,OAC7BK,GAGRtC,EAAOJ,QAAUyC,OTmEXG,IAAI,SAASlD,EAAQU,EAAOJ,GAK/B,YU7EH,SAAS6C,GAAWnC,GACnB,GAAIgC,GAAMhC,EAAKiC,UAAUN,UAAW,OAC7BK,GAAKxC,OAAS,EAAK,IAAMwC,EAAMA,EACtCtC,EAEMJ,QAAU6C,OV0EXC,IAAI,SAASpD,EAAQU,EAAOJ,GAK/B,YWpFH,SAAS+C,GAAUrC,GAClB,GAAIC,GAAOD,EAAKE,UAGiB,OAFpB,KAATD,IAAYA,EAAO,IACZ,GAAPA,IAAWA,EAAOA,GAClBA,GAAQ,KAAIA,GAAc,IACvBA,EAGRP,EAAOJ,QAAU+C,OX8EXC,IAAI,SAAStD,EAAQU,EAAOJ,GAK/B,YY3FH,SAASiD,GAAWvC,GACnB,GAAIC,GAAOD,EAAKE,UAKhB,OAJa,KAATD,IAAYA,EAAO,IACZ,GAAPA,IAAWA,EAAOA,GAClBA,GAAQ,KAAIA,GAAc,IAC9BA,EAAOA,EAAK0B,WACL1B,EAAMT,OAAS,EAAK,IAAMS,EAAOA,EAGzCP,EAAOJ,QAAUiD,OZoFXC,IAAI,SAASxD,EAAQU,EAAOJ,GAM/B,YalGH,SAASmD,GAAWzC,EAAM0C,GAGzB,MAFAA,GAASA,GAAU,KAEJ,UAAXA,EAA2B1C,EAAK2C,cAAcC,MAAM,KAAK,GACtD5C,EAAK2C,cACZjD,EAEMJ,QAAUmD,Ob8FXI,IAAI,SAAS7D,EAAQU,EAAOJ,GAK/B,Yc3GH,SAASwD,GAAU9C,GAClB,GAAI+C,GAAe/C,EAAKgD,kBAAkBrB,UAC1C,OAAOoB,GAGRrD,EAAOJ,QAAUwD,OdwGXG,IAAI,SAASjE,EAAQU,EAAOJ,GAK/B,YelHH,SAAS4D,GAAWlD,GACnB,GAAI+C,GAAe/C,EAAKgD,kBAAkBrB,UAAW,QAC7CoB,EAAavD,QACpB,IAAK,GACJuD,EAAe,KAAOA,CAAa,MAC7B,KACF,GACJA,EAAe,IAAMA,CACrB,MACD,SACCA,EAAeA,EAGjB,MAAOA,GACPrD,EAEMJ,QAAU4D,OfoGXC,IAAI,SAASnE,EAAQU,EAAOJ,GAK/B,YgBzHH,SAAS8D,GAAUpD,GAClB,GAAIc,IAASd,EAAKe,WAAa,GAAGY,UAAW,OACtCb,GAGRpB,EAAOJ,QAAU8D,OhBsHXC,IAAI,SAASrE,EAAQU,EAAOJ,GAK/B,YiBhIH,SAASgE,GAAWtD,GACnB,GAAIc,IAASd,EAAKe,WAAa,GAAGY,UAAW,OACtCb,GAAOtB,OAAS,EAAK,IAAMsB,EAAQA,EAC1CpB,EAEMJ,QAAUgE,OjB6HXC,IAAI,SAASvE,EAAQU,EAAOJ,GAClC,YkB1GA,SAASkE,GAAId,GACZ,GAAI1C,GAAOyD,KAAKC,EACZC,EAAYjB,EACZkB,GACH,OACA,YACA,MACA,YACA,MACA,OACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,MACA,KACA,KAsCD,OArCEA,GAEKC,KAAK,SAASC,EAAO7E,GAE3B,GAAiC,KAA7B0E,EAAUI,QAAQD,GACrB,OAAQA,GACP,IAAK,OAC4B,MAAhCH,GAAYK,EAASC,KAAKjE,IACnB,CAER,KAAK,YACoC,MAAxC2D,GAAYK,EAASE,IAAIlE,EAAM,UACxB,CACD,KACF,MAC2B,MAA/B2D,GAAYK,EAASE,IAAIlE,IAClB,CACD,KACF,YAEJ,MADA2D,GAAYK,EAASG,IAAInE,EAAM,UACxB,CAER,KAAK,MAC2B,MAA/B2D,GAAYK,EAASG,IAAInE,IAClB,CAER,SAGC,GAAIoE,GAAWJ,EAASF,GAAO9D,GAAM2B,UACU,OAA/CgC,GAAYA,EAAUU,QAAQP,EAAOM,IAC9B,KAMJT,EA/FR,GACIK,IADahF,EAAQ,oBACRgF,GACRM,GAAKtF,EAAQ,iBACtBgF,EAASO,GAAKvF,EAAQ,eACtBgF,EAASQ,GAAKxF,EAAQ,iBACtBgF,EAASS,IAAMzF,EAAQ,kBACvBgF,EAASU,GAAK1F,EAAQ,iBAAiBgF,EAC9BW,IAAM3F,EAAQ,kBAAkBgF,EAChCY,GAAK5F,EAAQ,eAAegF,EAC5Ba,IAAM7F,EAAQ,gBAAgBgF,EAC9Bc,GAAK9F,EAAQ,eACtBgF,EAASe,IAAM/F,EAAQ,gBAAgBgF,EAC9BgB,GAAKhG,EAAQ,eAAegF,EAC5BiB,IAAMjG,EAAQ,gBAAgBgF,EAC9BkB,GAAKlG,EAAQ,eAAegF,EAC5BmB,IAAMnG,EAAQ,gBACvBgF,EAASoB,GAAKpG,EAAQ,eACtBgF,EAASqB,IAAMrG,EAAQ,gBACvBgF,EAASsB,GAAKtG,EAAQ,eACtBgF,EAASuB,KAAOvG,EAAQ,iBAAiBgF,EAChCwB,GAAKxG,EAAQ,eAAegF,EAC5BC,KAAOjF,EAAQ,iBAAiBgF,EAChCE,IAAMlF,EAAQ,gBAAgBgF,EAC9BG,IAAMnF,EAAQ,gBAyEtBU,EAEMJ,QAAUkE,IlBwEdiC,gBAAgB,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAEC,cAAc,EAAEC,gBAAgB,EAAEC,cAAc,EAAEC,eAAe,GAAGC,cAAc,GAAGC,eAAe,GAAGC,eAAe,GAAGC,cAAc,GAAGC,eAAe,GAAGC,cAAc,GAAGC,eAAe,GAAGC,cAAc,GAAGC,eAAe,GAAGC,gBAAgB,GAAGC,eAAe,GAAGC,cAAc,GAAGC,gBAAgB,GAAGC,cAAc,KAAKC,IAAI,SAAShI,EAAQU,EAAOJ,GAKtb,YmB1KH,SAAS2H,GAAUjH,GAClB,GAAIkH,GAASlH,EAAKmH,aAAaxF,UAAW,OACnCuF,GACPxH,EAEMJ,QAAU2H,OnBuKXG,IAAI,SAASpI,EAAQU,EAAOJ,GAK/B,YoBjLH,SAAS+H,GAAWrH,GACnB,GAAIkH,GAASlH,EAAKmH,aAAaxF,UAC/B,OAAQuF,GAAO1H,OAAS,EAAK,IAAM0H,EAASA,EAC5CxH,EAEMJ,QAAU+H,OpB8KXC,IAAI,SAAStI,EAAQU,EAAOJ,GAK/B,YqBvLH,SAASiI,GAAYvH,GACpB,MAAOwB,MAAKgG,MAAMxH,GAGnBN,EAAOJ,QAAUiI,OrBqLXE,IAAI,SAASzI,EAAQU,EAAOJ,GAM/B,YsB9LH,SAASoI,GAAU1H,EAAM0C,GACxBA,EAASA,GAAU,IAAK,IACpBwB,GAAMlE,EAAK2H,aACf,IAAe,UAAXjF,EAAoB,CAIvB,IAAK,GAHDkF,GAAM1D,EAAItB,MAAM,KAChBiF,KAEK5I,EAAI,EAAO,EAAJA,EAAOA,IACtB4I,EAAOC,KAAKF,EAAI3I,GAGjB,OAAO4I,GAAOE,KAAK,KACnB,MACM7D,GACPxE,EAEMJ,QAAUoI,OtBgLXM,IAAI,SAAShJ,EAAQU,EAAOJ,GAK/B,YuBvMH,SAAS2I,GAAUjI,GAClB,MAAOA,GAAKkI,cAAcvG,WAAWwG,OAAO,GAC5CzI,EAEMJ,QAAU2I,OvBqMXG,IAAI,SAASpJ,EAAQU,EAAOJ,GAK/B,YwB9MH,SAAS+I,GAAYrI,GACpB,MAAOA,GAAKkI,cAGbxI,EAAOJ,QAAU+I,OxB4MXC,IAAI,SAAStJ,EAAQU,EAAOJ,GAK/B,YyBrNH,SAASiJ,GAAUvI,GAClB,GAAIwI,GAASxI,EAAKyI,oBAAsB,GAAK,EAAG,OACzC,OAASD,EAAS,MACzB9I,EAEMJ,QAAUiJ,OzBkNXG,IAAI,SAAS1J,EAAQU,EAAOJ,GAClC,Y0B7NA,IAAI+B,GAAarC,EAAQ,iBACrBgF,EAAWhF,EAAQ,eAOnBW,EAAS,SAAU2B,GACtB,GAAItB,GAAOqB,EAAWC,EAAK,QAE1BoC,EAAG1D,EACH2I,MAAOrH,EACPkC,GAAIQ,GAINtE,GAAOJ,QAAUK,I1BkNdoG,gBAAgB,EAAE6C,cAAc,UAAU","file":"gregorian.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",null,"/**\n * Gregorian\n * Author: Patrick Fricano\n * https://www.github.com/patrickfatrick/gregorian\n * \n * Take a user-input date in any format and convert it to several formats\n * Also serves as a wrapper for common JS date methods like toUTCString and toISOString\n * toLocaleDateString is currently not well-supported especially on mobile, so we're avoiding it.\n * \n * \n * \n * gregorian.reform.to('__FORMAT STRING__') string with formatting options specified with keyword strings\n * \t\tSee ./modules/reform-to.js for more information on this\n * gregorian.reform.to('iso') ISO string including time such as '2015-09-12T23:06:19Z'\n * \t\t`iso-short` can be added to reduce the string to just the date, like '2015-09-12'\n * gregorian.reform.to('utc') UTC string such as 'Sat, 12 Sep 2015 06:00:00 GMT'\n * \t\t`utc-short` can be added to reduce the string to just the date, like 'Sat, 12 Sep 2015'\n * gregorian.reform.to('unix') milliseconds since January 1, 1970\n */\n\nvar reform = require('./modules/reform');\n\nvar gregorian = {\n\treform: reform\n};\n\nmodule.exports =  gregorian;","/**\n * Take a date object and output the capitalized 12-hour clock period (AM/PM)\n * @param   {Date}   date a date object\n * @returns {String} the capitalized 12-hour clock period \n */\nfunction reformAP (date) {\n\tvar hour = date.getHours();\n\tvar ampm = (hour < 12) ? 'AM' : 'PM';\n\treturn ampm;\n}\n\nmodule.exports = reformAP;","/**\n * Take a date object and output the abreviated day of the week\n * @param {Date} \ta date object\n * @returns {Number}\tthe abbreviated day of the week\n */\nfunction reformDD (date) {\n\tvar days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\tvar dayOfWeek = date.getDay();\n\treturn days[dayOfWeek];\n}\n\nmodule.exports = reformDD;","/**\n * Take a date object and output the day of the week\n * @param {Date} \ta date object\n * @returns {String} the full day of the week\n */\nfunction reformDDD (date) {\n\tvar days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\tvar dayOfWeek = date.getDay();\n\treturn days[dayOfWeek];\n}\n\nmodule.exports = reformDDD;","/**\n * Take a date object and output the abbreviated month\n * @param {Date} \ta date object\n * @returns {String}\tthe abbreviated month\n */\nfunction reformMM (date) {\n\tvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov',  'Dec']\n\tvar month = date.getMonth();\n\treturn months[month];\n}\n\nmodule.exports = reformMM;","/**\n * Take a date object and output the month\n * @param {Date} \ta date object\n * @returns {String}\tthe full month\n */\nfunction reformMMM (date) {\n\tvar months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\tvar month = date.getMonth();\n\treturn months[month];\n}\n\nmodule.exports = reformMMM;","/**\n * Take a date object and output the uncapitalized 12-hour clock period (AM/PM)\n * @param   {Date}   date a date object\n * @returns {String} the uncapitalized 12-hour clock period \n */\nfunction reformAp (date) {\n\tvar hour = date.getHours();\n\tvar ampm = (hour < 12) ? 'am' : 'pm';\n\treturn ampm;\n}\n\nmodule.exports = reformAp;","/**\n * Convert the object passed to a date and test its validity\n * @param {Object} \tobj any object\n * @returns {Date}\tif string passes the test, return the date object\n */\nfunction reformDate (obj) {\n\tif (obj == null) throw new TypeError('This is null or undefined');\n\tobj = new Date(obj);\n\tif (Object.prototype.toString.call(obj) === \"[object Date]\") {\n\t\tif (isNaN(obj.getTime())) {\n\t\t\tthrow new TypeError('This is not a valid date');\n\t\t}\n\t}\n\treturn obj;\n}\n\nmodule.exports = reformDate;","/**\n * Take a date object and output the date of the month with no leading zeros (1-31)\n * @param {Date} \ta date object\n * @returns {Number}\tthe date of the month with no leading zeros\n */\nfunction reformDd (date) {\n\tvar day = date.getDate().toString();\n\treturn day;\n}\n\nmodule.exports = reformDd;","/**\n * Take a date object and output the two-digit date of the month (01-31)\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit date of the month\n */\nfunction reformDdd (date) {\n\tvar day = date.getDate().toString();\n\treturn (day.length < 2) ? '0' + day : day;\n}\n\nmodule.exports = reformDdd;","/**\n * Take a date object and outpit the hour with no leading zeros (1-12)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nfunction reformHh (date) {\n\tvar hour = date.getHours();\n\tif (hour === 0) hour = 12;\n\tif (hour < 13) hour = hour;\n\tif (hour >= 13) hour = hour - 12;\n\treturn hour;\n}\n\nmodule.exports = reformHh;","/**\n * Take a date object and output the two-digit hour (01-12)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit hour\n */\nfunction reformHhh (date) {\n\tvar hour = date.getHours();\n\tif (hour === 0) hour = 12;\n\tif (hour < 13) hour = hour;\n\tif (hour >= 13) hour = hour - 12;\n\thour = hour.toString();\n\treturn (hour.length < 2) ? '0' + hour : hour;\n}\n\nmodule.exports = reformHhh;","/**\n * Converts a date object to an ISO string\n * @param   {Date}   date   a date object\n * @param {String}\t\tformat optional 'short' to remove the time\n * @returns {String} ISO String including time\n */\nfunction reformISO (date, format) {\n\tformat = format || null;\n\t//console.log('iso function date: ' + date);\n\tif (format === 'short') return date.toISOString().split('T')[0];\n\treturn date.toISOString();\n}\n\nmodule.exports = reformISO;","/**\n * Take a date object and output the milliseconds with no leading zeros (0-999)\n * @param   {Date} date a date object\n * @returns {String}    the number of milliseconds\n */\nfunction reformMl (date) {\n\tvar milliseconds = date.getMilliseconds().toString();\n\treturn milliseconds;\n}\n\nmodule.exports = reformMl;","/**\n * Take a date object and and output the three-digit milliseconds (000-999)\n * @param   {Date}   date a date object\n * @returns {String} the number of milliseconds\n */\nfunction reformMll (date) {\n\tvar milliseconds = date.getMilliseconds().toString();\n\tswitch (milliseconds.length) {\n\t\tcase 1:\n\t\t\tmilliseconds = '00' + milliseconds;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmilliseconds = '0' + milliseconds;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmilliseconds = milliseconds;\n\t\t\tbreak;\n\t}\n\treturn milliseconds;\n}\n\nmodule.exports = reformMll;","/**\n * Take a date object and output the numeric month (1-12)\n * @param {Date} \ta date object\n * @returns {Number}\tthe month with no leading zeros\n */\nfunction reformMm (date) {\n\tvar month = (date.getMonth() + 1).toString();\n\treturn month;\n}\n\nmodule.exports = reformMm;","/**\n * Take a date object and output the two-digit month (01-12)\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit month\n */\nfunction reformMmm (date) {\n\tvar month = (date.getMonth() + 1).toString();\n\treturn (month.length < 2) ? '0' + month : month;\n}\n\nmodule.exports = reformMmm;","var reformDate = require('./reform-date');\nvar reformTo = {}\nreformTo.AP = require('./reform-_ap_');\nreformTo.ap = require('./reform-ap');\nreformTo.DD = require('./reform-_dd_');\nreformTo.DDD = require('./reform-_ddd_');\nreformTo.MM = require('./reform-_mm_');\nreformTo.MMM = require('./reform-_mmm_');\nreformTo.mm = require('./reform-mm');\nreformTo.mmm = require('./reform-mmm');\nreformTo.dd = require('./reform-dd');\nreformTo.ddd = require('./reform-ddd');\nreformTo.hh = require('./reform-hh');\nreformTo.hhh = require('./reform-hhh');\nreformTo.ml = require('./reform-ml');\nreformTo.mll = require('./reform-mll');\nreformTo.tt = require('./reform-tt');\nreformTo.ttt = require('./reform-ttt');\nreformTo.yy = require('./reform-yy');\nreformTo.yyyy = require('./reform-yyyy');\nreformTo.zz = require('./reform-zz');\nreformTo.unix = require('./reform-unix');\nreformTo.utc = require('./reform-utc');\nreformTo.iso = require('./reform-iso');\n\n/**\n * Take a Gregorian object and output the reformatted string\n * @param {String} \tformat a string or date object (something that can be converted to a valid date)\n * @returns {String}\tthe date reformatted into the specified format\n */\nfunction to (format) {\n\tvar date = this.d;\n\tvar converted = format;\n\tvar search = [\n\t\t'unix', // The number of milliseconds passed since January 1, 1970\n\t\t'utc-short', // shortened UTC string (no time included)\n\t\t'utc', // UTC string\n\t\t'iso-short', // shortened ISO string (no time included)\n\t\t'iso', // ISO string \n\t\t'yyyy', // four-digit year 2015\n\t\t'yy', // two-digit year (20)15\n\t\t'DDD', // full day of the week Sunday-Saturday\n\t\t'ddd', // two-digit date of the month 01-31\n\t\t'DD', // abbreviated day of the week Sun-Sat\n\t\t'dd', // date of the month with no leading zeros 1-31\n\t\t'MMM', // full month January-December\n\t\t'mmm', // two-digit month 00-12\n\t\t'MM', // abbreviated month Jan-Dec\n\t\t'mm', // month with no leading zeros 1-12\n\t\t'hhh', // two-digit hours 01-12\n\t\t'hh', // hour with no leading zeros 1-12\n\t\t'ttt', // two-digit minutes 00-59\n\t\t'tt', // minutes with no leading zeros 0-59\n\t\t'AP', // AM or PM\n\t\t'ap', // am or pm\n\t\t'mll', // milliseconds 000-999\n\t\t'ml', // milliseconds with no leading zeros 0-999\n\t\t'zz' // timezone offset UTC -6:00\n\t];\n\n\tsearch.some(function(piece, i) {\n\t\t//console.log(converted + ' vs ' + piece);\n\t\tif (converted.indexOf(piece) !== -1) {\n\t\t\tswitch (piece) {\n\t\t\t\tcase 'unix':\n\t\t\t\t\tconverted = reformTo.unix(date);\n\t\t\t\t\treturn true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'utc-short':\n\t\t\t\t\tconverted = reformTo.utc(date, 'short');\n\t\t\t\t\treturn true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'utc':\n\t\t\t\t\tconverted = reformTo.utc(date);\n\t\t\t\t\treturn true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'iso-short':\n\t\t\t\t\tconverted = reformTo.iso(date, 'short');\n\t\t\t\t\treturn true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'iso':\n\t\t\t\t\tconverted = reformTo.iso(date);\n\t\t\t\t\treturn true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// console.log('Search string is: ' + piece);\n\t\t\t\t\t// console.log('Converted string is: ' + to[piece](date));\n\t\t\t\t\tvar replacer = reformTo[piece](date).toString();\n\t\t\t\t\tconverted = converted.replace(piece, replacer);\n\t\t\t\t\treturn false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\t// console.log(converted);\n\treturn converted;\n}\n\nmodule.exports = to;\n","/**\n * Take a date object and output the minutes with no leading zeros\n * @param   {Date} date a date object\n * @returns {String}  the minutes with no leading zeros\n */\nfunction reformTt (date) {\n\tvar minute = date.getMinutes().toString();\n\treturn minute;\n}\n\nmodule.exports = reformTt;","/**\n * Take a date object and output the two-digit minutes\n * @param   {Date}   date a date object\n * @returns {String} the two-digit minutes\n */\nfunction reformTtt (date) {\n\tvar minute = date.getMinutes().toString();\n\treturn (minute.length < 2) ? '0' + minute : minute;\n}\n\nmodule.exports = reformTtt;","/**\n * Converts a date object to UNIX time (milliseconds from January 1, 1970)\n * @param   {Date}   date a date object\n * @returns {Number} milliseconds from January 1, 1970\n */\n\nfunction reformUnix (date) {\n\treturn Date.parse(date);\n}\n\nmodule.exports = reformUnix;","/**\n * Converts a date object to a UTC string\n * @param   {Date}   date a date object\n * @param \t{String}\tformat optional 'shart' to remove the time from the output\n * @returns {String} UTC string with or without time\n */\n\nfunction reformUTC(date, format) {\n\tformat = format || null;\n\tvar utc = date.toUTCString();\n\tif (format === 'short') {\n\t\tvar arr = utc.split(' ');\n\t\tvar newArr = [];\n\n\t\tfor (var i = 0; i < 4; i++) {\n\t\t\tnewArr.push(arr[i]);\n\t\t}\n\n\t\treturn newArr.join(' ');\n\t}\n\treturn utc;\n}\n\nmodule.exports = reformUTC;","/**\n * Take a date object and output the two-digit year\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit year\n */\nfunction reformYy (date) {\n\treturn date.getFullYear().toString().substr(2);\n}\n\nmodule.exports = reformYy;","/**\n * Take a date object and output the four-digit year\n * @param {Date} \ta date object\n * @returns {Number}\tthe four-digit year\n */\nfunction reformYyyy (date) {\n\treturn date.getFullYear();\n}\n\nmodule.exports = reformYyyy;","/**\n * Take a date object and output the timezone offset (UTC +- 01:00, etc.)\n * @param   {Date}   date a date object\n * @returns {String} the timezone offset \n */\nfunction reformZz (date) {\n\tvar offset = date.getTimezoneOffset() / 60 * -1;\n\treturn 'UTC ' + offset + ':00';\n}\n\nmodule.exports = reformZz;","var reformDate = require('./reform-date');\nvar reformTo = require('./reform-to');\n\n/**\n * Take a string or date object and convert it into a gregorian object\n * @param   {Object} obj A string or date object that can be parsed into a date\n * @returns {Object} Gregorian object\n */\nvar reform = function (obj) {\n\tvar date = reformDate(obj);\n\treturn {\n\t\td: date,\n\t\tinput: obj,\n\t\tto: reformTo\n\t}\n}\n\nmodule.exports = reform;"],"sourceRoot":"/source/"}