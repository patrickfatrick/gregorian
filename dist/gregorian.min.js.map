{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","gregorian.min.js","src/gregorian.js","src/modules/Gregorian.js","src/modules/add-subtract.js","src/modules/get-utc.js","src/modules/get.js","src/modules/reagent.js","src/modules/recite.js","src/modules/reformat.js","src/modules/restart-utc.js","src/modules/restart.js","src/modules/set-utc.js","src/modules/set.js","src/modules/to.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","gregorian","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"./src/gregorian",2,"Gregorian","./modules/Gregorian",3,"_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","to","add","subtract","restart","restartUTC","reagent","recite","setUTC","set","getUTC","get","d","input","value","obj","Date","date","./add-subtract","./get","./get-utc","./reagent","./recite","./restart","./restart-utc","./set","./set-utc","./to",4,"addSubtract","increment","increments","setUTCMilliseconds","getUTCMilliseconds","setUTCSeconds","getUTCSeconds","setUTCMinutes","getUTCMinutes","h","setUTCHours","getUTCHours","setUTCDate","getUTCDate","w","m","newMonth","getUTCMonth","newYear","getUTCFullYear","newDate","setUTCFullYear","y",5,"z","D","getUTCDay","Math","floor",6,"getTimezoneOffset","getMilliseconds","getSeconds","getMinutes","getHours","getDate","getDay","getFullYear","getMonth",7,"isNaN","getTime",8,9,"AP","hour","ampm","ap","days","dayOfWeek","DD","H","HH","toString","M","months","month","MM","day","dd","dt","hh","milliseconds","ll","mm","second","ss","minute","tt","yy","substr","yyyy","zz","offset","iso","format","toISOString","split","utc","toUTCString","arr","newArr","push","join","unix","parse",10,"setUTCMonth",11,"setSeconds","setMinutes","setHours","setDate","setMonth","setFullYear",12,"currentDay","currentMilliseconds",13,"setMilliseconds",14,"delimiter","pieces","converted","forEach","piece","re","RegExp","replacer","undefined","test","reformat","replace","./reformat"],"mappings":"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","file":"gregorian.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict'\n\nvar gregorian = require('./src/gregorian')\nmodule.exports = gregorian\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.gregorian = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';var gregorian=require('./src/gregorian');module.exports=gregorian;\n\n},{\"./src/gregorian\":2}],2:[function(require,module,exports){\n'use strict';var Gregorian=require('./modules/Gregorian');var gregorian=new Gregorian();module.exports=gregorian;\n\n},{\"./modules/Gregorian\":3}],3:[function(require,module,exports){\n'use strict'; /**\n * Gregorian\n * Author: Patrick Fricano\n * https://www.github.com/patrickfatrick/gregorian\n */var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\" in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}var to=require('./to');var add=require('./add-subtract').add;var subtract=require('./add-subtract').subtract;var restart=require('./restart');var restartUTC=require('./restart-utc');var reagent=require('./reagent');var recite=require('./recite');var setUTC=require('./set-utc');var set=require('./set');var getUTC=require('./get-utc');var get=require('./get');module.exports=function(){function Gregorian(){_classCallCheck(this,Gregorian);this.d;this.input;this.to=to;this.add=add;this.subtract=subtract;this.restart=restart;this.restartUTC=restartUTC;this.reagent=reagent;this.recite=recite;this.setUTC=setUTC;this.set=set;this.getUTC=getUTC;this.get=get;} /**\n   * Form a date (or other object) into a Gregorian object\n   * @param  {Date}   obj any date\n   * @return {Object}     A Gregorian instance\n   */_createClass(Gregorian,[{key:'reform',value:function reform(obj){obj=obj||new Date();var date=new Date(obj);this.d=date;this.input=obj;return this;}}]);return Gregorian;}();\n\n},{\"./add-subtract\":4,\"./get\":6,\"./get-utc\":5,\"./reagent\":7,\"./recite\":8,\"./restart\":11,\"./restart-utc\":10,\"./set\":13,\"./set-utc\":12,\"./to\":14}],4:[function(require,module,exports){\n'use strict'; /**\n * Adds specified increments to a gregorian object\n * @param   {Number} n         a number to multiply the increment by\n * @param   {String} increment an increment to add\n * @returns {Object} a new gregorian object\n */function addSubtract(obj,n,increment){var increments={};increments.l=function(date){return new Date(date.setUTCMilliseconds(date.getUTCMilliseconds()+n));};increments.s=function(date){return new Date(date.setUTCSeconds(date.getUTCSeconds()+n));};increments.t=function(date){return new Date(date.setUTCMinutes(date.getUTCMinutes()+n));};increments.h=function(date){return new Date(date.setUTCHours(date.getUTCHours()+n));};increments.d=function(date){return new Date(date.setUTCDate(date.getUTCDate()+n));};increments.w=function(date){return new Date(date.setUTCDate(date.getUTCDate()+n*7));};increments.m=function(date){var newMonth=date.getUTCMonth()+n;var newYear=date.getUTCFullYear();var newDate=date.getUTCDate();if(newDate>new Date(date.setUTCFullYear(newYear,newMonth+1,0)).getUTCDate()){return new Date(date.setUTCFullYear(newYear,newMonth+1,0));}else {return new Date(date.setUTCFullYear(newYear,newMonth,newDate));}};increments.y=function(date){var newYear=date.getUTCFullYear()+n;var newMonth=date.getUTCMonth();var newDate=date.getUTCDate();if(newDate>new Date(date.setUTCFullYear(newYear,newMonth+1,0)).getUTCDate()){return new Date(date.setUTCFullYear(newYear,newMonth+1,0));}else {return new Date(date.setUTCFullYear(newYear,newMonth,newDate));}};obj.d=increments[increment](obj.d);return obj;}exports.add=function(n,increment){return addSubtract(this,n*1,increment);};exports.subtract=function(n,increment){return addSubtract(this,n*-1,increment);};\n\n},{}],5:[function(require,module,exports){\n'use strict'; /**\n * Gets the specified increment in UTC for the date\n * @param   {String} increment    date increment to get the value of\n * @returns {Object} the value for that increment, in UTC\n */function getUTC(increment){var increments={};increments.z=function(){return 0;};increments.l=function(date){return date.getUTCMilliseconds();};increments.s=function(date){return date.getUTCSeconds();};increments.t=function(date){return date.getUTCMinutes();};increments.h=function(date){return date.getUTCHours();};increments.d=function(date){return date.getUTCDate();};increments.D=function(date){return date.getUTCDay();};increments.w=function(date){return Math.floor(((date-new Date(date.getUTCFullYear(),0,1))/1000/60/60/24+1)/7);};increments.m=function(date){return date.getUTCMonth();};increments.y=function(date){return date.getUTCFullYear();};return increments[increment](this.d);}module.exports=getUTC;\n\n},{}],6:[function(require,module,exports){\n'use strict'; /**\n * Gets the specified increment in local time for the date\n * @param   {String} increment    date increment to get the value of\n * @returns {Object} the value for that increment in local time\n */function get(increment){var increments={};increments.z=function(date){return date.getTimezoneOffset()/60;};increments.l=function(date){return date.getMilliseconds();};increments.s=function(date){return date.getSeconds();};increments.t=function(date){return date.getMinutes();};increments.h=function(date){return date.getHours();};increments.d=function(date){return date.getDate();};increments.D=function(date){return date.getDay();};increments.w=function(date){return Math.floor(((date-new Date(date.getFullYear(),0,1))/1000/60/60/24+1)/7);};increments.m=function(date){return date.getMonth();};increments.y=function(date){return date.getFullYear();};return increments[increment](this.d);}module.exports=get;\n\n},{}],7:[function(require,module,exports){\n'use strict'; /*\n * Takes a gregorian object and checks that it has a valid date.\n * @param {Object}  A gregorian object\n * @return {Boolean}\n */function reagent(){if(isNaN(this.d.getTime())){return false;}return true;}module.exports=reagent;\n\n},{}],8:[function(require,module,exports){\n'use strict'; /*\n * Takes a gregorian object and outputs the date object\n * @param {Object}  A gregorian object\n * @return {Date} the date object it contains\n */function recite(){return this.d;}module.exports=recite;\n\n},{}],9:[function(require,module,exports){\n'use strict'; /**\n * Take a date object and output the capitalized 12-hour clock period (AM/PM)\n * @param   {Date}   date a date object\n * @returns {String} the capitalized 12-hour clock period\n */exports.AP=function(date){var hour=date.getHours();var ampm=hour<12?'AM':'PM';return ampm;}; /**\n * Take a date object and output the uncapitalized 12-hour clock period (AM/PM)\n * @param   {Date   date a date object\n * @returns {String} the uncapitalized 12-hour clock period\n */exports.ap=function(date){var hour=date.getHours();var ampm=hour<12?'am':'pm';return ampm;}; /**\n * Take a date object and output the abreviated day of the week\n * @param {Date}  a date object\n * @returns {String}  the abbreviated day of the week\n */exports.D=function(date){var days=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];var dayOfWeek=date.getDay();return days[dayOfWeek];}; /**\n * Take a date object and output the day of the week\n * @param {Date}  a date object\n * @returns {String} the full day of the week\n */exports.DD=function(date){var days=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];var dayOfWeek=date.getDay();return days[dayOfWeek];}; /**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */exports.H=function(date){var hour=date.getHours();return hour;}; /**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */exports.HH=function(date){var hour=date.getHours().toString();return hour.length<2?'0'+hour:hour;}; /**\n * Take a date object and output the abbreviated month\n * @param {Date}  a date object\n * @returns {String}  the abbreviated month\n */exports.M=function(date){var months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sept','Oct','Nov','Dec'];var month=date.getMonth();return months[month];}; /**\n * Take a date object and output the month\n * @param {Date}  a date object\n * @returns {String}  the full month\n */exports.MM=function(date){var months=['January','February','March','April','May','June','July','August','September','October','November','December'];var month=date.getMonth();return months[month];}; /**\n * Take a date object and output the date of the month with no leading zeros (1-31)\n * @param {Date}  a date object\n * @returns {String}  the date of the month with no leading zeros\n */exports.d=function(date){var day=date.getDate().toString();return day;}; /**\n * Take a date object and output the two-digit date of the month (01-31)\n * @param {Date}  a date object\n * @returns {String}  the two-digit date of the month\n */exports.dd=function(date){var day=date.getDate().toString();return day.length<2?'0'+day:day;}; /**\n * Take a date object and output the date of the month with no leading zeros but with the ordinal (1st-31st)\n * @param {Date}  a date object\n * @returns {String}  the date with no leading zeros but with the ordinal\n */exports.dt=function(date){var day=date.getDate();switch(day){case 1:case 21:case 31:day+='st';break;case 2:case 22:day+='nd';break;case 3:case 23:day+='rd';break;default:day+='th';}return day;}; /**\n * Take a date object and outpit the hour with no leading zeros (1-12)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */exports.h=function(date){var hour=date.getHours();if(hour===0)hour=12;hour=hour<13?hour:hour-12;return hour;}; /**\n * Take a date object and output the two-digit hour (01-12)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit hour\n */exports.hh=function(date){var hour=date.getHours();if(hour===0)hour=12;hour=hour<13?hour:hour-12;hour=hour.toString();return hour.length<2?'0'+hour:hour;}; /**\n * Take a date object and output the milliseconds with no leading zeros (0-999)\n * @param   {Date} date a date object\n * @returns {String}    the number of milliseconds\n */exports.l=function(date){var milliseconds=date.getMilliseconds().toString();return milliseconds;}; /**\n * Take a date object and and output the three-digit milliseconds (000-999)\n * @param   {Date}   date a date object\n * @returns {String} the number of milliseconds\n */exports.ll=function(date){var milliseconds=date.getMilliseconds().toString();switch(milliseconds.length){case 1:milliseconds='00'+milliseconds;break;case 2:milliseconds='0'+milliseconds;break;default:milliseconds=''+milliseconds;break;}return milliseconds;}; /**\n * Take a date object and output the numeric month (1-12)\n * @param {Date}  a date object\n * @returns {String}  the month with no leading zeros\n */exports.m=function(date){var month=(date.getMonth()+1).toString();return month;}; /**\n * Take a date object and output the two-digit month (01-12)\n * @param {Date}  a date object\n * @returns {String}  the two-digit month\n */exports.mm=function(date){var month=(date.getMonth()+1).toString();return month.length<2?'0'+month:month;}; /**\n * Take a date object and outpit the seconds with no leading zeros (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the seconds with no leading zeros\n */exports.s=function(date){var second=date.getSeconds();return second;}; /**\n * Take a date object and outpit the two-digit seconds (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit seconds\n */exports.ss=function(date){var second=date.getSeconds().toString();return second.length<2?'0'+second:second;}; /**\n * Take a date object and output the minutes with no leading zeros\n * @param   {Date} date a date object\n * @returns {String}  the minutes with no leading zeros\n */exports.t=function(date){var minute=date.getMinutes().toString();return minute;}; /**\n * Take a date object and output the two-digit minutes\n * @param   {Date}   date a date object\n * @returns {String} the two-digit minutes\n */exports.tt=function(date){var minute=date.getMinutes().toString();return minute.length<2?'0'+minute:minute;}; /**\n * Take a date object and output the two-digit year\n * @param {Date}  a date object\n * @returns {String}  the two-digit year\n */exports.yy=function(date){return date.getFullYear().toString().substr(2);}; /**\n * Take a date object and output the four-digit year\n * @param {Date}  a date object\n * @returns {String}  the four-digit year\n */exports.yyyy=function(date){return date.getFullYear();}; /**\n * Take a date object and output the timezone offset (UTC +- 01:00, etc.)\n * @param   {Date}   date a date object\n * @returns {String} the timezone offset\n */exports.zz=function(date){var offset=date.getTimezoneOffset()/60*-1;return 'UTC '+offset+':00';}; /**\n * Converts a date object to an ISO string\n * @param   {Date}   date   a date object\n * @param {String}    format optional 'short' to remove the time\n * @returns {String} ISO String including time\n */exports.iso=function(date,format){format=format||null;if(format==='short')return date.toISOString().split('T')[0];return date.toISOString();}; /**\n * Converts a date object to a UTC string\n * @param   {Date}   date a date object\n * @param   {String}  format optional 'shart' to remove the time from the output\n * @returns {String} UTC string with or without time\n */exports.utc=function(date,format){format=format||null;var utc=date.toUTCString();if(format==='short'){var arr=utc.split(' ');var newArr=[];for(var i=0;i<4;i++){newArr.push(arr[i]);}return newArr.join(' ');}return utc;}; /**\n * Converts a date object to UNIX time (milliseconds from January 1, 1970)\n * @param   {Date}   date a date object\n * @returns {Number} milliseconds from January 1, 1970\n */exports.unix=function(date){return Date.parse(date);};\n\n},{}],10:[function(require,module,exports){\n'use strict'; /**\n * Sets the date or time to the start of the specified increment\n * @param   {String} increment an increment to set\n * @returns {Object} a new gregorian object\n */function restartUTC(increment){var increments={};increments.s=function(date){return new Date(date.setUTCSeconds(date.getUTCSeconds(),0));};increments.t=function(date){return new Date(date.setUTCMinutes(date.getUTCMinutes(),0,0));};increments.h=function(date){return new Date(date.setUTCHours(date.getUTCHours(),0,0,0));};increments.d=function(date){date.setUTCDate(date.getUTCDate());date.setUTCHours(0,0,0,0);return new Date(date);};increments.w=function(date){date.setUTCDate(date.getUTCDate()-date.getUTCDay());date.setUTCHours(0,0,0,0);return new Date(date);};increments.m=function(date){date.setUTCMonth(date.getUTCMonth(),1);date.setUTCHours(0,0,0,0);return new Date(date);};increments.y=function(date){date.setUTCFullYear(date.getUTCFullYear(),0,1);date.setUTCHours(0,0,0,0);return new Date(date);};this.d=increments[increment](this.d);return this;}module.exports=restartUTC;\n\n},{}],11:[function(require,module,exports){\n'use strict'; /**\n * Sets the date or time to the start of the specified increment\n * @param   {String} increment an increment to set\n * @returns {Object} a new gregorian object\n */function restart(increment){var increments={};increments.s=function(date){return new Date(date.setSeconds(date.getSeconds(),0));};increments.t=function(date){return new Date(date.setMinutes(date.getMinutes(),0,0));};increments.h=function(date){return new Date(date.setHours(date.getHours(),0,0,0));};increments.d=function(date){date.setDate(date.getDate());date.setHours(0,0,0,0);return new Date(date);};increments.w=function(date){date.setDate(date.getDate()-date.getDay());date.setHours(0,0,0,0);return new Date(date);};increments.m=function(date){date.setMonth(date.getMonth(),1);date.setHours(0,0,0,0);return new Date(date);};increments.y=function(date){date.setFullYear(date.getFullYear(),0,1);date.setHours(0,0,0,0);return new Date(date);};this.d=increments[increment](this.d);return this;}module.exports=restart;\n\n},{}],12:[function(require,module,exports){\n'use strict'; /**\n * Sets the date or time to specified interval\n * @param   {String} increment an increment to set\n * @param {String} value what to set the increment to\n * @returns {Object} a new gregorian object\n */function setUTC(value,increment){var increments={};increments.l=function(date){return new Date(date.setUTCMilliseconds(value));};increments.s=function(date){return new Date(date.setUTCSeconds(value));};increments.t=function(date){return new Date(date.setUTCMinutes(value));};increments.h=function(date){return new Date(date.setUTCHours(value));};increments.d=function(date){return new Date(date.setUTCDate(value));};increments.D=function(date){return new Date(date.setUTCDate(date.getUTCDate()-date.getUTCDay()+value));};increments.w=function(date){var currentDay=date.getUTCDay();var currentMilliseconds=date.getUTCMilliseconds();date.setUTCFullYear(date.getUTCFullYear(),0,value*7);var n=currentDay-date.getUTCDay();date.setUTCDate(date.getUTCDate()+n);return new Date(date.setUTCMilliseconds(currentMilliseconds));};increments.m=function(date){var newMonth=value-1;var newYear=date.getUTCFullYear();var newDate=date.getUTCDate();if(newDate>new Date(date.setUTCFullYear(newYear,newMonth+1,0)).getUTCDate()){return new Date(date.setUTCFullYear(newYear,newMonth+1,0));}else {return new Date(date.setUTCFullYear(newYear,newMonth,newDate));}};increments.y=function(date){var newYear=value;var newMonth=date.getUTCMonth();var newDate=date.getUTCDate();if(newDate>new Date(date.setUTCFullYear(newYear,newMonth+1,0)).getUTCDate()){return new Date(date.setUTCFullYear(newYear,newMonth+1,0));}else {return new Date(date.setUTCFullYear(newYear,newMonth,newDate));}};this.d=increments[increment](this.d);return this;}module.exports=setUTC;\n\n},{}],13:[function(require,module,exports){\n'use strict'; /**\n * Sets the date or time to specified interval\n * @param   {String} increment an increment to set\n * @param {String} value what to set the increment to\n * @returns {Object} a new gregorian object\n */function set(value,increment){var increments={};increments.l=function(date){return new Date(date.setMilliseconds(value));};increments.s=function(date){return new Date(date.setSeconds(value));};increments.t=function(date){return new Date(date.setMinutes(value));};increments.h=function(date){return new Date(date.setHours(value));};increments.d=function(date){return new Date(date.setDate(value));};increments.D=function(date){return new Date(date.setDate(date.getDate()-date.getDay()+value));};increments.w=function(date){var currentDay=date.getDay();var currentMilliseconds=date.getMilliseconds();date.setFullYear(date.getFullYear(),0,value*7);var n=currentDay-date.getDay();date.setDate(date.getDate()+n);return new Date(date.setMilliseconds(currentMilliseconds));};increments.m=function(date){var newMonth=value-1;var newYear=date.getFullYear();var newDate=date.getDate();if(newDate>new Date(date.setFullYear(newYear,newMonth+1,0)).getDate()){return new Date(date.setFullYear(newYear,newMonth+1,0));}else {return new Date(date.setFullYear(newYear,newMonth,newDate));}};increments.y=function(date){var newYear=value;var newMonth=date.getMonth();var newDate=date.getDate();if(newDate>new Date(date.setFullYear(newYear,newMonth+1,0)).getDate()){return new Date(date.setFullYear(newYear,newMonth+1,0));}else {return new Date(date.setFullYear(newYear,newMonth,newDate));}};this.d=increments[increment](this.d);return this;}module.exports=set;\n\n},{}],14:[function(require,module,exports){\n'use strict';var reformat=require('./reformat'); /**\n * Take a Gregorian object and output the reformatted string\n * See https://github.com/patrickfatrick/gregorian#accepted-formats for details\n * @param {String}  format a string or date object (something that can be converted to a valid date)\n * @returns {String}  the date reformatted into the specified format\n */function to(format,delimiter){delimiter=delimiter||'+';var date=this.d;var pieces=['unix','utc-short','utc','iso-short','iso','yyyy','yy','DD','dd','dt','D','d','MM','mm','M','m','hh','h','HH','H','tt','t','AP','ap','ss','s','ll','l','zz'];var converted=format;pieces.forEach(function(piece){var re=new RegExp('\\\\b'+piece+'\\\\b','g');var replacer=undefined;if(re.test(converted)){switch(piece){case 'unix':converted=reformat.unix(date);break;case 'utc-short':converted=reformat.utc(date,'short');break;case 'utc':converted=reformat.utc(date);break;case 'iso-short':converted=reformat.iso(date,'short');break;case 'iso':converted=reformat.iso(date);break;default:replacer=reformat[piece](date);converted=converted.replace(re,replacer);}}});if(typeof converted==='string'){converted=converted.replace(new RegExp('\\\\'+delimiter,'g'),'');}return converted;}module.exports=to;\n\n},{\"./reformat\":9}]},{},[1])(1)\n});\n\n","'use strict'\n\nvar Gregorian = require('./modules/Gregorian')\n\nlet gregorian = new Gregorian()\nmodule.exports = gregorian\n","'use strict'\n\n/**\n * Gregorian\n * Author: Patrick Fricano\n * https://www.github.com/patrickfatrick/gregorian\n */\n\nvar to = require('./to')\nvar add = require('./add-subtract').add\nvar subtract = require('./add-subtract').subtract\nvar restart = require('./restart')\nvar restartUTC = require('./restart-utc')\nvar reagent = require('./reagent')\nvar recite = require('./recite')\nvar setUTC = require('./set-utc')\nvar set = require('./set')\nvar getUTC = require('./get-utc')\nvar get = require('./get')\n\nmodule.exports = class Gregorian {\n  constructor () {\n    this.d\n    this.input\n    this.to = to\n    this.add = add\n    this.subtract = subtract\n    this.restart = restart\n    this.restartUTC = restartUTC\n    this.reagent = reagent\n    this.recite = recite\n    this.setUTC = setUTC\n    this.set = set\n    this.getUTC = getUTC\n    this.get = get\n  }\n\n  /**\n   * Form a date (or other object) into a Gregorian object\n   * @param  {Date}   obj any date\n   * @return {Object}     A Gregorian instance\n   */\n  reform (obj) {\n    obj = obj || new Date()\n    const date = new Date(obj)\n    this.d = date\n    this.input = obj\n    return this\n  }\n}\n","'use strict'\n\n/**\n * Adds specified increments to a gregorian object\n * @param   {Number} n         a number to multiply the increment by\n * @param   {String} increment an increment to add\n * @returns {Object} a new gregorian object\n */\nfunction addSubtract (obj, n, increment) {\n  let increments = {}\n\n  increments.l = (date) => {\n    return new Date(date.setUTCMilliseconds(date.getUTCMilliseconds() + n))\n  }\n  increments.s = (date) => {\n    return new Date(date.setUTCSeconds(date.getUTCSeconds() + n))\n  }\n  increments.t = (date) => {\n    return new Date(date.setUTCMinutes(date.getUTCMinutes() + n))\n  }\n  increments.h = (date) => {\n    return new Date(date.setUTCHours(date.getUTCHours() + n))\n  }\n  increments.d = (date) => {\n    return new Date(date.setUTCDate(date.getUTCDate() + n))\n  }\n  increments.w = (date) => {\n    return new Date(date.setUTCDate(date.getUTCDate() + (n * 7)))\n  }\n  increments.m = (date) => {\n    let newMonth = date.getUTCMonth() + n\n    let newYear = date.getUTCFullYear()\n    let newDate = date.getUTCDate()\n\n    if (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n      return new Date(date.setUTCFullYear(newYear, newMonth + 1, 0))\n    } else {\n      return new Date(date.setUTCFullYear(newYear, newMonth, newDate))\n    }\n  }\n  increments.y = (date) => {\n    let newYear = date.getUTCFullYear() + n\n    let newMonth = date.getUTCMonth()\n    let newDate = date.getUTCDate()\n\n    if (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n      return new Date(date.setUTCFullYear(newYear, newMonth + 1, 0))\n    } else {\n      return new Date(date.setUTCFullYear(newYear, newMonth, newDate))\n    }\n  }\n\n  obj.d = increments[increment](obj.d)\n  return obj\n}\n\nexports.add = function (n, increment) {\n  return addSubtract(this, n * 1, increment)\n}\n\nexports.subtract = function (n, increment) {\n  return addSubtract(this, n * -1, increment)\n}\n","'use strict'\n\n/**\n * Gets the specified increment in UTC for the date\n * @param   {String} increment    date increment to get the value of\n * @returns {Object} the value for that increment, in UTC\n */\nfunction getUTC (increment) {\n  let increments = {}\n\n  increments.z = () => {\n    return 0\n  }\n  increments.l = (date) => {\n    return date.getUTCMilliseconds()\n  }\n  increments.s = (date) => {\n    return date.getUTCSeconds()\n  }\n  increments.t = (date) => {\n    return date.getUTCMinutes()\n  }\n  increments.h = (date) => {\n    return date.getUTCHours()\n  }\n  increments.d = (date) => {\n    return date.getUTCDate()\n  }\n  increments.D = (date) => {\n    return date.getUTCDay()\n  }\n  increments.w = (date) => {\n    return Math.floor((((date - new Date(date.getUTCFullYear(), 0, 1)) / 1000 / 60 / 60 / 24) + 1) / 7)\n  }\n  increments.m = (date) => {\n    return date.getUTCMonth()\n  }\n  increments.y = (date) => {\n    return date.getUTCFullYear()\n  }\n\n  return increments[increment](this.d)\n}\n\nmodule.exports = getUTC\n","'use strict'\n\n/**\n * Gets the specified increment in local time for the date\n * @param   {String} increment    date increment to get the value of\n * @returns {Object} the value for that increment in local time\n */\nfunction get (increment) {\n  let increments = {}\n\n  increments.z = (date) => {\n    return date.getTimezoneOffset() / 60\n  }\n  increments.l = (date) => {\n    return date.getMilliseconds()\n  }\n  increments.s = (date) => {\n    return date.getSeconds()\n  }\n  increments.t = (date) => {\n    return date.getMinutes()\n  }\n  increments.h = (date) => {\n    return date.getHours()\n  }\n  increments.d = (date) => {\n    return date.getDate()\n  }\n  increments.D = (date) => {\n    return date.getDay()\n  }\n  increments.w = (date) => {\n    return Math.floor((((date - new Date(date.getFullYear(), 0, 1)) / 1000 / 60 / 60 / 24) + 1) / 7)\n  }\n  increments.m = (date) => {\n    return date.getMonth()\n  }\n  increments.y = (date) => {\n    return date.getFullYear()\n  }\n\n  return increments[increment](this.d)\n}\n\nmodule.exports = get\n","'use strict'\n\n/*\n * Takes a gregorian object and checks that it has a valid date.\n * @param {Object}  A gregorian object\n * @return {Boolean}\n */\nfunction reagent () {\n  if (isNaN(this.d.getTime())) {\n    return false\n  }\n  return true\n}\n\nmodule.exports = reagent\n","'use strict'\n\n/*\n * Takes a gregorian object and outputs the date object\n * @param {Object}  A gregorian object\n * @return {Date} the date object it contains\n */\nfunction recite () {\n  return this.d\n}\n\nmodule.exports = recite\n","'use strict'\n\n/**\n * Take a date object and output the capitalized 12-hour clock period (AM/PM)\n * @param   {Date}   date a date object\n * @returns {String} the capitalized 12-hour clock period\n */\nexports.AP = function (date) {\n  const hour = date.getHours()\n  const ampm = (hour < 12) ? 'AM' : 'PM'\n  return ampm\n}\n\n/**\n * Take a date object and output the uncapitalized 12-hour clock period (AM/PM)\n * @param   {Date   date a date object\n * @returns {String} the uncapitalized 12-hour clock period\n */\nexports.ap = function (date) {\n  const hour = date.getHours()\n  const ampm = (hour < 12) ? 'am' : 'pm'\n  return ampm\n}\n\n/**\n * Take a date object and output the abreviated day of the week\n * @param {Date}  a date object\n * @returns {String}  the abbreviated day of the week\n */\nexports.D = function (date) {\n  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n  const dayOfWeek = date.getDay()\n  return days[dayOfWeek]\n}\n\n/**\n * Take a date object and output the day of the week\n * @param {Date}  a date object\n * @returns {String} the full day of the week\n */\nexports.DD = function (date) {\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n  const dayOfWeek = date.getDay()\n  return days[dayOfWeek]\n}\n\n/**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nexports.H = function (date) {\n  const hour = date.getHours()\n  return hour\n}\n\n/**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nexports.HH = function (date) {\n  const hour = date.getHours().toString()\n  return (hour.length < 2) ? '0' + hour : hour\n}\n\n/**\n * Take a date object and output the abbreviated month\n * @param {Date}  a date object\n * @returns {String}  the abbreviated month\n */\nexports.M = function (date) {\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']\n  const month = date.getMonth()\n  return months[month]\n}\n\n/**\n * Take a date object and output the month\n * @param {Date}  a date object\n * @returns {String}  the full month\n */\nexports.MM = function (date) {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n  const month = date.getMonth()\n  return months[month]\n}\n\n/**\n * Take a date object and output the date of the month with no leading zeros (1-31)\n * @param {Date}  a date object\n * @returns {String}  the date of the month with no leading zeros\n */\nexports.d = function (date) {\n  const day = date.getDate().toString()\n  return day\n}\n\n/**\n * Take a date object and output the two-digit date of the month (01-31)\n * @param {Date}  a date object\n * @returns {String}  the two-digit date of the month\n */\nexports.dd = function (date) {\n  const day = date.getDate().toString()\n  return (day.length < 2) ? '0' + day : day\n}\n\n/**\n * Take a date object and output the date of the month with no leading zeros but with the ordinal (1st-31st)\n * @param {Date}  a date object\n * @returns {String}  the date with no leading zeros but with the ordinal\n */\nexports.dt = function (date) {\n  let day = date.getDate()\n  switch (day) {\n    case 1:\n    case 21:\n    case 31:\n      day += 'st'\n      break\n    case 2:\n    case 22:\n      day += 'nd'\n      break\n    case 3:\n    case 23:\n      day += 'rd'\n      break\n    default:\n      day += 'th'\n  }\n  return day\n}\n\n/**\n * Take a date object and outpit the hour with no leading zeros (1-12)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nexports.h = function (date) {\n  let hour = date.getHours()\n  if (hour === 0) hour = 12\n  hour = (hour < 13) ? hour : hour - 12\n  return hour\n}\n\n/**\n * Take a date object and output the two-digit hour (01-12)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit hour\n */\nexports.hh = function (date) {\n  let hour = date.getHours()\n  if (hour === 0) hour = 12\n  hour = (hour < 13) ? hour : hour - 12\n  hour = hour.toString()\n  return (hour.length < 2) ? '0' + hour : hour\n}\n\n/**\n * Take a date object and output the milliseconds with no leading zeros (0-999)\n * @param   {Date} date a date object\n * @returns {String}    the number of milliseconds\n */\nexports.l = function (date) {\n  const milliseconds = date.getMilliseconds().toString()\n  return milliseconds\n}\n\n/**\n * Take a date object and and output the three-digit milliseconds (000-999)\n * @param   {Date}   date a date object\n * @returns {String} the number of milliseconds\n */\nexports.ll = function (date) {\n  let milliseconds = date.getMilliseconds().toString()\n  switch (milliseconds.length) {\n    case 1:\n      milliseconds = '00' + milliseconds\n      break\n    case 2:\n      milliseconds = '0' + milliseconds\n      break\n    default:\n      milliseconds = '' + milliseconds\n      break\n  }\n  return milliseconds\n}\n\n/**\n * Take a date object and output the numeric month (1-12)\n * @param {Date}  a date object\n * @returns {String}  the month with no leading zeros\n */\nexports.m = function (date) {\n  const month = (date.getMonth() + 1).toString()\n  return month\n}\n\n/**\n * Take a date object and output the two-digit month (01-12)\n * @param {Date}  a date object\n * @returns {String}  the two-digit month\n */\nexports.mm = function (date) {\n  let month = (date.getMonth() + 1).toString()\n  return (month.length < 2) ? '0' + month : month\n}\n\n/**\n * Take a date object and outpit the seconds with no leading zeros (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the seconds with no leading zeros\n */\nexports.s = function (date) {\n  const second = date.getSeconds()\n  return second\n}\n\n/**\n * Take a date object and outpit the two-digit seconds (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit seconds\n */\nexports.ss = function (date) {\n  let second = date.getSeconds().toString()\n  return (second.length < 2) ? '0' + second : second\n}\n\n/**\n * Take a date object and output the minutes with no leading zeros\n * @param   {Date} date a date object\n * @returns {String}  the minutes with no leading zeros\n */\nexports.t = function (date) {\n  const minute = date.getMinutes().toString()\n  return minute\n}\n\n/**\n * Take a date object and output the two-digit minutes\n * @param   {Date}   date a date object\n * @returns {String} the two-digit minutes\n */\nexports.tt = function (date) {\n  let minute = date.getMinutes().toString()\n  return (minute.length < 2) ? '0' + minute : minute\n}\n\n/**\n * Take a date object and output the two-digit year\n * @param {Date}  a date object\n * @returns {String}  the two-digit year\n */\nexports.yy = function (date) {\n  return date.getFullYear().toString().substr(2)\n}\n\n/**\n * Take a date object and output the four-digit year\n * @param {Date}  a date object\n * @returns {String}  the four-digit year\n */\nexports.yyyy = function (date) {\n  return date.getFullYear()\n}\n\n/**\n * Take a date object and output the timezone offset (UTC +- 01:00, etc.)\n * @param   {Date}   date a date object\n * @returns {String} the timezone offset\n */\nexports.zz = function (date) {\n  const offset = date.getTimezoneOffset() / 60 * -1\n  return 'UTC ' + offset + ':00'\n}\n\n/**\n * Converts a date object to an ISO string\n * @param   {Date}   date   a date object\n * @param {String}    format optional 'short' to remove the time\n * @returns {String} ISO String including time\n */\nexports.iso = function (date, format) {\n  format = format || null\n  if (format === 'short') return date.toISOString().split('T')[0]\n  return date.toISOString()\n}\n\n/**\n * Converts a date object to a UTC string\n * @param   {Date}   date a date object\n * @param   {String}  format optional 'shart' to remove the time from the output\n * @returns {String} UTC string with or without time\n */\n\nexports.utc = function (date, format) {\n  format = format || null\n  const utc = date.toUTCString()\n  if (format === 'short') {\n    const arr = utc.split(' ')\n    let newArr = []\n\n    for (let i = 0; i < 4; i++) {\n      newArr.push(arr[i])\n    }\n\n    return newArr.join(' ')\n  }\n  return utc\n}\n\n/**\n * Converts a date object to UNIX time (milliseconds from January 1, 1970)\n * @param   {Date}   date a date object\n * @returns {Number} milliseconds from January 1, 1970\n */\n\nexports.unix = function (date) {\n  return Date.parse(date)\n}\n","'use strict'\n\n/**\n * Sets the date or time to the start of the specified increment\n * @param   {String} increment an increment to set\n * @returns {Object} a new gregorian object\n */\nfunction restartUTC (increment) {\n  var increments = {}\n\n  increments.s = (date) => {\n    return new Date(date.setUTCSeconds(date.getUTCSeconds(), 0))\n  }\n  increments.t = (date) => {\n    return new Date(date.setUTCMinutes(date.getUTCMinutes(), 0, 0))\n  }\n  increments.h = (date) => {\n    return new Date(date.setUTCHours(date.getUTCHours(), 0, 0, 0))\n  }\n  increments.d = (date) => {\n    date.setUTCDate(date.getUTCDate())\n    date.setUTCHours(0, 0, 0, 0)\n    return new Date(date)\n  }\n  increments.w = (date) => {\n    date.setUTCDate(date.getUTCDate() - date.getUTCDay())\n    date.setUTCHours(0, 0, 0, 0)\n    return new Date(date)\n  }\n  increments.m = (date) => {\n    date.setUTCMonth(date.getUTCMonth(), 1)\n    date.setUTCHours(0, 0, 0, 0)\n    return new Date(date)\n  }\n  increments.y = (date) => {\n    date.setUTCFullYear(date.getUTCFullYear(), 0, 1)\n    date.setUTCHours(0, 0, 0, 0)\n    return new Date(date)\n  }\n\n  this.d = increments[increment](this.d)\n  return this\n}\n\nmodule.exports = restartUTC\n","'use strict'\n\n/**\n * Sets the date or time to the start of the specified increment\n * @param   {String} increment an increment to set\n * @returns {Object} a new gregorian object\n */\nfunction restart (increment) {\n  let increments = {}\n\n  increments.s = (date) => {\n    return new Date(date.setSeconds(date.getSeconds(), 0))\n  }\n  increments.t = (date) => {\n    return new Date(date.setMinutes(date.getMinutes(), 0, 0))\n  }\n  increments.h = (date) => {\n    return new Date(date.setHours(date.getHours(), 0, 0, 0))\n  }\n  increments.d = (date) => {\n    date.setDate(date.getDate())\n    date.setHours(0, 0, 0, 0)\n    return new Date(date)\n  }\n  increments.w = (date) => {\n    date.setDate(date.getDate() - date.getDay())\n    date.setHours(0, 0, 0, 0)\n    return new Date(date)\n  }\n  increments.m = (date) => {\n    date.setMonth(date.getMonth(), 1)\n    date.setHours(0, 0, 0, 0)\n    return new Date(date)\n  }\n  increments.y = (date) => {\n    date.setFullYear(date.getFullYear(), 0, 1)\n    date.setHours(0, 0, 0, 0)\n    return new Date(date)\n  }\n\n  this.d = increments[increment](this.d)\n  return this\n}\n\nmodule.exports = restart\n","'use strict'\n\n/**\n * Sets the date or time to specified interval\n * @param   {String} increment an increment to set\n * @param {String} value what to set the increment to\n * @returns {Object} a new gregorian object\n */\nfunction setUTC (value, increment) {\n  let increments = {}\n\n  increments.l = (date) => {\n    return new Date(date.setUTCMilliseconds(value))\n  }\n  increments.s = (date) => {\n    return new Date(date.setUTCSeconds(value))\n  }\n  increments.t = (date) => {\n    return new Date(date.setUTCMinutes(value))\n  }\n  increments.h = (date) => {\n    return new Date(date.setUTCHours(value))\n  }\n  increments.d = (date) => {\n    return new Date(date.setUTCDate(value))\n  }\n  increments.D = (date) => {\n    return new Date(date.setUTCDate(date.getUTCDate() - date.getUTCDay() + value))\n  }\n  increments.w = (date) => {\n    let currentDay = date.getUTCDay()\n    let currentMilliseconds = date.getUTCMilliseconds()\n    date.setUTCFullYear(date.getUTCFullYear(), 0, value * 7)\n    let n = currentDay - date.getUTCDay()\n    date.setUTCDate(date.getUTCDate() + n)\n    return new Date(date.setUTCMilliseconds(currentMilliseconds))\n  }\n  increments.m = (date) => {\n    let newMonth = value - 1\n    let newYear = date.getUTCFullYear()\n    let newDate = date.getUTCDate()\n\n    if (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n      return new Date(date.setUTCFullYear(newYear, newMonth + 1, 0))\n    } else {\n      return new Date(date.setUTCFullYear(newYear, newMonth, newDate))\n    }\n  }\n  increments.y = (date) => {\n    let newYear = value\n    let newMonth = date.getUTCMonth()\n    let newDate = date.getUTCDate()\n\n    if (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n      return new Date(date.setUTCFullYear(newYear, newMonth + 1, 0))\n    } else {\n      return new Date(date.setUTCFullYear(newYear, newMonth, newDate))\n    }\n  }\n\n  this.d = increments[increment](this.d)\n  return this\n}\n\nmodule.exports = setUTC\n","'use strict'\n\n/**\n * Sets the date or time to specified interval\n * @param   {String} increment an increment to set\n * @param {String} value what to set the increment to\n * @returns {Object} a new gregorian object\n */\nfunction set (value, increment) {\n  let increments = {}\n\n  increments.l = (date) => {\n    return new Date(date.setMilliseconds(value))\n  }\n  increments.s = (date) => {\n    return new Date(date.setSeconds(value))\n  }\n  increments.t = (date) => {\n    return new Date(date.setMinutes(value))\n  }\n  increments.h = (date) => {\n    return new Date(date.setHours(value))\n  }\n  increments.d = (date) => {\n    return new Date(date.setDate(value))\n  }\n  increments.D = (date) => {\n    return new Date(date.setDate(date.getDate() - date.getDay() + value))\n  }\n  increments.w = (date) => {\n    let currentDay = date.getDay()\n    let currentMilliseconds = date.getMilliseconds()\n    date.setFullYear(date.getFullYear(), 0, value * 7)\n    let n = currentDay - date.getDay()\n    date.setDate(date.getDate() + n)\n    return new Date(date.setMilliseconds(currentMilliseconds))\n  }\n  increments.m = (date) => {\n    let newMonth = value - 1\n    let newYear = date.getFullYear()\n    let newDate = date.getDate()\n\n    if (newDate > new Date(date.setFullYear(newYear, newMonth + 1, 0)).getDate()) {\n      return new Date(date.setFullYear(newYear, newMonth + 1, 0))\n    } else {\n      return new Date(date.setFullYear(newYear, newMonth, newDate))\n    }\n  }\n  increments.y = (date) => {\n    let newYear = value\n    let newMonth = date.getMonth()\n    let newDate = date.getDate()\n\n    if (newDate > new Date(date.setFullYear(newYear, newMonth + 1, 0)).getDate()) {\n      return new Date(date.setFullYear(newYear, newMonth + 1, 0))\n    } else {\n      return new Date(date.setFullYear(newYear, newMonth, newDate))\n    }\n  }\n\n  this.d = increments[increment](this.d)\n  return this\n}\n\nmodule.exports = set\n","'use strict'\n\nvar reformat = require('./reformat')\n\n/**\n * Take a Gregorian object and output the reformatted string\n * See https://github.com/patrickfatrick/gregorian#accepted-formats for details\n * @param {String}  format a string or date object (something that can be converted to a valid date)\n * @returns {String}  the date reformatted into the specified format\n */\nfunction to (format, delimiter) {\n  delimiter = delimiter || '+'\n  const date = this.d\n  const pieces = [\n    'unix', 'utc-short', 'utc', 'iso-short', 'iso', 'yyyy', 'yy', 'DD', 'dd', 'dt', 'D', 'd', 'MM', 'mm', 'M', 'm', 'hh', 'h', 'HH', 'H', 'tt', 't', 'AP', 'ap', 'ss', 's', 'll', 'l', 'zz'\n  ]\n  let converted = format\n\n  pieces.forEach((piece) => {\n    const re = new RegExp('\\\\b' + piece + '\\\\b', 'g')\n    let replacer\n    if (re.test(converted)) {\n      switch (piece) {\n        case 'unix':\n          converted = reformat.unix(date)\n          break\n        case 'utc-short':\n          converted = reformat.utc(date, 'short')\n          break\n        case 'utc':\n          converted = reformat.utc(date)\n          break\n        case 'iso-short':\n          converted = reformat.iso(date, 'short')\n          break\n        case 'iso':\n          converted = reformat.iso(date)\n          break\n        default:\n          replacer = reformat[piece](date)\n          converted = converted.replace(re, replacer)\n      }\n    }\n  })\n\n  if (typeof converted === 'string') {\n    converted = converted.replace(new RegExp('\\\\' + delimiter, 'g'), '')\n  }\n\n  return converted\n}\n\nmodule.exports = to\n"],"sourceRoot":"/source/"}