{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/gregorian.js","gregorian.min.js","src/modules/reform-_ap_.js","src/modules/reform-_dd_.js","src/modules/reform-_ddd_.js","src/modules/reform-_hh_.js","src/modules/reform-_hhh_.js","src/modules/reform-_mm_.js","src/modules/reform-_mmm_.js","src/modules/reform-add.js","src/modules/reform-ap.js","src/modules/reform-date.js","src/modules/reform-dd.js","src/modules/reform-ddd.js","src/modules/reform-hh.js","src/modules/reform-hhh.js","src/modules/reform-iso.js","src/modules/reform-ml.js","src/modules/reform-mll.js","src/modules/reform-mm.js","src/modules/reform-mmm.js","src/modules/reform-ss.js","src/modules/reform-sss.js","src/modules/reform-subtract.js","src/modules/reform-to.js","src/modules/reform-tt.js","src/modules/reform-ttt.js","src/modules/reform-unix.js","src/modules/reform-utc.js","src/modules/reform-yy.js","src/modules/reform-yyyy.js","src/modules/reform-zz.js","src/modules/reform.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","reform","gregorian","./modules/reform",2,"reformAP","date","hour","getHours","ampm",3,"reformDD","days","dayOfWeek","getDay",4,"reformDDD",5,"reformHH",6,"reformHHH","toString",7,"reformMM","months","month","getMonth",8,"reformMMM",9,"add","increment","newMonth","newYear","current","Date","parse","this","d","increments","ms","min","h","w","sum","getFullYear","toISOString","substring","input","to","subtract","./reform-subtract","./reform-to",10,"reformAp",11,"reformDate","obj","TypeError","Object","prototype","isNaN","getTime",12,"reformDd","day","getDate",13,"reformDdd",14,"reformHh",15,"reformHhh",16,"reformISO","format","split",17,"reformMl","milliseconds","getMilliseconds",18,"reformMll",19,"reformMm",20,"reformMmm",21,"reformSs","second","getSeconds",22,23,"./reform-add",24,"converted","search","some","piece","indexOf","reformTo","unix","utc","iso","replacer","replace","AP","ap","DD","DDD","MM","MMM","mm","mmm","dd","ddd","hh","hhh","HH","HHH","ss","sss","ml","mll","tt","ttt","yy","yyyy","zz","./reform-_ap_","./reform-_dd_","./reform-_ddd_","./reform-_hh_","./reform-_hhh_","./reform-_mm_","./reform-_mmm_","./reform-ap","./reform-dd","./reform-ddd","./reform-hh","./reform-hhh","./reform-iso","./reform-ml","./reform-mll","./reform-mm","./reform-mmm","./reform-ss","./reform-sss","./reform-tt","./reform-ttt","./reform-unix","./reform-utc","./reform-yy","./reform-yyyy","./reform-zz",25,"reformTt","minute","getMinutes",26,"reformTtt",27,"reformUnix",28,"reformUTC","toUTCString","arr","newArr","push","join",29,"reformYy","substr",30,"reformYyyy",31,"reformZz","offset","getTimezoneOffset",32,"reformAdd","reformSubtract","./reform-date"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCAA,YAuBA,IAAIK,GAASX,EAAQ,oBAEjBY,GACHD,OAAQA,EAGTD,GAAOJ,QAAWM,ICRfC,mBAAmB,KAAKC,GAAG,SAASd,EAAQU,EAAOJ,GCrBtD,YAOA,SAASS,GAAUC,GAClB,GAAIC,GAAOD,EAAKE,WACZC,EAAe,GAAPF,EAAa,KAAO,IAAK,OAC9BE,GACPT,EAEMJ,QAAUS,ODeXK,GAAG,SAASpB,EAAQU,EAAOJ,GE5BjC,YAOA,SAASe,GAAUL,GAClB,GAAIM,IAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAClDC,EAAYP,EAAKQ,QACrB,OAAOF,GAAKC,GACZb,EAEMJ,QAAUe,OFsBXI,GAAG,SAASzB,EAAQU,EAAOJ,GGnCjC,YAOA,SAASoB,GAAWV,GACnB,GAAIM,IAAQ,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC1EC,EAAYP,EAAKQ,QACrB,OAAOF,GAAKC,GACZb,EAEMJ,QAAUoB,OH6BXC,GAAG,SAAS3B,EAAQU,EAAOJ,GI1CjC,YAOA,SAASsB,GAAUZ,GAClB,GAAIC,GAAOD,EAAKE,UAAW,OACpBD,GACPP,EAEMJ,QAAUsB,OJqCXC,GAAG,SAAS7B,EAAQU,EAAOJ,GKjDjC,YAOA,SAASwB,GAAWd,GACnB,GAAIC,GAAOD,EAAKE,WAAWa,UAC3B,OAAOd,GAAMT,OAAS,EAAK,IAAMS,EAAOA,EACxCP,EAEMJ,QAAUwB,OL4CXE,GAAG,SAAShC,EAAQU,EAAOJ,GMxDjC,YAOA,SAAS2B,GAAUjB,GAClB,GAAIkB,IAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAQ,OACzFC,EAAQnB,EAAKoB,UAAW,OACrBF,GAAOC,GAGfzB,EAAOJ,QAAU2B,ONkDXI,GAAG,SAASrC,EAAQU,EAAOJ,GO/DjC,YAOA,SAASgC,GAAWtB,GACnB,GAAIkB,IAAU,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YACxHC,EAAQnB,EAAKoB,UAAW,OACrBF,GAAOC,GAGfzB,EAAOJ,QAAUgC,OPyDXC,GAAG,SAASvC,EAAQU,EAAOJ,GQtEjC,YAWA,SAASkC,GAAK9C,EAAG+C,GAChB,GAeIC,GACAC,EAhBAC,EAAUC,KAAKC,MAAMC,KAAKC,GAC1BC,GACHC,GAAI,EACJtD,EAAG,IACHuD,IAAK,IACLC,EAAG,KACHJ,EAAG,MACHK,EAAG,QAEAC,EAAMV,EAAWlD,EAAIuD,EAAWR,GAChCzB,EAAO,GAAI6B,MAAKS,EAyBnB,OAlBiB,MAAdb,IACHC,EAAWK,KAAMC,EAAEZ,WAAa1C,EAAK,EAAEiD,EAC7BI,KAAKC,EAAEO,cACbb,EAAW,KACdC,EAAUI,KAAKC,EAAEO,cAAgB,EACjCb,GAAsB,IACtBA,EACUA,EAASX,WAAWW,EACnBA,EAASlC,OAAS,EAAK,IAAMkC,EAAWA,EAAS1B,EACtD,GAAI6B,MAAKF,EAAU,IAAMD,EAAW,IAAMK,KAAKC,EAAEQ,cAAcC,UAAU,KAM/D,MAAdhB,IACHE,EAAUI,KAAKC,EAAEO,cAAgB7D,EAAEsB,EAC5B,GAAI6B,MAAKF,EAAU,IAAMI,KAAKC,EAAEQ,cAAcC,UAAU,MAI/DT,EAAGhC,EACH0C,MAAOX,KAAKW,MACZC,GAAIA,EACJnB,IAAKA,EACLoB,SAAUA,GApDZ,GAAID,GAAK3D,EAAQ,eACb4D,EAAW5D,EAAQ,oBAqDtBU,GAEMJ,QAAUkC,IRwBdqB,oBAAoB,GAAGC,cAAc,KAAKC,IAAI,SAAS/D,EAAQU,EAAOJ,GSlFzE,YAOA,SAAS0D,GAAUhD,GAClB,GAAIC,GAAOD,EAAKE,WACZC,EAAe,GAARF,EAAc,KAAO,IAChC,OAAOE,GAGRT,EAAOJ,QAAU0D,OT4EXC,IAAI,SAASjE,EAAQU,EAAOJ,GUzFlC,YAOA,SAAS4D,GAAYC,GACpB,GAAW,MAAPA,EAAa,KAAM,IAAIC,WAAU,4BACjB,IAApBD,EAAM,GAAItB,MAAKsB,GAC6B,kBAAxCE,OAAOC,UAAUvC,SAASxB,KAAK4D,IAC9BI,MAAMJ,EAAIK,WACb,KAAM,IAAIJ,WAAU,2BAGtB,OAAOD,GAGRzD,EAAOJ,QAAU4D,OV8EXO,IAAI,SAASzE,EAAQU,EAAOJ,GWhGlC,YAOA,SAASoE,GAAU1D,GAClB,GAAI2D,GAAM3D,EAAK4D,UAAU7C,UAAW,OAC7B4C,GACPjE,EAEMJ,QAAUoE,OX2FXG,IAAI,SAAS7E,EAAQU,EAAOJ,GYvGlC,YAOA,SAASwE,GAAW9D,GACnB,GAAI2D,GAAM3D,EAAK4D,UAAU7C,UAAW,OAC5B4C,GAAInE,OAAS,EAAK,IAAMmE,EAAMA,EACtCjE,EAEMJ,QAAUwE,OZkGXC,IAAI,SAAS/E,EAAQU,EAAOJ,Ga9GlC,YAOA,SAAS0E,GAAUhE,GAClB,GAAIC,GAAOD,EAAKE,UAIhB,OAHa,KAATD,IAAYA,EAAO,IACZ,GAAPA,IAAWA,EAAOA,GAClBA,GAAQ,KAAIA,GAAc,IACvBA,EAGRP,EAAOJ,QAAU0E,ObsGXC,IAAI,SAASjF,EAAQU,EAAOJ,GcrHlC,YAOA,SAAS4E,GAAWlE,GACnB,GAAIC,GAAOD,EAAKE,UAIO,OAHV,KAATD,IAAYA,EAAO,IACZ,GAAPA,IAAWA,EAAOA,GAClBA,GAAQ,KAAIA,GAAc,IAC9BA,EAAOA,EAAKc,WACLd,EAAMT,OAAS,EAAK,IAAMS,EAAOA,EAGzCP,EAAOJ,QAAU4E,Od4GXC,IAAI,SAASnF,EAAQU,EAAOJ,Ge5HlC,YAQA,SAAS8E,GAAWpE,EAAMqE,GAGzB,MAFAA,GAASA,GAAU,KAEJ,UAAXA,EAA2BrE,EAAKwC,cAAc8B,MAAM,KAAK,GACtDtE,EAAKwC,cACZ9C,EAEMJ,QAAU8E,OfsHXG,IAAI,SAASvF,EAAQU,EAAOJ,GgBrIlC,YAOA,SAASkF,GAAUxE,GAClB,GAAIyE,GAAezE,EAAK0E,kBAAkB3D,UAC1C,OAAO0D,GAGR/E,EAAOJ,QAAUkF,OhBgIXG,IAAI,SAAS3F,EAAQU,EAAOJ,GiB5IlC,YAOA,SAASsF,GAAU5E,GAClB,GAAIyE,GAAezE,EAAK0E,kBAAkB3D,UAAW,QAC7C0D,EAAajF,QACpB,IAAK,GACJiF,EAAe,KAAOA,CAAa,MAC7B,KACF,GACJA,EAAe,IAAMA,CAAa,MAC5B,SAENA,EAAeA,EAGjB,MAAOA,GAGR/E,EAAOJ,QAAUsF,OjB4HXC,IAAI,SAAS7F,EAAQU,EAAOJ,GkBnJlC,YAOA,SAASwF,GAAU9E,GAClB,GAAImB,IAASnB,EAAKoB,WAAa,GAAGL,UAAW,OACtCI,GACPzB,EAEMJ,QAAUwF,OlB8IXC,IAAI,SAAS/F,EAAQU,EAAOJ,GmB1JlC,YAOA,SAAS0F,GAAWhF,GACnB,GAAImB,IAASnB,EAAKoB,WAAa,GAAGL,UAClC,OAAQI,GAAM3B,OAAS,EAAK,IAAM2B,EAAQA,EAC1CzB,EAEMJ,QAAU0F,OnBqJXC,IAAI,SAASjG,EAAQU,EAAOJ,GoBjKlC,YAOA,SAAS4F,GAAUlF,GAClB,GAAImF,GAASnF,EAAKoF,YAClB,OAAOD,GAGRzF,EAAOJ,QAAU4F,OpB4JXG,IAAI,SAASrG,EAAQU,EAAOJ,GqBxKlC,YAOA,SAAS4F,GAAUlF,GAClB,GAAImF,GAASnF,EAAKoF,aAAarE,UAAW,OACnCoE,GAAQ3F,OAAS,EAAK,IAAM2F,EAASA,EAG7CzF,EAAOJ,QAAU4F,OrBmKXI,IAAI,SAAStG,EAAQU,EAAOJ,GsB/KlC,YAWA,SAASsD,GAASlE,EAAG+C,GACpB,GAcIE,GACAD,EAfAE,EAAUC,KAAKC,MAAMC,KAAKC,GAC1BC,GACHC,GAAI,EACJtD,EAAG,IACHuD,IAAK,IACLC,EAAG,KACHJ,EAAG,MACHK,EAAG,QAEAC,EAAMV,EAAWlD,EAAIuD,EAAWR,GAChCzB,EAAO,GAAI6B,MAAKS,EAuBpB,OAjBkB,MAAdb,IACHC,EAAYK,KAAKC,EAAEZ,WAAa1C,EAAK,EACrCiD,EAAUI,KAAKC,EAAEO,cACF,EAAXb,IACHC,EAAUI,KAAKC,EAAEO,cAAgB,EAAEb,GACb,IACtBA,EACUA,EAASX,WAAWW,EACpBA,EAAUlC,OAAS,EAAK,IAAMkC,EAAWA,EAAS1B,EACtD,GAAI6B,MAAKF,EAAU,IAAMD,EAAW,IAAMK,KAAKC,EAAEQ,cAAcC,UAAU,KAG/D,MAAdhB,IACHE,EAAUI,KAAKC,EAAEO,cAAgB7D,EACjCsB,EAAO,GAAI6B,MAAKF,EAAU,IAAMI,KAAKC,EAAEQ,cAAcC,UAAU,MAI/DT,EAAGhC,EACH0C,MAAOX,KAAKW,MACZC,GAAIA,EACJnB,IAAKA,EACLoB,SAAUA,GAhDZ,GAAID,GAAK3D,EAAQ,eACbwC,EAAMxC,EAAQ,eAmDlBU,GAAOJ,QAAUsD,ItBmId2C,eAAe,EAAEzC,cAAc,KAAK0C,IAAI,SAASxG,EAAQU,EAAOJ,GuBzLnE,YAmCA,SAASqD,GAAI0B,GACZ,GAAIrE,GAAO+B,KAAKC,EACZyD,EAAYpB,EACZqB,GACH,OACA,YACA,MACA,YACA,MACA,OACA,KACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,MACA,KACA,MACA,KACA,KAgCD,OA/BEA,GAEKC,KAAK,SAASC,GAEpB,GAAiC,KAA7BH,EAAUI,QAAQD,GACrB,OAAQA,GACP,IAAK,OAC4B,MAAhCH,GAAYK,EAASC,KAAK/F,IACnB,CAAK,KACR,YACoC,MAAxCyF,GAAYK,EAASE,IAAIhG,EAAM,UACxB,CACR,KAAK,MAEJ,MADAyF,GAAYK,EAASE,IAAIhG,IAClB,CACR,KAAK,YAEJ,MADAyF,GAAYK,EAASG,IAAIjG,EAAM,UACxB,CAAK,KACR,MAEJ,MADAyF,GAAYK,EAASG,IAAIjG,IAClB,CAAK,SAIZ,GAAIkG,GAAWJ,EAASF,GAAO5F,GAAMe,UAErC,OAFgD0E,GACpCA,EAAUU,QAAQP,EAAOM,IAC9B,KAKJT,EAlGK,GAETK,KAAcA,GACTM,GAAKpH,EAAQ,iBAAiB8G,EAC9BO,GAAKrH,EAAQ,eAAe8G,EAC5BQ,GAAKtH,EAAQ,iBACtB8G,EAASS,IAAMvH,EAAQ,kBACvB8G,EAASU,GAAKxH,EAAQ,iBACtB8G,EAASW,IAAMzH,EAAQ,kBACvB8G,EAASY,GAAK1H,EAAQ,eACtB8G,EAASa,IAAM3H,EAAQ,gBACvB8G,EAASc,GAAK5H,EAAQ,eACtB8G,EAASe,IAAM7H,EAAQ,gBACvB8G,EAASgB,GAAK9H,EAAQ,eAAe8G,EAC5BiB,IAAM/H,EAAQ,gBAAgB8G,EAC9BkB,GAAKhI,EAAQ,iBAAiB8G,EAC9BmB,IAAMjI,EAAQ,kBAAkB8G,EAChCoB,GAAKlI,EAAQ,eACtB8G,EAASqB,IAAMnI,EAAQ,gBACvB8G,EAASsB,GAAKpI,EAAQ,eACtB8G,EAASuB,IAAMrI,EAAQ,gBACvB8G,EAASwB,GAAKtI,EAAQ,eAAe8G,EAC5ByB,IAAMvI,EAAQ,gBAAgB8G,EAC9B0B,GAAKxI,EAAQ,eAAe8G,EAC5B2B,KAAOzI,EAAQ,iBAAiB8G,EAChC4B,GAAK1I,EAAQ,eAAe8G,EAC5BC,KAAO/G,EAAQ,iBAAiB8G,EAChCE,IAAMhH,EAAQ,gBAAgB8G,EAC9BG,IAAMjH,EAAQ,gBAyEvBU,EAAOJ,QAAUqD,IvB2HdgF,gBAAgB,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAEC,cAAc,GAAGC,cAAc,GAAGC,eAAe,GAAGC,cAAc,GAAGC,eAAe,GAAGC,eAAe,GAAGC,cAAc,GAAGC,eAAe,GAAGC,cAAc,GAAGC,eAAe,GAAGC,cAAc,GAAGC,eAAe,GAAGC,cAAc,GAAGC,eAAe,GAAGC,gBAAgB,GAAGC,eAAe,GAAGC,cAAc,GAAGC,gBAAgB,GAAGC,cAAc,KAAKC,IAAI,SAASrK,EAAQU,EAAOJ,GwBhOjf,YAOA,SAASgK,GAAUtJ,GAClB,GAAIuJ,GAASvJ,EAAKwJ,aAAazI,UAAW,OACnCwI,GACP7J,EAEMJ,QAAUgK,OxB2NXG,IAAI,SAASzK,EAAQU,EAAOJ,GyBvOlC,YAOA,SAASoK,GAAW1J,GACnB,GAAIuJ,GAASvJ,EAAKwJ,aAAazI,UAAW,OACnCwI,GAAQ/J,OAAS,EAAK,IAAM+J,EAASA,EAG7C7J,EAAOJ,QAAUoK,OzBkOXC,IAAI,SAAS3K,EAAQU,EAAOJ,G0B9OlC,YAQA,SAASsK,GAAY5J,GACpB,MAAO6B,MAAKC,MAAM9B,GAClBN,EAEMJ,QAAUsK,O1ByOXC,IAAI,SAAS7K,EAAQU,EAAOJ,G2BrPlC,YASA,SAASwK,GAAW9J,EAAMqE,GACzBA,EAASA,GAAU,IACnB,IAAI2B,GAAMhG,EAAK+J,aAAc,IACd,UAAX1F,EAAoB,CAEP,IAEX,GAHD2F,GAAMhE,EAAI1B,MAAM,KAChB2F,KAEKhL,EAAI,EAAO,EAAJA,EAAOA,IACtBgL,EAAOC,KAAKF,EAAI/K,GAChB,OAEMgL,GAAOE,KAAK,KACnB,MACMnE,GACPtG,EAEMJ,QAAUwK,O3BoOXM,IAAI,SAASpL,EAAQU,EAAOJ,G4B7PlC,YAOA,SAAS+K,GAAUrK,GAClB,MAAOA,GAAKuC,cAAcxB,WAAWuJ,OAAO,GAC5C5K,EAEMJ,QAAU+K,O5ByPXE,IAAI,SAASvL,EAAQU,EAAOJ,G6BpQlC,YAOA,SAASkL,GAAYxK,GACpB,MAAOA,GAAKuC,cACZ7C,EAEMJ,QAAUkL,O7BgQXC,IAAI,SAASzL,EAAQU,EAAOJ,G8B3QlC,YAOA,SAASoL,GAAU1K,GAClB,GAAI2K,GAAS3K,EAAK4K,oBAAsB,GAAK,EAC7C,OAAO,OAASD,EAAS,MACzBjL,EAEMJ,QAAUoL,O9BsQXG,IAAI,SAAS7L,EAAQU,EAAOJ,G+BlRlC,YAYA,SAASK,GAAQwD,GAChB,GAAInD,GAAOkD,EAAWC,EAAK,QAE1BnB,EAAGhC,EACH0C,MAAOS,EACPR,GAAImD,EACJtE,IAAKsJ,EACLlI,SAAUmI,GAnBC,GAET7H,GAAalE,EAAQ,iBACrB8G,EAAW9G,EAAQ,eACnB8L,EAAY9L,EAAQ,gBACpB+L,EAAiB/L,EAAQ,oBAgB5BU,GAEMJ,QAAUK,I/BkQd4F,eAAe,EAAEyF,gBAAgB,GAAGnI,oBAAoB,GAAGC,cAAc,UAAU","file":"gregorian.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n/**\n * Gregorian\n * Author: Patrick Fricano\n * https://www.github.com/patrickfatrick/gregorian\n * \n * Take a user-input date in any format and convert it to several formats\n * Also serves as a wrapper for common JS date methods like toUTCString and toISOString\n * toLocaleDateString is currently not well-supported especially on mobile, so we're avoiding it.\n * \n * gregorian.reform.to('__FORMAT STRING__') string with formatting options specified with keyword strings\n * \t\tSee ./modules/reform-to.js for more information on this\n * gregorian.reform(__OBJECT__).to('iso') ISO string including time such as '2015-09-12T23:06:19Z'\n * \t\t`iso-short` can be added to reduce the string to just the date, like '2015-09-12'\n * gregorian.reform(__OBJECT__).to('utc') UTC string such as 'Sat, 12 Sep 2015 06:00:00 GMT'\n * \t\t`utc-short` can be added to reduce the string to just the date, like 'Sat, 12 Sep 2015'\n * gregorian.reform(__OBJECT__).to('unix') milliseconds since January 1, 1970\n * gregorian.reform(__OBJECT__).add(_NUMBER__, __INCREMENT_STRING__) add time\n * gregorian.reform(__OBJECT__).subtract(_NUMBER__, __INCREMENT_STRING__) subtract time\n */\n\n\nvar reform = require('./modules/reform');\n\nvar gregorian = {\n\treform: reform\n};\n\nmodule.exports =  gregorian;",null,"'use strict';\n\n/**\n * Take a date object and output the capitalized 12-hour clock period (AM/PM)\n * @param   {Date}   date a date object\n * @returns {String} the capitalized 12-hour clock period \n */\nfunction reformAP (date) {\n\tvar hour = date.getHours();\n\tvar ampm = (hour < 12) ? 'AM' : 'PM';\n\treturn ampm;\n}\n\nmodule.exports = reformAP;","'use strict';\n\n/**\n * Take a date object and output the abreviated day of the week\n * @param {Date} \ta date object\n * @returns {Number}\tthe abbreviated day of the week\n */\nfunction reformDD (date) {\n\tvar days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\tvar dayOfWeek = date.getDay();\n\treturn days[dayOfWeek];\n}\n\nmodule.exports = reformDD;","'use strict';\n\n/**\n * Take a date object and output the day of the week\n * @param {Date} \ta date object\n * @returns {String} the full day of the week\n */\nfunction reformDDD (date) {\n\tvar days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\tvar dayOfWeek = date.getDay();\n\treturn days[dayOfWeek];\n}\n\nmodule.exports = reformDDD;","'use strict';\n\n/**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nfunction reformHH (date) {\n\tvar hour = date.getHours();\n\treturn hour;\n}\n\nmodule.exports = reformHH;","'use strict';\n\n/**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nfunction reformHHH (date) {\n\tvar hour = date.getHours().toString();\n\treturn (hour.length < 2) ? '0' + hour : hour;\n}\n\nmodule.exports = reformHHH;","'use strict';\n\n/**\n * Take a date object and output the abbreviated month\n * @param {Date} \ta date object\n * @returns {String}\tthe abbreviated month\n */\nfunction reformMM (date) {\n\tvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov',  'Dec'];\n\tvar month = date.getMonth();\n\treturn months[month];\n}\n\nmodule.exports = reformMM;","'use strict';\n\n/**\n * Take a date object and output the month\n * @param {Date} \ta date object\n * @returns {String}\tthe full month\n */\nfunction reformMMM (date) {\n\tvar months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\tvar month = date.getMonth();\n\treturn months[month];\n}\n\nmodule.exports = reformMMM;","'use strict';\n\nvar to = require('./reform-to');\nvar subtract = require('./reform-subtract');\n\n/**\n * Adds specified increments to a gregorian object\n * @param   {Number} n         a number to multiply the increment by\n * @param   {String} increment an increment to add\n * @returns {Object} a new gregorian object\n */\nfunction add (n, increment) {\n\tvar current = Date.parse(this.d);\n\tvar increments = {\n\t\tms: 1,\n\t\ts: 1000,\n\t\tmin: 60000,\n\t\th: 3600000,\n\t\td: 86400000,\n\t\tw: 604800000\n\t};\n\tvar sum = current + (n * increments[increment]);\n\tvar date = new Date(sum);\n\t\n\t/**\n\t * Handle month so that you always wind up on the same day of the month\n\t */\n\tvar newMonth;\n\tvar newYear;\n\tif (increment === 'm') {\n\t\tnewMonth = (this.d.getMonth() + n) + 1;\n\t\tnewYear = this.d.getFullYear();\n\t\tif (newMonth > 12) {\n\t\t\tnewYear = this.d.getFullYear() + 1;\n\t\t\tnewMonth = newMonth - 12;\n\t\t}\n\t\tnewMonth = newMonth.toString();\n\t\tnewMonth = (newMonth.length < 2) ? '0' + newMonth : newMonth;\n\t\tdate = new Date(newYear + '-' + newMonth + '-' + this.d.toISOString().substring(8));\n\t}\n\t\n\t/**\n\t * Handle year so that you always wind up on the same day of the year with leap years\n\t */\n\tif (increment === 'y') {\n\t\tnewYear = this.d.getFullYear() + n;\n\t\tdate = new Date(newYear + '-' + this.d.toISOString().substring(5));\n\t}\n\t\n\treturn {\n\t\td: date,\n\t\tinput: this.input,\n\t\tto: to,\n\t\tadd: add,\n\t\tsubtract: subtract\n\t};\n}\n\nmodule.exports = add;","'use strict';\n\n/**\n * Take a date object and output the uncapitalized 12-hour clock period (AM/PM)\n * @param   {Date}   date a date object\n * @returns {String} the uncapitalized 12-hour clock period \n */\nfunction reformAp (date) {\n\tvar hour = date.getHours();\n\tvar ampm = (hour < 12) ? 'am' : 'pm';\n\treturn ampm;\n}\n\nmodule.exports = reformAp;","'use strict';\n\n/**\n * Convert the object passed to a date and test its validity\n * @param {Object} \tobj any object\n * @returns {Date}\tif string passes the test, return the date object\n */\nfunction reformDate (obj) {\n\tif (obj == null) throw new TypeError('This is null or undefined');\n\tobj = new Date(obj);\n\tif (Object.prototype.toString.call(obj) === '[object Date]') {\n\t\tif (isNaN(obj.getTime())) {\n\t\t\tthrow new TypeError('This is not a valid date');\n\t\t}\n\t}\n\treturn obj;\n}\n\nmodule.exports = reformDate;","'use strict';\n\n/**\n * Take a date object and output the date of the month with no leading zeros (1-31)\n * @param {Date} \ta date object\n * @returns {Number}\tthe date of the month with no leading zeros\n */\nfunction reformDd (date) {\n\tvar day = date.getDate().toString();\n\treturn day;\n}\n\nmodule.exports = reformDd;","'use strict';\n\n/**\n * Take a date object and output the two-digit date of the month (01-31)\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit date of the month\n */\nfunction reformDdd (date) {\n\tvar day = date.getDate().toString();\n\treturn (day.length < 2) ? '0' + day : day;\n}\n\nmodule.exports = reformDdd;","'use strict';\n\n/**\n * Take a date object and outpit the hour with no leading zeros (1-12)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nfunction reformHh (date) {\n\tvar hour = date.getHours();\n\tif (hour === 0) hour = 12;\n\tif (hour < 13) hour = hour;\n\tif (hour >= 13) hour = hour - 12;\n\treturn hour;\n}\n\nmodule.exports = reformHh;","'use strict';\n\n/**\n * Take a date object and output the two-digit hour (01-12)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit hour\n */\nfunction reformHhh (date) {\n\tvar hour = date.getHours();\n\tif (hour === 0) hour = 12;\n\tif (hour < 13) hour = hour;\n\tif (hour >= 13) hour = hour - 12;\n\thour = hour.toString();\n\treturn (hour.length < 2) ? '0' + hour : hour;\n}\n\nmodule.exports = reformHhh;","'use strict';\n\n/**\n * Converts a date object to an ISO string\n * @param   {Date}   date   a date object\n * @param {String}\t\tformat optional 'short' to remove the time\n * @returns {String} ISO String including time\n */\nfunction reformISO (date, format) {\n\tformat = format || null;\n\t//console.log('iso function date: ' + date);\n\tif (format === 'short') return date.toISOString().split('T')[0];\n\treturn date.toISOString();\n}\n\nmodule.exports = reformISO;","'use strict';\n\n/**\n * Take a date object and output the milliseconds with no leading zeros (0-999)\n * @param   {Date} date a date object\n * @returns {String}    the number of milliseconds\n */\nfunction reformMl (date) {\n\tvar milliseconds = date.getMilliseconds().toString();\n\treturn milliseconds;\n}\n\nmodule.exports = reformMl;","'use strict';\n\n/**\n * Take a date object and and output the three-digit milliseconds (000-999)\n * @param   {Date}   date a date object\n * @returns {String} the number of milliseconds\n */\nfunction reformMll(date) {\n\tvar milliseconds = date.getMilliseconds().toString();\n\tswitch (milliseconds.length) {\n\t\tcase 1:\n\t\t\tmilliseconds = '00' + milliseconds;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmilliseconds = '0' + milliseconds;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmilliseconds = milliseconds;\n\t\t\tbreak;\n\t}\n\treturn milliseconds;\n}\n\nmodule.exports = reformMll;","'use strict';\n\n/**\n * Take a date object and output the numeric month (1-12)\n * @param {Date} \ta date object\n * @returns {Number}\tthe month with no leading zeros\n */\nfunction reformMm (date) {\n\tvar month = (date.getMonth() + 1).toString();\n\treturn month;\n}\n\nmodule.exports = reformMm;","'use strict';\n\n/**\n * Take a date object and output the two-digit month (01-12)\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit month\n */\nfunction reformMmm (date) {\n\tvar month = (date.getMonth() + 1).toString();\n\treturn (month.length < 2) ? '0' + month : month;\n}\n\nmodule.exports = reformMmm;","'use strict';\n\n/**\n * Take a date object and outpit the seconds with no leading zeros (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the seconds with no leading zeros\n */\nfunction reformSs (date) {\n\tvar second = date.getSeconds();\n\treturn second;\n}\n\nmodule.exports = reformSs;","'use strict';\n\n/**\n * Take a date object and outpit the two-digit seconds (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit seconds\n */\nfunction reformSs (date) {\n\tvar second = date.getSeconds().toString();\n\treturn (second.length < 2) ? '0' + second : second;\n}\n\nmodule.exports = reformSs;","'use strict';\n\nvar to = require('./reform-to');\nvar add = require('./reform-add');\n\n/**\n * Subtracts specified increments to a gregorian object\n * @param   {Number} n         a number to multiply the increment by\n * @param   {String} increment an increment to subtract\n * @returns {Object} a new gregorian object\n */\nfunction subtract(n, increment) {\n\tvar current = Date.parse(this.d);\n\tvar increments = {\n\t\tms: 1,\n\t\ts: 1000,\n\t\tmin: 60000,\n\t\th: 3600000,\n\t\td: 86400000,\n\t\tw: 604800000\n\t};\n\tvar sum = current - (n * increments[increment]);\n\tvar date = new Date(sum);\n\t/**\n\t * Handle month so that you always wind up on the same day of the month\n\t */\n\tvar newYear;\n\tvar newMonth;\n\tif (increment === 'm') {\n\t\tnewMonth = (this.d.getMonth() - n) + 1;\n\t\tnewYear = this.d.getFullYear();\n\t\tif (newMonth < 0) {\n\t\t\tnewYear = this.d.getFullYear() - 1;\n\t\t\tnewMonth = newMonth + 12;\n\t\t}\n\t\tnewMonth = newMonth.toString();\n\t\tnewMonth = (newMonth.length < 2) ? '0' + newMonth : newMonth;\n\t\tdate = new Date(newYear + '-' + newMonth + '-' + this.d.toISOString().substring(8));\n\t}\n\t\n\tif (increment === 'y') {\n\t\tnewYear = this.d.getFullYear() - n;\n\t\tdate = new Date(newYear + '-' + this.d.toISOString().substring(5));\n\t}\n\t\t\n\treturn {\n\t\td: date,\n\t\tinput: this.input,\n\t\tto: to,\n\t\tadd: add,\n\t\tsubtract: subtract\n\t};\n}\n\nmodule.exports = subtract;","'use strict';\n\nvar reformTo = {};\nreformTo.AP = require('./reform-_ap_');\nreformTo.ap = require('./reform-ap');\nreformTo.DD = require('./reform-_dd_');\nreformTo.DDD = require('./reform-_ddd_');\nreformTo.MM = require('./reform-_mm_');\nreformTo.MMM = require('./reform-_mmm_');\nreformTo.mm = require('./reform-mm');\nreformTo.mmm = require('./reform-mmm');\nreformTo.dd = require('./reform-dd');\nreformTo.ddd = require('./reform-ddd');\nreformTo.hh = require('./reform-hh');\nreformTo.hhh = require('./reform-hhh');\nreformTo.HH = require('./reform-_hh_');\nreformTo.HHH = require('./reform-_hhh_');\nreformTo.ss = require('./reform-ss');\nreformTo.sss = require('./reform-sss');\nreformTo.ml = require('./reform-ml');\nreformTo.mll = require('./reform-mll');\nreformTo.tt = require('./reform-tt');\nreformTo.ttt = require('./reform-ttt');\nreformTo.yy = require('./reform-yy');\nreformTo.yyyy = require('./reform-yyyy');\nreformTo.zz = require('./reform-zz');\nreformTo.unix = require('./reform-unix');\nreformTo.utc = require('./reform-utc');\nreformTo.iso = require('./reform-iso');\n\n/**\n * Take a Gregorian object and output the reformatted string\n * @param {String} \tformat a string or date object (something that can be converted to a valid date)\n * @returns {String}\tthe date reformatted into the specified format\n */\nfunction to (format) {\n\tvar date = this.d;\n\tvar converted = format;\n\tvar search = [\n\t\t'unix', // The number of milliseconds passed since January 1, 1970\n\t\t'utc-short', // shortened UTC string (no time included)\n\t\t'utc', // UTC string\n\t\t'iso-short', // shortened ISO string (no time included)\n\t\t'iso', // ISO string \n\t\t'yyyy', // four-digit year 2015\n\t\t'yy', // two-digit year (20)15\n\t\t'DDD', // full day of the week Sunday-Saturday\n\t\t'ddd', // two-digit date of the month 01-31\n\t\t'DD', // abbreviated day of the week Sun-Sat\n\t\t'dd', // date of the month with no leading zeros 1-31\n\t\t'MMM', // full month January-December\n\t\t'mmm', // two-digit month 00-12\n\t\t'MM', // abbreviated month Jan-Dec\n\t\t'mm', // month with no leading zeros 1-12\n\t\t'hhh', // two-digit hours 00-12\n\t\t'hh', // hour with no leading zeros 1-12\n\t\t'HHH', // two-digit 24-hour clock hours 00-24\n\t\t'HH', // 24-hour clock hour with no leading zeros 0-24\n\t\t'ttt', // two-digit minutes 00-59\n\t\t'tt', // minutes with no leading zeros 0-59\n\t\t'AP', // AM or PM\n\t\t'ap', // am or pm\n\t\t'sss', // two-digit seconds 00-59\n\t\t'ss', // seconds with no leading zeros 0-59\n\t\t'mll', // milliseconds 000-999\n\t\t'ml', // milliseconds with no leading zeros 0-999\n\t\t'zz' // timezone offset UTC -6:00\n\t];\n\n\tsearch.some(function(piece) {\n\t\t//console.log(converted + ' vs ' + piece);\n\t\tif (converted.indexOf(piece) !== -1) {\n\t\t\tswitch (piece) {\n\t\t\t\tcase 'unix':\n\t\t\t\t\tconverted = reformTo.unix(date);\n\t\t\t\t\treturn true;\n\t\t\t\tcase 'utc-short':\n\t\t\t\t\tconverted = reformTo.utc(date, 'short');\n\t\t\t\t\treturn true;\n\t\t\t\tcase 'utc':\n\t\t\t\t\tconverted = reformTo.utc(date);\n\t\t\t\t\treturn true;\n\t\t\t\tcase 'iso-short':\n\t\t\t\t\tconverted = reformTo.iso(date, 'short');\n\t\t\t\t\treturn true;\n\t\t\t\tcase 'iso':\n\t\t\t\t\tconverted = reformTo.iso(date);\n\t\t\t\t\treturn true;\n\t\t\t\tdefault:\n\t\t\t\t\t// console.log('Search string is: ' + piece);\n\t\t\t\t\t// console.log('Converted string is: ' + to[piece](date));\n\t\t\t\t\tvar replacer = reformTo[piece](date).toString();\n\t\t\t\t\tconverted = converted.replace(piece, replacer);\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t});\n\t// console.log(converted);\n\treturn converted;\n}\n\nmodule.exports = to;\n","'use strict';\n\n/**\n * Take a date object and output the minutes with no leading zeros\n * @param   {Date} date a date object\n * @returns {String}  the minutes with no leading zeros\n */\nfunction reformTt (date) {\n\tvar minute = date.getMinutes().toString();\n\treturn minute;\n}\n\nmodule.exports = reformTt;","'use strict';\n\n/**\n * Take a date object and output the two-digit minutes\n * @param   {Date}   date a date object\n * @returns {String} the two-digit minutes\n */\nfunction reformTtt (date) {\n\tvar minute = date.getMinutes().toString();\n\treturn (minute.length < 2) ? '0' + minute : minute;\n}\n\nmodule.exports = reformTtt;","'use strict';\n\n/**\n * Converts a date object to UNIX time (milliseconds from January 1, 1970)\n * @param   {Date}   date a date object\n * @returns {Number} milliseconds from January 1, 1970\n */\n\nfunction reformUnix (date) {\n\treturn Date.parse(date);\n}\n\nmodule.exports = reformUnix;","'use strict';\n\n/**\n * Converts a date object to a UTC string\n * @param   {Date}   date a date object\n * @param \t{String}\tformat optional 'shart' to remove the time from the output\n * @returns {String} UTC string with or without time\n */\n\nfunction reformUTC (date, format) {\n\tformat = format || null;\n\tvar utc = date.toUTCString();\n\tif (format === 'short') {\n\t\tvar arr = utc.split(' ');\n\t\tvar newArr = [];\n\n\t\tfor (var i = 0; i < 4; i++) {\n\t\t\tnewArr.push(arr[i]);\n\t\t}\n\n\t\treturn newArr.join(' ');\n\t}\n\treturn utc;\n}\n\nmodule.exports = reformUTC;","'use strict';\n\n/**\n * Take a date object and output the two-digit year\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit year\n */\nfunction reformYy (date) {\n\treturn date.getFullYear().toString().substr(2);\n}\n\nmodule.exports = reformYy;","'use strict';\n\n/**\n * Take a date object and output the four-digit year\n * @param {Date} \ta date object\n * @returns {Number}\tthe four-digit year\n */\nfunction reformYyyy (date) {\n\treturn date.getFullYear();\n}\n\nmodule.exports = reformYyyy;","'use strict';\n\n/**\n * Take a date object and output the timezone offset (UTC +- 01:00, etc.)\n * @param   {Date}   date a date object\n * @returns {String} the timezone offset \n */\nfunction reformZz (date) {\n\tvar offset = date.getTimezoneOffset() / 60 * -1;\n\treturn 'UTC ' + offset + ':00';\n}\n\nmodule.exports = reformZz;","'use strict';\n\nvar reformDate = require('./reform-date');\nvar reformTo = require('./reform-to');\nvar reformAdd = require('./reform-add');\nvar reformSubtract = require('./reform-subtract');\n\n/**\n * Take a string or date object and convert it into a gregorian object\n * @param   {Object} obj A string or date object that can be parsed into a date\n * @returns {Object} Gregorian object\n */\nfunction reform (obj) {\n\tvar date = reformDate(obj);\n\treturn {\n\t\td: date,\n\t\tinput: obj,\n\t\tto: reformTo,\n\t\tadd: reformAdd,\n\t\tsubtract: reformSubtract\n\t};\n}\n\nmodule.exports = reform;"],"sourceRoot":"/source/"}