{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/gregorian.js","src/modules/reform-_ap_.js","src/modules/reform-_dd_.js","src/modules/reform-_ddd_.js","src/modules/reform-_mm_.js","src/modules/reform-_mmm_.js","src/modules/reform-add.js","src/modules/reform-ap.js","src/modules/reform-date.js","src/modules/reform-dd.js","src/modules/reform-ddd.js","src/modules/reform-hh.js","src/modules/reform-hhh.js","src/modules/reform-iso.js","src/modules/reform-ml.js","src/modules/reform-mll.js","src/modules/reform-mm.js","src/modules/reform-mmm.js","src/modules/reform-subtract.js","src/modules/reform-to.js","src/modules/reform-tt.js","src/modules/reform-ttt.js","src/modules/reform-unix.js","src/modules/reform-utc.js","src/modules/reform-yy.js","src/modules/reform-yyyy.js","src/modules/reform-zz.js","src/modules/reform.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;ACoBA,IAAI,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;;AAEzC,IAAI,SAAS,GAAG;AACf,QAAM,EAAE,MAAM;CACd,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAI,SAAS,CAAC;;;;;;;;;;ACrB5B,SAAS,QAAQ,CAAE,IAAI,EAAE;AACxB,MAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AAC3B,MAAI,IAAI,GAAG,AAAC,IAAI,GAAG,EAAE,GAAI,IAAI,GAAG,IAAI,CAAC;AACrC,SAAO,IAAI,CAAC;CACZ;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;;;;;;;;;;ACN1B,SAAS,QAAQ,CAAE,IAAI,EAAE;AACxB,MAAI,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAC7D,MAAI,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AAC9B,SAAO,IAAI,CAAC,SAAS,CAAC,CAAC;CACvB;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;;;;;;;;;;ACN1B,SAAS,SAAS,CAAE,IAAI,EAAE;AACzB,MAAI,IAAI,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC1F,MAAI,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AAC9B,SAAO,IAAI,CAAC,SAAS,CAAC,CAAC;CACvB;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;;;;;;;;;;ACN3B,SAAS,QAAQ,CAAE,IAAI,EAAE;AACxB,MAAI,MAAM,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAG,KAAK,CAAC,CAAA;AACnG,MAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AAC5B,SAAO,MAAM,CAAC,KAAK,CAAC,CAAC;CACrB;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;;;;;;;;;;ACN1B,SAAS,SAAS,CAAE,IAAI,EAAE;AACzB,MAAI,MAAM,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC,CAAA;AACvI,MAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AAC5B,SAAO,MAAM,CAAC,KAAK,CAAC,CAAC;CACrB;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;;;;;ACX3B,IAAI,QAAQ,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;;;;;;;;AAQtC,SAAS,GAAG,CAAE,CAAC,EAAE,SAAS,EAAE;AAC3B,KAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjC,KAAI,UAAU,GAAG;AAChB,IAAE,EAAE,CAAC;AACL,GAAC,EAAE,IAAI;AACP,KAAG,EAAE,KAAK;AACV,GAAC,EAAE,OAAO;AACV,GAAC,EAAE,QAAQ;AACX,GAAC,EAAE,SAAS;AACZ,GAAC,EAAE,UAAU;AACb,GAAC,EAAE,WAAW;EACd,CAAA;AACD,KAAI,GAAG,GAAG,OAAO,GAAI,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,AAAC,CAAC;AAChD,KAAI,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AACzB,QAAO;AACN,GAAC,EAAE,IAAI;AACP,OAAK,EAAE,IAAI,CAAC,KAAK;AACjB,IAAE,EAAE,QAAQ;AACZ,KAAG,EAAE,GAAG;EACR,CAAA;CACD;;AAED,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;;;;;;;;;;ACzBrB,SAAS,QAAQ,CAAE,IAAI,EAAE;AACxB,MAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AAC3B,MAAI,IAAI,GAAG,AAAC,IAAI,GAAG,EAAE,GAAI,IAAI,GAAG,IAAI,CAAC;AACrC,SAAO,IAAI,CAAC;CACZ;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;;;;;;;;;;ACN1B,SAAS,UAAU,CAAE,GAAG,EAAE;AACzB,KAAI,GAAG,IAAI,IAAI,EAAE,MAAM,IAAI,SAAS,CAAC,2BAA2B,CAAC,CAAC;AAClE,IAAG,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AACpB,KAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,eAAe,EAAE;AAC5D,MAAI,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,EAAE;AACzB,SAAM,IAAI,SAAS,CAAC,0BAA0B,CAAC,CAAC;GAChD;EACD;AACD,QAAO,GAAG,CAAC;CACX;;AAED,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC;;;;;;;;;;ACX5B,SAAS,QAAQ,CAAE,IAAI,EAAE;AACxB,MAAI,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC;AACpC,SAAO,GAAG,CAAC;CACX;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;;;;;;;;;;ACL1B,SAAS,SAAS,CAAE,IAAI,EAAE;AACzB,MAAI,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC;AACpC,SAAO,AAAC,GAAG,CAAC,MAAM,GAAG,CAAC,GAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;CAC1C;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;;;;;;;;;;ACL3B,SAAS,QAAQ,CAAE,IAAI,EAAE;AACxB,KAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AAC3B,KAAI,IAAI,KAAK,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC;AAC1B,KAAI,IAAI,GAAG,EAAE,EAAE,IAAI,GAAG,IAAI,CAAC;AAC3B,KAAI,IAAI,IAAI,EAAE,EAAE,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC;AACjC,QAAO,IAAI,CAAC;CACZ;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;;;;;;;;;;ACR1B,SAAS,SAAS,CAAE,IAAI,EAAE;AACzB,KAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AAC3B,KAAI,IAAI,KAAK,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC;AAC1B,KAAI,IAAI,GAAG,EAAE,EAAE,IAAI,GAAG,IAAI,CAAC;AAC3B,KAAI,IAAI,IAAI,EAAE,EAAE,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC;AACjC,KAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AACvB,QAAO,AAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAI,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC;CAC7C;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;;;;;;;;;;;ACR3B,SAAS,SAAS,CAAE,IAAI,EAAE,MAAM,EAAE;AACjC,QAAM,GAAG,MAAM,IAAI,IAAI,CAAC;;AAExB,MAAI,MAAM,KAAK,OAAO,EAAE,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,SAAO,IAAI,CAAC,WAAW,EAAE,CAAC;CAC1B;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;;;;;;;;;;ACR3B,SAAS,QAAQ,CAAE,IAAI,EAAE;AACxB,MAAI,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,QAAQ,EAAE,CAAC;AACrD,SAAO,YAAY,CAAC;CACpB;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;;;;;;;;;;ACL1B,SAAS,SAAS,CAAE,IAAI,EAAE;AACzB,KAAI,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,QAAQ,EAAE,CAAC;AACrD,SAAQ,YAAY,CAAC,MAAM;AAC1B,OAAK,CAAC;AACL,eAAY,GAAG,IAAI,GAAG,YAAY,CAAC;AACnC,SAAM;AAAA,AACP,OAAK,CAAC;AACL,eAAY,GAAG,GAAG,GAAG,YAAY,CAAC;AAClC,SAAM;AAAA,AACP;AACC,eAAY,GAAG,YAAY,CAAC;AAC5B,SAAM;AAAA,EACP;AACD,QAAO,YAAY,CAAC;CACpB;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;;;;;;;;;;AChB3B,SAAS,QAAQ,CAAE,IAAI,EAAE;AACxB,MAAI,KAAK,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAA,CAAE,QAAQ,EAAE,CAAC;AAC7C,SAAO,KAAK,CAAC;CACb;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;;;;;;;;;;ACL1B,SAAS,SAAS,CAAE,IAAI,EAAE;AACzB,MAAI,KAAK,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAA,CAAE,QAAQ,EAAE,CAAC;AAC7C,SAAO,AAAC,KAAK,CAAC,MAAM,GAAG,CAAC,GAAI,GAAG,GAAG,KAAK,GAAG,KAAK,CAAC;CAChD;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;;;;;ACV3B,IAAI,QAAQ,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;;;;;;;;AAQtC,SAAS,QAAQ,CAAE,CAAC,EAAE,SAAS,EAAE;AAChC,KAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjC,KAAI,UAAU,GAAG;AAChB,IAAE,EAAE,CAAC;AACL,GAAC,EAAE,IAAI;AACP,KAAG,EAAE,KAAK;AACV,GAAC,EAAE,OAAO;AACV,GAAC,EAAE,QAAQ;AACX,GAAC,EAAE,SAAS;AACZ,GAAC,EAAE,UAAU;AACb,GAAC,EAAE,WAAW;EACd,CAAA;AACD,KAAI,GAAG,GAAG,OAAO,GAAI,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC,AAAC,CAAC;AAChD,KAAI,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AACzB,QAAO;AACN,GAAC,EAAE,IAAI;AACP,OAAK,EAAE,IAAI,CAAC,KAAK;AACjB,IAAE,EAAE,QAAQ;AACZ,UAAQ,EAAE,QAAQ;EAClB,CAAA;CACD;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;;;;;AC9B1B,IAAI,QAAQ,GAAG,EAAE,CAAA;AACjB,QAAQ,CAAC,EAAE,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACvC,QAAQ,CAAC,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACrC,QAAQ,CAAC,EAAE,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACvC,QAAQ,CAAC,GAAG,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACzC,QAAQ,CAAC,EAAE,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACvC,QAAQ,CAAC,GAAG,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACzC,QAAQ,CAAC,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACrC,QAAQ,CAAC,GAAG,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACvC,QAAQ,CAAC,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACrC,QAAQ,CAAC,GAAG,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACvC,QAAQ,CAAC,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACrC,QAAQ,CAAC,GAAG,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACvC,QAAQ,CAAC,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACrC,QAAQ,CAAC,GAAG,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACvC,QAAQ,CAAC,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACrC,QAAQ,CAAC,GAAG,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACvC,QAAQ,CAAC,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACrC,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACzC,QAAQ,CAAC,EAAE,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACrC,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACzC,QAAQ,CAAC,GAAG,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACvC,QAAQ,CAAC,GAAG,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;;;;;;;AAOvC,SAAS,EAAE,CAAE,MAAM,EAAE;AACpB,KAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;AAClB,KAAI,SAAS,GAAG,MAAM,CAAC;AACvB,KAAI,MAAM,GAAG,CACZ,MAAM;AACN,YAAW;AACX,MAAK;AACL,YAAW;AACX,MAAK;AACL,OAAM;AACN,KAAI;AACJ,MAAK;AACL,MAAK;AACL,KAAI;AACJ,KAAI;AACJ,MAAK;AACL,MAAK;AACL,KAAI;AACJ,KAAI;AACJ,MAAK;AACL,KAAI;AACJ,MAAK;AACL,KAAI;AACJ,KAAI;AACJ,KAAI;AACJ,MAAK;AACL,KAAI;AACJ,KAAI;EACJ,CAAC;;AAEF,OAAM,CAAC,IAAI,CAAC,UAAS,KAAK,EAAE,CAAC,EAAE;;AAE9B,MAAI,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;AACpC,WAAQ,KAAK;AACZ,SAAK,MAAM;AACV,cAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,YAAO,IAAI,CAAC;AACZ,WAAM;AAAA,AACP,SAAK,WAAW;AACf,cAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACxC,YAAO,IAAI,CAAC;AACZ,WAAM;AAAA,AACP,SAAK,KAAK;AACT,cAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC/B,YAAO,IAAI,CAAC;AACZ,WAAM;AAAA,AACP,SAAK,WAAW;AACf,cAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACxC,YAAO,IAAI,CAAC;AACZ,WAAM;AAAA,AACP,SAAK,KAAK;AACT,cAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC/B,YAAO,IAAI,CAAC;AACZ,WAAM;AAAA,AACP;;;AAGC,SAAI,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;AAChD,cAAS,GAAG,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AAC/C,YAAO,KAAK,CAAC;AACb,WAAM;AAAA,IACP;GACD;EACD,CAAC,CAAC;;AAEH,QAAO,SAAS,CAAC;CACjB;;AAED,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;;;;;;;;;;AC5FpB,SAAS,QAAQ,CAAE,IAAI,EAAE;AACxB,MAAI,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC;AAC1C,SAAO,MAAM,CAAC;CACd;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;;;;;;;;;;ACL1B,SAAS,SAAS,CAAE,IAAI,EAAE;AACzB,MAAI,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC;AAC1C,SAAO,AAAC,MAAM,CAAC,MAAM,GAAG,CAAC,GAAI,GAAG,GAAG,MAAM,GAAG,MAAM,CAAC;CACnD;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;;;;;;;;;;;ACJ3B,SAAS,UAAU,CAAE,IAAI,EAAE;AAC1B,SAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;CACxB;;AAED,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC;;;;;;;;;;;;ACH5B,SAAS,SAAS,CAAE,IAAI,EAAE,MAAM,EAAE;AACjC,OAAM,GAAG,MAAM,IAAI,IAAI,CAAC;AACxB,KAAI,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;AAC7B,KAAI,MAAM,KAAK,OAAO,EAAE;AACvB,MAAI,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACzB,MAAI,MAAM,GAAG,EAAE,CAAC;;AAEhB,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAC3B,SAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;GACpB;;AAED,SAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;EACxB;AACD,QAAO,GAAG,CAAC;CACX;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;;;;;;;;;;AClB3B,SAAS,QAAQ,CAAE,IAAI,EAAE;AACxB,SAAO,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;CAC/C;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;;;;;;;;;;ACJ1B,SAAS,UAAU,CAAE,IAAI,EAAE;AAC1B,SAAO,IAAI,CAAC,WAAW,EAAE,CAAC;CAC1B;;AAED,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC;;;;;;;;;;ACJ5B,SAAS,QAAQ,CAAE,IAAI,EAAE;AACxB,MAAI,MAAM,GAAG,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAChD,SAAO,MAAM,GAAG,MAAM,GAAG,KAAK,CAAC;CAC/B;;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;;;;;ACV1B,IAAI,UAAU,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC1C,IAAI,QAAQ,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACtC,IAAI,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACxC,IAAI,cAAc,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;;;;;;;AAOlD,SAAS,MAAM,CAAE,GAAG,EAAE;AACrB,KAAI,IAAI,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;AAC3B,QAAO;AACN,GAAC,EAAE,IAAI;AACP,OAAK,EAAE,GAAG;AACV,IAAE,EAAE,QAAQ;AACZ,KAAG,EAAE,SAAS;AACd,UAAQ,EAAE,cAAc;EACxB,CAAA;CACD;;AAED,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","file":"gregorian.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Gregorian\n * Author: Patrick Fricano\n * https://www.github.com/patrickfatrick/gregorian\n * \n * Take a user-input date in any format and convert it to several formats\n * Also serves as a wrapper for common JS date methods like toUTCString and toISOString\n * toLocaleDateString is currently not well-supported especially on mobile, so we're avoiding it.\n * \n * \n * \n * gregorian.reform.to('__FORMAT STRING__') string with formatting options specified with keyword strings\n * \t\tSee ./modules/reform-to.js for more information on this\n * gregorian.reform.to('iso') ISO string including time such as '2015-09-12T23:06:19Z'\n * \t\t`iso-short` can be added to reduce the string to just the date, like '2015-09-12'\n * gregorian.reform.to('utc') UTC string such as 'Sat, 12 Sep 2015 06:00:00 GMT'\n * \t\t`utc-short` can be added to reduce the string to just the date, like 'Sat, 12 Sep 2015'\n * gregorian.reform.to('unix') milliseconds since January 1, 1970\n */\n\nvar reform = require('./modules/reform');\n\nvar gregorian = {\n\treform: reform\n};\n\nmodule.exports =  gregorian;","/**\n * Take a date object and output the capitalized 12-hour clock period (AM/PM)\n * @param   {Date}   date a date object\n * @returns {String} the capitalized 12-hour clock period \n */\nfunction reformAP (date) {\n\tvar hour = date.getHours();\n\tvar ampm = (hour < 12) ? 'AM' : 'PM';\n\treturn ampm;\n}\n\nmodule.exports = reformAP;","/**\n * Take a date object and output the abreviated day of the week\n * @param {Date} \ta date object\n * @returns {Number}\tthe abbreviated day of the week\n */\nfunction reformDD (date) {\n\tvar days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\tvar dayOfWeek = date.getDay();\n\treturn days[dayOfWeek];\n}\n\nmodule.exports = reformDD;","/**\n * Take a date object and output the day of the week\n * @param {Date} \ta date object\n * @returns {String} the full day of the week\n */\nfunction reformDDD (date) {\n\tvar days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\tvar dayOfWeek = date.getDay();\n\treturn days[dayOfWeek];\n}\n\nmodule.exports = reformDDD;","/**\n * Take a date object and output the abbreviated month\n * @param {Date} \ta date object\n * @returns {String}\tthe abbreviated month\n */\nfunction reformMM (date) {\n\tvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov',  'Dec']\n\tvar month = date.getMonth();\n\treturn months[month];\n}\n\nmodule.exports = reformMM;","/**\n * Take a date object and output the month\n * @param {Date} \ta date object\n * @returns {String}\tthe full month\n */\nfunction reformMMM (date) {\n\tvar months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\tvar month = date.getMonth();\n\treturn months[month];\n}\n\nmodule.exports = reformMMM;","var reformTo = require('./reform-to');\n\n/**\n * Adds specified increments to a gregorian object\n * @param   {Number} n         a number to multiply the increment by\n * @param   {String} increment an increment to add\n * @returns {Object} a new gregorian object\n */\nfunction add (n, increment) {\n\tvar current = Date.parse(this.d);\n\tvar increments = {\n\t\tms: 1,\n\t\ts: 1000,\n\t\tmin: 60000,\n\t\th: 3600000,\n\t\td: 86400000,\n\t\tw: 604800000,\n\t\tm: 2628000000,\n\t\ty: 31536000000\n\t}\n\tvar sum = current + (n * increments[increment]);\n\tvar date = new Date(sum);\n\treturn {\n\t\td: date,\n\t\tinput: this.input,\n\t\tto: reformTo,\n\t\tadd: add\n\t}\n}\n\nmodule.exports = add;","/**\n * Take a date object and output the uncapitalized 12-hour clock period (AM/PM)\n * @param   {Date}   date a date object\n * @returns {String} the uncapitalized 12-hour clock period \n */\nfunction reformAp (date) {\n\tvar hour = date.getHours();\n\tvar ampm = (hour < 12) ? 'am' : 'pm';\n\treturn ampm;\n}\n\nmodule.exports = reformAp;","/**\n * Convert the object passed to a date and test its validity\n * @param {Object} \tobj any object\n * @returns {Date}\tif string passes the test, return the date object\n */\nfunction reformDate (obj) {\n\tif (obj == null) throw new TypeError('This is null or undefined');\n\tobj = new Date(obj);\n\tif (Object.prototype.toString.call(obj) === \"[object Date]\") {\n\t\tif (isNaN(obj.getTime())) {\n\t\t\tthrow new TypeError('This is not a valid date');\n\t\t}\n\t}\n\treturn obj;\n}\n\nmodule.exports = reformDate;","/**\n * Take a date object and output the date of the month with no leading zeros (1-31)\n * @param {Date} \ta date object\n * @returns {Number}\tthe date of the month with no leading zeros\n */\nfunction reformDd (date) {\n\tvar day = date.getDate().toString();\n\treturn day;\n}\n\nmodule.exports = reformDd;","/**\n * Take a date object and output the two-digit date of the month (01-31)\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit date of the month\n */\nfunction reformDdd (date) {\n\tvar day = date.getDate().toString();\n\treturn (day.length < 2) ? '0' + day : day;\n}\n\nmodule.exports = reformDdd;","/**\n * Take a date object and outpit the hour with no leading zeros (1-12)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nfunction reformHh (date) {\n\tvar hour = date.getHours();\n\tif (hour === 0) hour = 12;\n\tif (hour < 13) hour = hour;\n\tif (hour >= 13) hour = hour - 12;\n\treturn hour;\n}\n\nmodule.exports = reformHh;","/**\n * Take a date object and output the two-digit hour (01-12)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit hour\n */\nfunction reformHhh (date) {\n\tvar hour = date.getHours();\n\tif (hour === 0) hour = 12;\n\tif (hour < 13) hour = hour;\n\tif (hour >= 13) hour = hour - 12;\n\thour = hour.toString();\n\treturn (hour.length < 2) ? '0' + hour : hour;\n}\n\nmodule.exports = reformHhh;","/**\n * Converts a date object to an ISO string\n * @param   {Date}   date   a date object\n * @param {String}\t\tformat optional 'short' to remove the time\n * @returns {String} ISO String including time\n */\nfunction reformISO (date, format) {\n\tformat = format || null;\n\t//console.log('iso function date: ' + date);\n\tif (format === 'short') return date.toISOString().split('T')[0];\n\treturn date.toISOString();\n}\n\nmodule.exports = reformISO;","/**\n * Take a date object and output the milliseconds with no leading zeros (0-999)\n * @param   {Date} date a date object\n * @returns {String}    the number of milliseconds\n */\nfunction reformMl (date) {\n\tvar milliseconds = date.getMilliseconds().toString();\n\treturn milliseconds;\n}\n\nmodule.exports = reformMl;","/**\n * Take a date object and and output the three-digit milliseconds (000-999)\n * @param   {Date}   date a date object\n * @returns {String} the number of milliseconds\n */\nfunction reformMll (date) {\n\tvar milliseconds = date.getMilliseconds().toString();\n\tswitch (milliseconds.length) {\n\t\tcase 1:\n\t\t\tmilliseconds = '00' + milliseconds;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmilliseconds = '0' + milliseconds;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmilliseconds = milliseconds;\n\t\t\tbreak;\n\t}\n\treturn milliseconds;\n}\n\nmodule.exports = reformMll;","/**\n * Take a date object and output the numeric month (1-12)\n * @param {Date} \ta date object\n * @returns {Number}\tthe month with no leading zeros\n */\nfunction reformMm (date) {\n\tvar month = (date.getMonth() + 1).toString();\n\treturn month;\n}\n\nmodule.exports = reformMm;","/**\n * Take a date object and output the two-digit month (01-12)\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit month\n */\nfunction reformMmm (date) {\n\tvar month = (date.getMonth() + 1).toString();\n\treturn (month.length < 2) ? '0' + month : month;\n}\n\nmodule.exports = reformMmm;","var reformTo = require('./reform-to');\n\n/**\n * Subtracts specified increments to a gregorian object\n * @param   {Number} n         a number to multiply the increment by\n * @param   {String} increment an increment to subtract\n * @returns {Object} a new gregorian object\n */\nfunction subtract (n, increment) {\n\tvar current = Date.parse(this.d);\n\tvar increments = {\n\t\tms: 1,\n\t\ts: 1000,\n\t\tmin: 60000,\n\t\th: 3600000,\n\t\td: 86400000,\n\t\tw: 604800000,\n\t\tm: 2628000000,\n\t\ty: 31536000000\n\t}\n\tvar sum = current - (n * increments[increment]);\n\tvar date = new Date(sum);\n\treturn {\n\t\td: date,\n\t\tinput: this.input,\n\t\tto: reformTo,\n\t\tsubtract: subtract\n\t}\n}\n\nmodule.exports = subtract;","var reformTo = {}\nreformTo.AP = require('./reform-_ap_');\nreformTo.ap = require('./reform-ap');\nreformTo.DD = require('./reform-_dd_');\nreformTo.DDD = require('./reform-_ddd_');\nreformTo.MM = require('./reform-_mm_');\nreformTo.MMM = require('./reform-_mmm_');\nreformTo.mm = require('./reform-mm');\nreformTo.mmm = require('./reform-mmm');\nreformTo.dd = require('./reform-dd');\nreformTo.ddd = require('./reform-ddd');\nreformTo.hh = require('./reform-hh');\nreformTo.hhh = require('./reform-hhh');\nreformTo.ml = require('./reform-ml');\nreformTo.mll = require('./reform-mll');\nreformTo.tt = require('./reform-tt');\nreformTo.ttt = require('./reform-ttt');\nreformTo.yy = require('./reform-yy');\nreformTo.yyyy = require('./reform-yyyy');\nreformTo.zz = require('./reform-zz');\nreformTo.unix = require('./reform-unix');\nreformTo.utc = require('./reform-utc');\nreformTo.iso = require('./reform-iso');\n\n/**\n * Take a Gregorian object and output the reformatted string\n * @param {String} \tformat a string or date object (something that can be converted to a valid date)\n * @returns {String}\tthe date reformatted into the specified format\n */\nfunction to (format) {\n\tvar date = this.d;\n\tvar converted = format;\n\tvar search = [\n\t\t'unix', // The number of milliseconds passed since January 1, 1970\n\t\t'utc-short', // shortened UTC string (no time included)\n\t\t'utc', // UTC string\n\t\t'iso-short', // shortened ISO string (no time included)\n\t\t'iso', // ISO string \n\t\t'yyyy', // four-digit year 2015\n\t\t'yy', // two-digit year (20)15\n\t\t'DDD', // full day of the week Sunday-Saturday\n\t\t'ddd', // two-digit date of the month 01-31\n\t\t'DD', // abbreviated day of the week Sun-Sat\n\t\t'dd', // date of the month with no leading zeros 1-31\n\t\t'MMM', // full month January-December\n\t\t'mmm', // two-digit month 00-12\n\t\t'MM', // abbreviated month Jan-Dec\n\t\t'mm', // month with no leading zeros 1-12\n\t\t'hhh', // two-digit hours 01-12\n\t\t'hh', // hour with no leading zeros 1-12\n\t\t'ttt', // two-digit minutes 00-59\n\t\t'tt', // minutes with no leading zeros 0-59\n\t\t'AP', // AM or PM\n\t\t'ap', // am or pm\n\t\t'mll', // milliseconds 000-999\n\t\t'ml', // milliseconds with no leading zeros 0-999\n\t\t'zz' // timezone offset UTC -6:00\n\t];\n\n\tsearch.some(function(piece, i) {\n\t\t//console.log(converted + ' vs ' + piece);\n\t\tif (converted.indexOf(piece) !== -1) {\n\t\t\tswitch (piece) {\n\t\t\t\tcase 'unix':\n\t\t\t\t\tconverted = reformTo.unix(date);\n\t\t\t\t\treturn true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'utc-short':\n\t\t\t\t\tconverted = reformTo.utc(date, 'short');\n\t\t\t\t\treturn true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'utc':\n\t\t\t\t\tconverted = reformTo.utc(date);\n\t\t\t\t\treturn true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'iso-short':\n\t\t\t\t\tconverted = reformTo.iso(date, 'short');\n\t\t\t\t\treturn true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'iso':\n\t\t\t\t\tconverted = reformTo.iso(date);\n\t\t\t\t\treturn true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// console.log('Search string is: ' + piece);\n\t\t\t\t\t// console.log('Converted string is: ' + to[piece](date));\n\t\t\t\t\tvar replacer = reformTo[piece](date).toString();\n\t\t\t\t\tconverted = converted.replace(piece, replacer);\n\t\t\t\t\treturn false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\t// console.log(converted);\n\treturn converted;\n}\n\nmodule.exports = to;\n","/**\n * Take a date object and output the minutes with no leading zeros\n * @param   {Date} date a date object\n * @returns {String}  the minutes with no leading zeros\n */\nfunction reformTt (date) {\n\tvar minute = date.getMinutes().toString();\n\treturn minute;\n}\n\nmodule.exports = reformTt;","/**\n * Take a date object and output the two-digit minutes\n * @param   {Date}   date a date object\n * @returns {String} the two-digit minutes\n */\nfunction reformTtt (date) {\n\tvar minute = date.getMinutes().toString();\n\treturn (minute.length < 2) ? '0' + minute : minute;\n}\n\nmodule.exports = reformTtt;","/**\n * Converts a date object to UNIX time (milliseconds from January 1, 1970)\n * @param   {Date}   date a date object\n * @returns {Number} milliseconds from January 1, 1970\n */\n\nfunction reformUnix (date) {\n\treturn Date.parse(date);\n}\n\nmodule.exports = reformUnix;","/**\n * Converts a date object to a UTC string\n * @param   {Date}   date a date object\n * @param \t{String}\tformat optional 'shart' to remove the time from the output\n * @returns {String} UTC string with or without time\n */\n\nfunction reformUTC (date, format) {\n\tformat = format || null;\n\tvar utc = date.toUTCString();\n\tif (format === 'short') {\n\t\tvar arr = utc.split(' ');\n\t\tvar newArr = [];\n\n\t\tfor (var i = 0; i < 4; i++) {\n\t\t\tnewArr.push(arr[i]);\n\t\t}\n\n\t\treturn newArr.join(' ');\n\t}\n\treturn utc;\n}\n\nmodule.exports = reformUTC;","/**\n * Take a date object and output the two-digit year\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit year\n */\nfunction reformYy (date) {\n\treturn date.getFullYear().toString().substr(2);\n}\n\nmodule.exports = reformYy;","/**\n * Take a date object and output the four-digit year\n * @param {Date} \ta date object\n * @returns {Number}\tthe four-digit year\n */\nfunction reformYyyy (date) {\n\treturn date.getFullYear();\n}\n\nmodule.exports = reformYyyy;","/**\n * Take a date object and output the timezone offset (UTC +- 01:00, etc.)\n * @param   {Date}   date a date object\n * @returns {String} the timezone offset \n */\nfunction reformZz (date) {\n\tvar offset = date.getTimezoneOffset() / 60 * -1;\n\treturn 'UTC ' + offset + ':00';\n}\n\nmodule.exports = reformZz;","var reformDate = require('./reform-date');\nvar reformTo = require('./reform-to');\nvar reformAdd = require('./reform-add');\nvar reformSubtract = require('./reform-subtract');\n\n/**\n * Take a string or date object and convert it into a gregorian object\n * @param   {Object} obj A string or date object that can be parsed into a date\n * @returns {Object} Gregorian object\n */\nfunction reform (obj) {\n\tvar date = reformDate(obj);\n\treturn {\n\t\td: date,\n\t\tinput: obj,\n\t\tto: reformTo,\n\t\tadd: reformAdd,\n\t\tsubtract: reformSubtract\n\t}\n}\n\nmodule.exports = reform;"]}