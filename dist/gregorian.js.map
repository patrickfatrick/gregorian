{"version":3,"names":[],"mappings":"","sources":["gregorian.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.gregorian = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/**\n * Gregorian\n * Author: Patrick Fricano\n * https://www.github.com/patrickfatrick/gregorian\n * \n * Take a user-input date in any format and convert it to several formats\n * Also serves as a wrapper for common JS date methods like toUTCString and toISOString\n * toLocaleDateString is currently not well-supported especially on mobile, so we're avoiding it.\n * \n * gregorian.reform.to('__FORMAT STRING__') string with formatting options specified with keyword strings\n * \t\tSee ./modules/reform-to.js for more information on this\n * gregorian.reform(__OBJECT__).to('iso') ISO string including time such as '2015-09-12T23:06:19Z'\n * \t\t`iso-short` can be added to reduce the string to just the date, like '2015-09-12'\n * gregorian.reform(__OBJECT__).to('utc') UTC string such as 'Sat, 12 Sep 2015 06:00:00 GMT'\n * \t\t`utc-short` can be added to reduce the string to just the date, like 'Sat, 12 Sep 2015'\n * gregorian.reform(__OBJECT__).to('unix') milliseconds since January 1, 1970\n * gregorian.reform(__OBJECT__).add(_NUMBER__, __INCREMENT_STRING__) add time\n * gregorian.reform(__OBJECT__).subtract(_NUMBER__, __INCREMENT_STRING__) subtract time\n */\n\nvar reform = require('./modules/reform');\n\nvar gregorian = {\n  reform: reform\n};\n\nmodule.exports = gregorian;\n\n},{\"./modules/reform\":33}],2:[function(require,module,exports){\n'use strict';\n\n/**\n * Adds specified increments to a gregorian object\n * @param   {Number} n         a number to multiply the increment by\n * @param   {String} increment an increment to add\n * @returns {Object} a new gregorian object\n */\nfunction add(n, increment) {\n\n\tvar increments = {};\n\n\tincrements.l = function (date) {\n\t\treturn new Date(date.setUTCMilliseconds(date.getUTCMilliseconds() + n));\n\t};\n\tincrements.s = function (date) {\n\t\treturn new Date(date.setUTCSeconds(date.getUTCSeconds() + n));\n\t};\n\tincrements.t = function (date) {\n\t\treturn new Date(date.setUTCMinutes(date.getUTCMinutes() + n));\n\t};\n\tincrements.h = function (date) {\n\t\treturn new Date(date.setUTCHours(date.getUTCHours() + n));\n\t};\n\tincrements.d = function (date) {\n\t\treturn new Date(date.setUTCDate(date.getUTCDate() + n));\n\t};\n\tincrements.w = function (date) {\n\t\treturn new Date(date.setUTCDate(date.getUTCDate() + n * 7));\n\t};\n\tincrements.m = function (date) {\n\t\tvar newMonth = date.getUTCMonth() + n;\n\t\tvar newYear = date.getUTCFullYear();\n\t\tvar newDate = date.getUTCDate();\n\n\t\tif (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth + 1, 0));\n\t\t} else {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth, newDate));\n\t\t}\n\t};\n\tincrements.y = function (date) {\n\t\tvar newYear = date.getUTCFullYear() + n;\n\t\tvar newMonth = date.getUTCMonth();\n\t\tvar newDate = date.getUTCDate();\n\n\t\tif (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth + 1, 0));\n\t\t} else {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth, newDate));\n\t\t}\n\t};\n\n\treturn {\n\t\td: increments[increment](this.d),\n\t\tinput: this.input,\n\t\tto: this.to,\n\t\tadd: add,\n\t\tsubtract: this.subtract,\n\t\trestart: this.restart\n\t};\n}\n\nmodule.exports = add;\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\n/**\n * Convert the object passed to a date and test its validity\n * @param {Object} \tobj any object\n * @returns {Date}\tif string passes the test, return the date object\n */\nfunction reformDate(obj) {\n\tif (obj == null) throw new TypeError('This is null or undefined');\n\tobj = new Date(obj);\n\tif (Object.prototype.toString.call(obj) === '[object Date]') {\n\t\tif (isNaN(obj.getTime())) {\n\t\t\tthrow new TypeError('This is not a valid date');\n\t\t}\n\t}\n\treturn obj;\n}\n\nmodule.exports = reformDate;\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\n/**\n * Sets the date or time to the start of the specified increment\n * @param   {String} increment an increment to set\n * @returns {Object} a new gregorian object\n */\nfunction restart(increment) {\n\tvar increments = {};\n\n\tincrements.s = function (date) {\n\t\treturn new Date(date.setSeconds(date.getSeconds(), 0));\n\t};\n\tincrements.t = function (date) {\n\t\treturn new Date(date.setMinutes(date.getMinutes(), 0, 0));\n\t};\n\tincrements.h = function (date) {\n\t\treturn new Date(date.setHours(date.getHours(), 0, 0, 0));\n\t};\n\tincrements.d = function (date) {\n\t\tdate.setDate(date.getDate());\n\t\tdate.setHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\tincrements.w = function (date) {\n\t\tdate.setDate(date.getDate() - date.getDay());\n\t\tdate.setHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\tincrements.m = function (date) {\n\t\tdate.setMonth(date.getMonth(), 1);\n\t\tdate.setHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\tincrements.y = function (date) {\n\t\tdate.setFullYear(date.getFullYear(), 0, 1);\n\t\tdate.setHours(0, 0, 0, 0);\n\t\treturn new Date(date);\n\t};\n\n\treturn {\n\t\td: increments[increment](this.d),\n\t\tinput: this.input,\n\t\tto: this.to,\n\t\tadd: this.add,\n\t\tsubtract: this.subtract,\n\t\trestart: restart\n\t};\n}\n\nmodule.exports = restart;\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\n/**\n * Subtracts specified increments to a gregorian object\n * @param   {Number} n         a number to multiply the increment by\n * @param   {String} increment an increment to subtract\n * @returns {Object} a new gregorian object\n */\nfunction subtract(n, increment) {\n\tvar increments = {};\n\n\tincrements.l = function (date) {\n\t\treturn new Date(date.setUTCMilliseconds(date.getUTCMilliseconds() - n));\n\t};\n\tincrements.s = function (date) {\n\t\treturn new Date(date.setUTCSeconds(date.getUTCSeconds() - n));\n\t};\n\tincrements.t = function (date) {\n\t\treturn new Date(date.setUTCMinutes(date.getUTCMinutes() - n));\n\t};\n\tincrements.h = function (date) {\n\t\treturn new Date(date.setUTCHours(date.getUTCHours() - n));\n\t};\n\tincrements.d = function (date) {\n\t\treturn new Date(date.setUTCDate(date.getUTCDate() - n));\n\t};\n\tincrements.w = function (date) {\n\t\treturn new Date(date.setUTCDate(date.getUTCDate() - n * 7));\n\t};\n\tincrements.m = function (date) {\n\t\tvar newMonth = date.getUTCMonth() - n;\n\t\tvar newYear = date.getUTCFullYear();\n\t\tvar newDate = date.getUTCDate();\n\n\t\tif (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth + 1, 0));\n\t\t} else {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth, newDate));\n\t\t}\n\t};\n\tincrements.y = function (date) {\n\t\tvar newYear = date.getUTCFullYear() - n;\n\t\tvar newMonth = date.getUTCMonth();\n\t\tvar newDate = date.getUTCDate();\n\n\t\tif (newDate > new Date(date.setUTCFullYear(newYear, newMonth + 1, 0)).getUTCDate()) {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth + 1, 0));\n\t\t} else {\n\t\t\treturn new Date(date.setUTCFullYear(newYear, newMonth, newDate));\n\t\t}\n\t};\n\n\treturn {\n\t\td: increments[increment](this.d),\n\t\tinput: this.input,\n\t\tto: this.to,\n\t\tadd: this.add,\n\t\tsubtract: subtract,\n\t\trestart: this.restart\n\t};\n}\n\nmodule.exports = subtract;\n\n},{}],6:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the capitalized 12-hour clock period (AM/PM)\n * @param   {Date}   date a date object\n * @returns {String} the capitalized 12-hour clock period \n */\nfunction reformAP(date) {\n  var hour = date.getHours();\n  var ampm = hour < 12 ? 'AM' : 'PM';\n  return ampm;\n}\n\nmodule.exports = reformAP;\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the abreviated day of the week\n * @param {Date} \ta date object\n * @returns {Number}\tthe abbreviated day of the week\n */\nfunction reformDD(date) {\n  var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  var dayOfWeek = date.getDay();\n  return days[dayOfWeek];\n}\n\nmodule.exports = reformDD;\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the day of the week\n * @param {Date} \ta date object\n * @returns {String} the full day of the week\n */\nfunction reformDDD(date) {\n  var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  var dayOfWeek = date.getDay();\n  return days[dayOfWeek];\n}\n\nmodule.exports = reformDDD;\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nfunction reformHH(date) {\n  var hour = date.getHours();\n  return hour;\n}\n\nmodule.exports = reformHH;\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and outpit the 24-hour clock hour with no leading zeros (0-23)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nfunction reformHHH(date) {\n  var hour = date.getHours().toString();\n  return hour.length < 2 ? '0' + hour : hour;\n}\n\nmodule.exports = reformHHH;\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the abbreviated month\n * @param {Date} \ta date object\n * @returns {String}\tthe abbreviated month\n */\nfunction reformMM(date) {\n  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n  var month = date.getMonth();\n  return months[month];\n}\n\nmodule.exports = reformMM;\n\n},{}],12:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the month\n * @param {Date} \ta date object\n * @returns {String}\tthe full month\n */\nfunction reformMMM(date) {\n  var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  var month = date.getMonth();\n  return months[month];\n}\n\nmodule.exports = reformMMM;\n\n},{}],13:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the uncapitalized 12-hour clock period (AM/PM)\n * @param   {Date}   date a date object\n * @returns {String} the uncapitalized 12-hour clock period \n */\nfunction reformAp(date) {\n  var hour = date.getHours();\n  var ampm = hour < 12 ? 'am' : 'pm';\n  return ampm;\n}\n\nmodule.exports = reformAp;\n\n},{}],14:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the date of the month with no leading zeros (1-31)\n * @param {Date} \ta date object\n * @returns {Number}\tthe date of the month with no leading zeros\n */\nfunction reformDd(date) {\n  var day = date.getDate().toString();\n  return day;\n}\n\nmodule.exports = reformDd;\n\n},{}],15:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the two-digit date of the month (01-31)\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit date of the month\n */\nfunction reformDdd(date) {\n  var day = date.getDate().toString();\n  return day.length < 2 ? '0' + day : day;\n}\n\nmodule.exports = reformDdd;\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and outpit the hour with no leading zeros (1-12)\n * @param   {Date}   date a date object\n * @returns {String} the hour with no leading zeros\n */\nfunction reformHh(date) {\n\tvar hour = date.getHours();\n\tif (hour === 0) hour = 12;\n\tif (hour < 13) hour = hour;\n\tif (hour >= 13) hour = hour - 12;\n\treturn hour;\n}\n\nmodule.exports = reformHh;\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the two-digit hour (01-12)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit hour\n */\nfunction reformHhh(date) {\n\tvar hour = date.getHours();\n\tif (hour === 0) hour = 12;\n\tif (hour < 13) hour = hour;\n\tif (hour >= 13) hour = hour - 12;\n\thour = hour.toString();\n\treturn hour.length < 2 ? '0' + hour : hour;\n}\n\nmodule.exports = reformHhh;\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\n/**\n * Converts a date object to an ISO string\n * @param   {Date}   date   a date object\n * @param {String}\t\tformat optional 'short' to remove the time\n * @returns {String} ISO String including time\n */\nfunction reformISO(date, format) {\n  format = format || null;\n  //console.log('iso function date: ' + date);\n  if (format === 'short') return date.toISOString().split('T')[0];\n  return date.toISOString();\n}\n\nmodule.exports = reformISO;\n\n},{}],19:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the milliseconds with no leading zeros (0-999)\n * @param   {Date} date a date object\n * @returns {String}    the number of milliseconds\n */\nfunction reformMl(date) {\n  var milliseconds = date.getMilliseconds().toString();\n  return milliseconds;\n}\n\nmodule.exports = reformMl;\n\n},{}],20:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and and output the three-digit milliseconds (000-999)\n * @param   {Date}   date a date object\n * @returns {String} the number of milliseconds\n */\nfunction reformMll(date) {\n\tvar milliseconds = date.getMilliseconds().toString();\n\tswitch (milliseconds.length) {\n\t\tcase 1:\n\t\t\tmilliseconds = '00' + milliseconds;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tmilliseconds = '0' + milliseconds;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tmilliseconds = milliseconds;\n\t\t\tbreak;\n\t}\n\treturn milliseconds;\n}\n\nmodule.exports = reformMll;\n\n},{}],21:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the numeric month (1-12)\n * @param {Date} \ta date object\n * @returns {Number}\tthe month with no leading zeros\n */\nfunction reformMm(date) {\n  var month = (date.getMonth() + 1).toString();\n  return month;\n}\n\nmodule.exports = reformMm;\n\n},{}],22:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the two-digit month (01-12)\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit month\n */\nfunction reformMmm(date) {\n  var month = (date.getMonth() + 1).toString();\n  return month.length < 2 ? '0' + month : month;\n}\n\nmodule.exports = reformMmm;\n\n},{}],23:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and outpit the seconds with no leading zeros (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the seconds with no leading zeros\n */\nfunction reformSs(date) {\n  var second = date.getSeconds();\n  return second;\n}\n\nmodule.exports = reformSs;\n\n},{}],24:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and outpit the two-digit seconds (0-59)\n * @param   {Date}   date a date object\n * @returns {String} the two-digit seconds\n */\nfunction reformSs(date) {\n  var second = date.getSeconds().toString();\n  return second.length < 2 ? '0' + second : second;\n}\n\nmodule.exports = reformSs;\n\n},{}],25:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the minutes with no leading zeros\n * @param   {Date} date a date object\n * @returns {String}  the minutes with no leading zeros\n */\nfunction reformTt(date) {\n  var minute = date.getMinutes().toString();\n  return minute;\n}\n\nmodule.exports = reformTt;\n\n},{}],26:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the two-digit minutes\n * @param   {Date}   date a date object\n * @returns {String} the two-digit minutes\n */\nfunction reformTtt(date) {\n  var minute = date.getMinutes().toString();\n  return minute.length < 2 ? '0' + minute : minute;\n}\n\nmodule.exports = reformTtt;\n\n},{}],27:[function(require,module,exports){\n'use strict';\n\n/**\n * Converts a date object to UNIX time (milliseconds from January 1, 1970)\n * @param   {Date}   date a date object\n * @returns {Number} milliseconds from January 1, 1970\n */\n\nfunction reformUnix(date) {\n  return Date.parse(date);\n}\n\nmodule.exports = reformUnix;\n\n},{}],28:[function(require,module,exports){\n'use strict';\n\n/**\n * Converts a date object to a UTC string\n * @param   {Date}   date a date object\n * @param \t{String}\tformat optional 'shart' to remove the time from the output\n * @returns {String} UTC string with or without time\n */\n\nfunction reformUTC(date, format) {\n\tformat = format || null;\n\tvar utc = date.toUTCString();\n\tif (format === 'short') {\n\t\tvar arr = utc.split(' ');\n\t\tvar newArr = [];\n\n\t\tfor (var i = 0; i < 4; i++) {\n\t\t\tnewArr.push(arr[i]);\n\t\t}\n\n\t\treturn newArr.join(' ');\n\t}\n\treturn utc;\n}\n\nmodule.exports = reformUTC;\n\n},{}],29:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the two-digit year\n * @param {Date} \ta date object\n * @returns {Number}\tthe two-digit year\n */\nfunction reformYy(date) {\n  return date.getFullYear().toString().substr(2);\n}\n\nmodule.exports = reformYy;\n\n},{}],30:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the four-digit year\n * @param {Date} \ta date object\n * @returns {Number}\tthe four-digit year\n */\nfunction reformYyyy(date) {\n  return date.getFullYear();\n}\n\nmodule.exports = reformYyyy;\n\n},{}],31:[function(require,module,exports){\n'use strict';\n\n/**\n * Take a date object and output the timezone offset (UTC +- 01:00, etc.)\n * @param   {Date}   date a date object\n * @returns {String} the timezone offset \n */\nfunction reformZz(date) {\n  var offset = date.getTimezoneOffset() / 60 * -1;\n  return 'UTC ' + offset + ':00';\n}\n\nmodule.exports = reformZz;\n\n},{}],32:[function(require,module,exports){\n'use strict';\n\nvar reformTo = {};\nreformTo.AP = require('./reform-to-_ap_');\nreformTo.ap = require('./reform-to-ap');\nreformTo.D = require('./reform-to-_d_');\nreformTo.DD = require('./reform-to-_dd_');\nreformTo.M = require('./reform-to-_m_');\nreformTo.MM = require('./reform-to-_mm_');\nreformTo.m = require('./reform-to-m');\nreformTo.mm = require('./reform-to-mm');\nreformTo.d = require('./reform-to-d');\nreformTo.dd = require('./reform-to-dd');\nreformTo.h = require('./reform-to-h');\nreformTo.hh = require('./reform-to-hh');\nreformTo.H = require('./reform-to-_h_');\nreformTo.HH = require('./reform-to-_hh_');\nreformTo.s = require('./reform-to-s');\nreformTo.ss = require('./reform-to-ss');\nreformTo.l = require('./reform-to-l');\nreformTo.ll = require('./reform-to-ll');\nreformTo.t = require('./reform-to-t');\nreformTo.tt = require('./reform-to-tt');\nreformTo.yy = require('./reform-to-yy');\nreformTo.yyyy = require('./reform-to-yyyy');\nreformTo.zz = require('./reform-to-zz');\nreformTo.unix = require('./reform-to-unix');\nreformTo.utc = require('./reform-to-utc');\nreformTo.iso = require('./reform-to-iso');\n\n/**\n * Take a Gregorian object and output the reformatted string\n * @param {String} \tformat a string or date object (something that can be converted to a valid date)\n * @returns {String}\tthe date reformatted into the specified format\n */\nfunction to(format, delimiter) {\n\tdelimiter = delimiter || '+';\n\tvar date = this.d;\n\tvar converted = format;\n\tvar search = ['unix', // The number of milliseconds passed since January 1, 1970\n\t'utc-short', // shortened UTC string (no time included)\n\t'utc', // UTC string\n\t'iso-short', // shortened ISO string (no time included)\n\t'iso', // ISO string\n\t'yyyy', // four-digit year 2015\n\t'yy', // two-digit year (20)15\n\t'DD', // full day of the week Sunday-Saturday\n\t'dd', // two-digit date of the month 01-31\n\t'D', // abbreviated day of the week Sun-Sat\n\t'd', // date of the month with no leading zeros 1-31\n\t'MM', // full month January-December\n\t'mm', // two-digit month 00-12\n\t'M', // abbreviated month Jan-Dec\n\t'm', // month with no leading zeros 1-12\n\t'hh', // two-digit hours 00-12\n\t'h', // hour with no leading zeros 1-12\n\t'HH', // two-digit 24-hour clock hours 00-24\n\t'H', // 24-hour clock hour with no leading zeros 0-24\n\t'tt', // two-digit minutes 00-59\n\t't', // minutes with no leading zeros 0-59\n\t'AP', // AM or PM\n\t'ap', // am or pm\n\t'ss', // two-digit seconds 00-59\n\t's', // seconds with no leading zeros 0-59\n\t'll', // milliseconds 000-999\n\t'l', // milliseconds with no leading zeros 0-999\n\t'zz' // timezone offset UTC -6:00\n\t];\n\n\tsearch.some(function (piece) {\n\t\t//console.log(converted + ' vs ' + piece);\n\t\tvar re = new RegExp('\\\\b' + piece + '\\\\b', 'g');\n\t\tif (re.test(converted)) {\n\t\t\tswitch (piece) {\n\t\t\t\tcase 'unix':\n\t\t\t\t\tconverted = reformTo.unix(date);\n\t\t\t\t\treturn true;\n\t\t\t\tcase 'utc-short':\n\t\t\t\t\tconverted = reformTo.utc(date, 'short');\n\t\t\t\t\treturn true;\n\t\t\t\tcase 'utc':\n\t\t\t\t\tconverted = reformTo.utc(date);\n\t\t\t\t\treturn true;\n\t\t\t\tcase 'iso-short':\n\t\t\t\t\tconverted = reformTo.iso(date, 'short');\n\t\t\t\t\treturn true;\n\t\t\t\tcase 'iso':\n\t\t\t\t\tconverted = reformTo.iso(date);\n\t\t\t\t\treturn true;\n\t\t\t\tdefault:\n\t\t\t\t\t//console.log('Search string is: ' + piece);\n\t\t\t\t\t//console.log('Converted string is: ' + reformTo[piece](date));\n\t\t\t\t\tvar replacer = reformTo[piece](date).toString();\n\t\t\t\t\tconverted = converted.replace(re, replacer);\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t});\n\tif (typeof converted === 'string') {\n\t\tconverted = converted.replace(new RegExp('\\\\' + delimiter, 'g'), '');\n\t}\n\t// console .log(converted);\n\treturn converted;\n}\n\nmodule.exports = to;\n\n},{\"./reform-to-_ap_\":6,\"./reform-to-_d_\":7,\"./reform-to-_dd_\":8,\"./reform-to-_h_\":9,\"./reform-to-_hh_\":10,\"./reform-to-_m_\":11,\"./reform-to-_mm_\":12,\"./reform-to-ap\":13,\"./reform-to-d\":14,\"./reform-to-dd\":15,\"./reform-to-h\":16,\"./reform-to-hh\":17,\"./reform-to-iso\":18,\"./reform-to-l\":19,\"./reform-to-ll\":20,\"./reform-to-m\":21,\"./reform-to-mm\":22,\"./reform-to-s\":23,\"./reform-to-ss\":24,\"./reform-to-t\":25,\"./reform-to-tt\":26,\"./reform-to-unix\":27,\"./reform-to-utc\":28,\"./reform-to-yy\":29,\"./reform-to-yyyy\":30,\"./reform-to-zz\":31}],33:[function(require,module,exports){\n'use strict';\n\nvar reformDate = require('./reform-date');\nvar reformTo = require('./reform-to');\nvar reformAdd = require('./reform-add');\nvar reformSubtract = require('./reform-subtract');\nvar reformRestart = require('./reform-restart');\n\n/**\n * Take a string or date object and convert it into a gregorian object\n * @param   {Object} obj A string or date object that can be parsed into a date\n * @returns {Object} Gregorian object\n */\nfunction reform(obj) {\n\tvar date = reformDate(obj);\n\treturn {\n\t\td: date,\n\t\tinput: obj,\n\t\tto: reformTo,\n\t\tadd: reformAdd,\n\t\tsubtract: reformSubtract,\n\t\trestart: reformRestart\n\t};\n}\n\nmodule.exports = reform;\n\n},{\"./reform-add\":2,\"./reform-date\":3,\"./reform-restart\":4,\"./reform-subtract\":5,\"./reform-to\":32}]},{},[1])(1)\n});"],"file":"gregorian.js","sourceRoot":"/source/"}